// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/pinezapple/LibraryProject20201/skeleton/model/docmanager.proto

package docmanagerModel

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	model "github.com/pinezapple/LibraryProject20201/skeleton/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Doc struct {
	ID         uint64      `protobuf:"varint,1,opt,name=ID,proto3" json:"id_doc" db:"id_doc"`
	Name       string      `protobuf:"bytes,2,opt,name=Name,proto3" json:"doc_name" db:"doc_name"`
	CategoryId uint64      `protobuf:"varint,3,opt,name=Category_id,json=CategoryId,proto3" json:"category_id" db:"category_id"`
	CreatedAt  *model.Time `protobuf:"bytes,4,opt,name=Created_at,json=CreatedAt,proto3" json:"created_at" db:"created_at"`
	UpdatedAt  *model.Time `protobuf:"bytes,5,opt,name=Updated_at,json=UpdatedAt,proto3" json:"updated_at" db:"updated_at"`
}

func (m *Doc) Reset()         { *m = Doc{} }
func (m *Doc) String() string { return proto.CompactTextString(m) }
func (*Doc) ProtoMessage()    {}
func (*Doc) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bc93e03df457931, []int{0}
}
func (m *Doc) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Doc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Doc.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Doc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Doc.Merge(m, src)
}
func (m *Doc) XXX_Size() int {
	return m.Size()
}
func (m *Doc) XXX_DiscardUnknown() {
	xxx_messageInfo_Doc.DiscardUnknown(m)
}

var xxx_messageInfo_Doc proto.InternalMessageInfo

func (m *Doc) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Doc) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Doc) GetCategoryId() uint64 {
	if m != nil {
		return m.CategoryId
	}
	return 0
}

func (m *Doc) GetCreatedAt() *model.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Doc) GetUpdatedAt() *model.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

type DocVersion struct {
	DocVer         string      `protobuf:"bytes,1,opt,name=DocVer,proto3" json:"doc_ver" db:"doc_ver"`
	DocID          uint64      `protobuf:"varint,2,opt,name=DocID,proto3" json:"doc_id" db:"doc_id"`
	Version        uint64      `protobuf:"varint,3,opt,name=Version,proto3" json:"version" db:"version"`
	Price          uint64      `protobuf:"varint,4,opt,name=Price,proto3" json:"price" db:"price"`
	DocDescription string      `protobuf:"bytes,5,opt,name=DocDescription,proto3" json:"doc_description" db:"doc_description"`
	Publisher      string      `protobuf:"bytes,6,opt,name=Publisher,proto3" json:"publisher" db:"publisher"`
	CreatedAt      *model.Time `protobuf:"bytes,7,opt,name=Created_at,json=CreatedAt,proto3" json:"created_at" db:"created_at"`
	UpdatedAt      *model.Time `protobuf:"bytes,8,opt,name=Updated_at,json=UpdatedAt,proto3" json:"updated_at" db:"updated_at"`
}

func (m *DocVersion) Reset()         { *m = DocVersion{} }
func (m *DocVersion) String() string { return proto.CompactTextString(m) }
func (*DocVersion) ProtoMessage()    {}
func (*DocVersion) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bc93e03df457931, []int{1}
}
func (m *DocVersion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DocVersion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DocVersion.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DocVersion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DocVersion.Merge(m, src)
}
func (m *DocVersion) XXX_Size() int {
	return m.Size()
}
func (m *DocVersion) XXX_DiscardUnknown() {
	xxx_messageInfo_DocVersion.DiscardUnknown(m)
}

var xxx_messageInfo_DocVersion proto.InternalMessageInfo

func (m *DocVersion) GetDocVer() string {
	if m != nil {
		return m.DocVer
	}
	return ""
}

func (m *DocVersion) GetDocID() uint64 {
	if m != nil {
		return m.DocID
	}
	return 0
}

func (m *DocVersion) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *DocVersion) GetPrice() uint64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *DocVersion) GetDocDescription() string {
	if m != nil {
		return m.DocDescription
	}
	return ""
}

func (m *DocVersion) GetPublisher() string {
	if m != nil {
		return m.Publisher
	}
	return ""
}

func (m *DocVersion) GetCreatedAt() *model.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *DocVersion) GetUpdatedAt() *model.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

type Barcode struct {
	ID         uint64      `protobuf:"varint,1,opt,name=ID,proto3" json:"barcode_id" db:"barcode_id"`
	Status     uint64      `protobuf:"varint,2,opt,name=Status,proto3" json:"status" db:"status"`
	SaleBillID uint64      `protobuf:"varint,4,opt,name=SaleBillID,proto3" json:"sale_bill_id" db:"sale_bill_id"`
	DocVerID   uint64      `protobuf:"varint,5,opt,name=DocVerID,proto3" json:"document_version_id" db:"document_version_id"`
	CreatedAt  *model.Time `protobuf:"bytes,6,opt,name=Created_at,json=CreatedAt,proto3" json:"created_at" db:"created_at"`
	UpdatedAt  *model.Time `protobuf:"bytes,7,opt,name=Updated_at,json=UpdatedAt,proto3" json:"updated_at" db:"updated_at"`
}

func (m *Barcode) Reset()         { *m = Barcode{} }
func (m *Barcode) String() string { return proto.CompactTextString(m) }
func (*Barcode) ProtoMessage()    {}
func (*Barcode) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bc93e03df457931, []int{2}
}
func (m *Barcode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Barcode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Barcode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Barcode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Barcode.Merge(m, src)
}
func (m *Barcode) XXX_Size() int {
	return m.Size()
}
func (m *Barcode) XXX_DiscardUnknown() {
	xxx_messageInfo_Barcode.DiscardUnknown(m)
}

var xxx_messageInfo_Barcode proto.InternalMessageInfo

func (m *Barcode) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Barcode) GetStatus() uint64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Barcode) GetSaleBillID() uint64 {
	if m != nil {
		return m.SaleBillID
	}
	return 0
}

func (m *Barcode) GetDocVerID() uint64 {
	if m != nil {
		return m.DocVerID
	}
	return 0
}

func (m *Barcode) GetCreatedAt() *model.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Barcode) GetUpdatedAt() *model.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

type Payment struct {
	ID            uint64      `protobuf:"varint,1,opt,name=ID,proto3" json:"payment_id" db:"payment_id"`
	LibrarianID   uint64      `protobuf:"varint,3,opt,name=LibrarianID,proto3" json:"librarian_id" db:"librarian_id"`
	BorrowFormID  uint64      `protobuf:"varint,4,opt,name=BorrowFormID,proto3" json:"borrow_form_id" db:"borrow_form_id"`
	Fine          uint64      `protobuf:"varint,5,opt,name=Fine,proto3" json:"fine" db:"fine"`
	ReaderID      uint64      `protobuf:"varint,6,opt,name=ReaderID,proto3" json:"reader_id" db:"reader_id"`
	BarcodeID     []uint64    `protobuf:"varint,7,rep,packed,name=BarcodeID,proto3" json:"barcode_id" db:"barcode_id"`
	BarcodeStatus []uint64    `protobuf:"varint,8,rep,packed,name=BarcodeStatus,proto3" json:"barcode_status" db:"barcode_status"`
	Money         []uint64    `protobuf:"varint,9,rep,packed,name=Money,proto3" json:"money" db:"money"`
	CreatedAt     *model.Time `protobuf:"bytes,10,opt,name=Created_at,json=CreatedAt,proto3" json:"created_at" db:"created_at"`
	UpdatedAt     *model.Time `protobuf:"bytes,11,opt,name=Updated_at,json=UpdatedAt,proto3" json:"updated_at" db:"updated_at"`
}

func (m *Payment) Reset()         { *m = Payment{} }
func (m *Payment) String() string { return proto.CompactTextString(m) }
func (*Payment) ProtoMessage()    {}
func (*Payment) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bc93e03df457931, []int{3}
}
func (m *Payment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Payment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Payment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Payment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Payment.Merge(m, src)
}
func (m *Payment) XXX_Size() int {
	return m.Size()
}
func (m *Payment) XXX_DiscardUnknown() {
	xxx_messageInfo_Payment.DiscardUnknown(m)
}

var xxx_messageInfo_Payment proto.InternalMessageInfo

func (m *Payment) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Payment) GetLibrarianID() uint64 {
	if m != nil {
		return m.LibrarianID
	}
	return 0
}

func (m *Payment) GetBorrowFormID() uint64 {
	if m != nil {
		return m.BorrowFormID
	}
	return 0
}

func (m *Payment) GetFine() uint64 {
	if m != nil {
		return m.Fine
	}
	return 0
}

func (m *Payment) GetReaderID() uint64 {
	if m != nil {
		return m.ReaderID
	}
	return 0
}

func (m *Payment) GetBarcodeID() []uint64 {
	if m != nil {
		return m.BarcodeID
	}
	return nil
}

func (m *Payment) GetBarcodeStatus() []uint64 {
	if m != nil {
		return m.BarcodeStatus
	}
	return nil
}

func (m *Payment) GetMoney() []uint64 {
	if m != nil {
		return m.Money
	}
	return nil
}

func (m *Payment) GetCreatedAt() *model.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Payment) GetUpdatedAt() *model.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

type BorrowForm struct {
	ID          uint64      `protobuf:"varint,1,opt,name=ID,proto3" json:"borrow_form_id" db:"borrow_form_id"`
	LibrarianID uint64      `protobuf:"varint,2,opt,name=LibrarianID,proto3" json:"librarian_id" db:"librarian_id"`
	Status      uint64      `protobuf:"varint,3,opt,name=Status,proto3" json:"status" db:"status"`
	ReaderID    uint64      `protobuf:"varint,4,opt,name=ReaderID,proto3" json:"reader_id" db:"reader_id"`
	BarcodeID   []uint64    `protobuf:"varint,5,rep,packed,name=BarcodeID,proto3" json:"barcode_id" db:"barcode_id"`
	StartTime   *model.Time `protobuf:"bytes,6,opt,name=StartTime,proto3" json:"start_time" db:"start_time"`
	EndTime     *model.Time `protobuf:"bytes,7,opt,name=EndTime,proto3" json:"end_time" db:"end_time"`
	CreatedAt   *model.Time `protobuf:"bytes,8,opt,name=Created_at,json=CreatedAt,proto3" json:"created_at" db:"created_at"`
	UpdatedAt   *model.Time `protobuf:"bytes,9,opt,name=Updated_at,json=UpdatedAt,proto3" json:"updated_at" db:"updated_at"`
}

func (m *BorrowForm) Reset()         { *m = BorrowForm{} }
func (m *BorrowForm) String() string { return proto.CompactTextString(m) }
func (*BorrowForm) ProtoMessage()    {}
func (*BorrowForm) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bc93e03df457931, []int{4}
}
func (m *BorrowForm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BorrowForm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BorrowForm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BorrowForm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BorrowForm.Merge(m, src)
}
func (m *BorrowForm) XXX_Size() int {
	return m.Size()
}
func (m *BorrowForm) XXX_DiscardUnknown() {
	xxx_messageInfo_BorrowForm.DiscardUnknown(m)
}

var xxx_messageInfo_BorrowForm proto.InternalMessageInfo

func (m *BorrowForm) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *BorrowForm) GetLibrarianID() uint64 {
	if m != nil {
		return m.LibrarianID
	}
	return 0
}

func (m *BorrowForm) GetStatus() uint64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *BorrowForm) GetReaderID() uint64 {
	if m != nil {
		return m.ReaderID
	}
	return 0
}

func (m *BorrowForm) GetBarcodeID() []uint64 {
	if m != nil {
		return m.BarcodeID
	}
	return nil
}

func (m *BorrowForm) GetStartTime() *model.Time {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *BorrowForm) GetEndTime() *model.Time {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func (m *BorrowForm) GetCreatedAt() *model.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *BorrowForm) GetUpdatedAt() *model.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

type SaleBill struct {
	ID          uint64      `protobuf:"varint,1,opt,name=ID,proto3" json:"sale_bill_id" db:"sale_bill_id"`
	LibrarianID uint64      `protobuf:"varint,2,opt,name=LibrarianID,proto3" json:"librarian_id" db:"librarian_id"`
	BarcodeID   []uint64    `protobuf:"varint,3,rep,packed,name=BarcodeID,proto3" json:"barcode_id" db:"barcode_id"`
	Price       []uint64    `protobuf:"varint,4,rep,packed,name=Price,proto3" json:"price" db:"price"`
	CreatedAt   *model.Time `protobuf:"bytes,5,opt,name=Created_at,json=CreatedAt,proto3" json:"created_at" db:"created_at"`
}

func (m *SaleBill) Reset()         { *m = SaleBill{} }
func (m *SaleBill) String() string { return proto.CompactTextString(m) }
func (*SaleBill) ProtoMessage()    {}
func (*SaleBill) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bc93e03df457931, []int{5}
}
func (m *SaleBill) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SaleBill) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SaleBill.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SaleBill) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaleBill.Merge(m, src)
}
func (m *SaleBill) XXX_Size() int {
	return m.Size()
}
func (m *SaleBill) XXX_DiscardUnknown() {
	xxx_messageInfo_SaleBill.DiscardUnknown(m)
}

var xxx_messageInfo_SaleBill proto.InternalMessageInfo

func (m *SaleBill) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *SaleBill) GetLibrarianID() uint64 {
	if m != nil {
		return m.LibrarianID
	}
	return 0
}

func (m *SaleBill) GetBarcodeID() []uint64 {
	if m != nil {
		return m.BarcodeID
	}
	return nil
}

func (m *SaleBill) GetPrice() []uint64 {
	if m != nil {
		return m.Price
	}
	return nil
}

func (m *SaleBill) GetCreatedAt() *model.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

// ---------------------------------------------------------------
type SelectAllBarcodeReq struct {
}

func (m *SelectAllBarcodeReq) Reset()         { *m = SelectAllBarcodeReq{} }
func (m *SelectAllBarcodeReq) String() string { return proto.CompactTextString(m) }
func (*SelectAllBarcodeReq) ProtoMessage()    {}
func (*SelectAllBarcodeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bc93e03df457931, []int{6}
}
func (m *SelectAllBarcodeReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SelectAllBarcodeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SelectAllBarcodeReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SelectAllBarcodeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SelectAllBarcodeReq.Merge(m, src)
}
func (m *SelectAllBarcodeReq) XXX_Size() int {
	return m.Size()
}
func (m *SelectAllBarcodeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SelectAllBarcodeReq.DiscardUnknown(m)
}

var xxx_messageInfo_SelectAllBarcodeReq proto.InternalMessageInfo

type SelectAllBarcodeResp struct {
	Code     int32      `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Message  string     `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	Barcodes []*Barcode `protobuf:"bytes,3,rep,name=Barcodes,proto3" json:"Barcodes,omitempty"`
}

func (m *SelectAllBarcodeResp) Reset()         { *m = SelectAllBarcodeResp{} }
func (m *SelectAllBarcodeResp) String() string { return proto.CompactTextString(m) }
func (*SelectAllBarcodeResp) ProtoMessage()    {}
func (*SelectAllBarcodeResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bc93e03df457931, []int{7}
}
func (m *SelectAllBarcodeResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SelectAllBarcodeResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SelectAllBarcodeResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SelectAllBarcodeResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SelectAllBarcodeResp.Merge(m, src)
}
func (m *SelectAllBarcodeResp) XXX_Size() int {
	return m.Size()
}
func (m *SelectAllBarcodeResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SelectAllBarcodeResp.DiscardUnknown(m)
}

var xxx_messageInfo_SelectAllBarcodeResp proto.InternalMessageInfo

func (m *SelectAllBarcodeResp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SelectAllBarcodeResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *SelectAllBarcodeResp) GetBarcodes() []*Barcode {
	if m != nil {
		return m.Barcodes
	}
	return nil
}

type SelectAllAvailableBarcodeReq struct {
}

func (m *SelectAllAvailableBarcodeReq) Reset()         { *m = SelectAllAvailableBarcodeReq{} }
func (m *SelectAllAvailableBarcodeReq) String() string { return proto.CompactTextString(m) }
func (*SelectAllAvailableBarcodeReq) ProtoMessage()    {}
func (*SelectAllAvailableBarcodeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bc93e03df457931, []int{8}
}
func (m *SelectAllAvailableBarcodeReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SelectAllAvailableBarcodeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SelectAllAvailableBarcodeReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SelectAllAvailableBarcodeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SelectAllAvailableBarcodeReq.Merge(m, src)
}
func (m *SelectAllAvailableBarcodeReq) XXX_Size() int {
	return m.Size()
}
func (m *SelectAllAvailableBarcodeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SelectAllAvailableBarcodeReq.DiscardUnknown(m)
}

var xxx_messageInfo_SelectAllAvailableBarcodeReq proto.InternalMessageInfo

type SelectAllAvailableBarcodeResp struct {
	Code     int32      `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Message  string     `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	Barcodes []*Barcode `protobuf:"bytes,3,rep,name=Barcodes,proto3" json:"Barcodes,omitempty"`
}

func (m *SelectAllAvailableBarcodeResp) Reset()         { *m = SelectAllAvailableBarcodeResp{} }
func (m *SelectAllAvailableBarcodeResp) String() string { return proto.CompactTextString(m) }
func (*SelectAllAvailableBarcodeResp) ProtoMessage()    {}
func (*SelectAllAvailableBarcodeResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bc93e03df457931, []int{9}
}
func (m *SelectAllAvailableBarcodeResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SelectAllAvailableBarcodeResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SelectAllAvailableBarcodeResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SelectAllAvailableBarcodeResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SelectAllAvailableBarcodeResp.Merge(m, src)
}
func (m *SelectAllAvailableBarcodeResp) XXX_Size() int {
	return m.Size()
}
func (m *SelectAllAvailableBarcodeResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SelectAllAvailableBarcodeResp.DiscardUnknown(m)
}

var xxx_messageInfo_SelectAllAvailableBarcodeResp proto.InternalMessageInfo

func (m *SelectAllAvailableBarcodeResp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SelectAllAvailableBarcodeResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *SelectAllAvailableBarcodeResp) GetBarcodes() []*Barcode {
	if m != nil {
		return m.Barcodes
	}
	return nil
}

type SelectAllSellingBarcodeReq struct {
}

func (m *SelectAllSellingBarcodeReq) Reset()         { *m = SelectAllSellingBarcodeReq{} }
func (m *SelectAllSellingBarcodeReq) String() string { return proto.CompactTextString(m) }
func (*SelectAllSellingBarcodeReq) ProtoMessage()    {}
func (*SelectAllSellingBarcodeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bc93e03df457931, []int{10}
}
func (m *SelectAllSellingBarcodeReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SelectAllSellingBarcodeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SelectAllSellingBarcodeReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SelectAllSellingBarcodeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SelectAllSellingBarcodeReq.Merge(m, src)
}
func (m *SelectAllSellingBarcodeReq) XXX_Size() int {
	return m.Size()
}
func (m *SelectAllSellingBarcodeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SelectAllSellingBarcodeReq.DiscardUnknown(m)
}

var xxx_messageInfo_SelectAllSellingBarcodeReq proto.InternalMessageInfo

type SelectAllSellingBarcodeResp struct {
	Code     int32      `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Message  string     `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	Barcodes []*Barcode `protobuf:"bytes,3,rep,name=Barcodes,proto3" json:"Barcodes,omitempty"`
}

func (m *SelectAllSellingBarcodeResp) Reset()         { *m = SelectAllSellingBarcodeResp{} }
func (m *SelectAllSellingBarcodeResp) String() string { return proto.CompactTextString(m) }
func (*SelectAllSellingBarcodeResp) ProtoMessage()    {}
func (*SelectAllSellingBarcodeResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bc93e03df457931, []int{11}
}
func (m *SelectAllSellingBarcodeResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SelectAllSellingBarcodeResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SelectAllSellingBarcodeResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SelectAllSellingBarcodeResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SelectAllSellingBarcodeResp.Merge(m, src)
}
func (m *SelectAllSellingBarcodeResp) XXX_Size() int {
	return m.Size()
}
func (m *SelectAllSellingBarcodeResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SelectAllSellingBarcodeResp.DiscardUnknown(m)
}

var xxx_messageInfo_SelectAllSellingBarcodeResp proto.InternalMessageInfo

func (m *SelectAllSellingBarcodeResp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SelectAllSellingBarcodeResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *SelectAllSellingBarcodeResp) GetBarcodes() []*Barcode {
	if m != nil {
		return m.Barcodes
	}
	return nil
}

type SelectAllDamageBarcodeReq struct {
}

func (m *SelectAllDamageBarcodeReq) Reset()         { *m = SelectAllDamageBarcodeReq{} }
func (m *SelectAllDamageBarcodeReq) String() string { return proto.CompactTextString(m) }
func (*SelectAllDamageBarcodeReq) ProtoMessage()    {}
func (*SelectAllDamageBarcodeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bc93e03df457931, []int{12}
}
func (m *SelectAllDamageBarcodeReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SelectAllDamageBarcodeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SelectAllDamageBarcodeReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SelectAllDamageBarcodeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SelectAllDamageBarcodeReq.Merge(m, src)
}
func (m *SelectAllDamageBarcodeReq) XXX_Size() int {
	return m.Size()
}
func (m *SelectAllDamageBarcodeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SelectAllDamageBarcodeReq.DiscardUnknown(m)
}

var xxx_messageInfo_SelectAllDamageBarcodeReq proto.InternalMessageInfo

type SelectAllDamageBarcodeResp struct {
	Code     int32      `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Message  string     `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	Barcodes []*Barcode `protobuf:"bytes,3,rep,name=Barcodes,proto3" json:"Barcodes,omitempty"`
}

func (m *SelectAllDamageBarcodeResp) Reset()         { *m = SelectAllDamageBarcodeResp{} }
func (m *SelectAllDamageBarcodeResp) String() string { return proto.CompactTextString(m) }
func (*SelectAllDamageBarcodeResp) ProtoMessage()    {}
func (*SelectAllDamageBarcodeResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bc93e03df457931, []int{13}
}
func (m *SelectAllDamageBarcodeResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SelectAllDamageBarcodeResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SelectAllDamageBarcodeResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SelectAllDamageBarcodeResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SelectAllDamageBarcodeResp.Merge(m, src)
}
func (m *SelectAllDamageBarcodeResp) XXX_Size() int {
	return m.Size()
}
func (m *SelectAllDamageBarcodeResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SelectAllDamageBarcodeResp.DiscardUnknown(m)
}

var xxx_messageInfo_SelectAllDamageBarcodeResp proto.InternalMessageInfo

func (m *SelectAllDamageBarcodeResp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SelectAllDamageBarcodeResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *SelectAllDamageBarcodeResp) GetBarcodes() []*Barcode {
	if m != nil {
		return m.Barcodes
	}
	return nil
}

type SelectAllBarcodeByDocVerIDReq struct {
	DocVerID uint64 `protobuf:"varint,1,opt,name=DocVerID,proto3" json:"DocVerID,omitempty"`
}

func (m *SelectAllBarcodeByDocVerIDReq) Reset()         { *m = SelectAllBarcodeByDocVerIDReq{} }
func (m *SelectAllBarcodeByDocVerIDReq) String() string { return proto.CompactTextString(m) }
func (*SelectAllBarcodeByDocVerIDReq) ProtoMessage()    {}
func (*SelectAllBarcodeByDocVerIDReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bc93e03df457931, []int{14}
}
func (m *SelectAllBarcodeByDocVerIDReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SelectAllBarcodeByDocVerIDReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SelectAllBarcodeByDocVerIDReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SelectAllBarcodeByDocVerIDReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SelectAllBarcodeByDocVerIDReq.Merge(m, src)
}
func (m *SelectAllBarcodeByDocVerIDReq) XXX_Size() int {
	return m.Size()
}
func (m *SelectAllBarcodeByDocVerIDReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SelectAllBarcodeByDocVerIDReq.DiscardUnknown(m)
}

var xxx_messageInfo_SelectAllBarcodeByDocVerIDReq proto.InternalMessageInfo

func (m *SelectAllBarcodeByDocVerIDReq) GetDocVerID() uint64 {
	if m != nil {
		return m.DocVerID
	}
	return 0
}

type SelectAllBarcodeByDocVerIDResp struct {
	Code    int32      `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Message string     `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	Barcode []*Barcode `protobuf:"bytes,3,rep,name=Barcode,proto3" json:"Barcode,omitempty"`
}

func (m *SelectAllBarcodeByDocVerIDResp) Reset()         { *m = SelectAllBarcodeByDocVerIDResp{} }
func (m *SelectAllBarcodeByDocVerIDResp) String() string { return proto.CompactTextString(m) }
func (*SelectAllBarcodeByDocVerIDResp) ProtoMessage()    {}
func (*SelectAllBarcodeByDocVerIDResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bc93e03df457931, []int{15}
}
func (m *SelectAllBarcodeByDocVerIDResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SelectAllBarcodeByDocVerIDResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SelectAllBarcodeByDocVerIDResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SelectAllBarcodeByDocVerIDResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SelectAllBarcodeByDocVerIDResp.Merge(m, src)
}
func (m *SelectAllBarcodeByDocVerIDResp) XXX_Size() int {
	return m.Size()
}
func (m *SelectAllBarcodeByDocVerIDResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SelectAllBarcodeByDocVerIDResp.DiscardUnknown(m)
}

var xxx_messageInfo_SelectAllBarcodeByDocVerIDResp proto.InternalMessageInfo

func (m *SelectAllBarcodeByDocVerIDResp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SelectAllBarcodeByDocVerIDResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *SelectAllBarcodeByDocVerIDResp) GetBarcode() []*Barcode {
	if m != nil {
		return m.Barcode
	}
	return nil
}

type SelectBarcodeByIDReq struct {
	BarcodeID uint64 `protobuf:"varint,1,opt,name=BarcodeID,proto3" json:"BarcodeID,omitempty"`
}

func (m *SelectBarcodeByIDReq) Reset()         { *m = SelectBarcodeByIDReq{} }
func (m *SelectBarcodeByIDReq) String() string { return proto.CompactTextString(m) }
func (*SelectBarcodeByIDReq) ProtoMessage()    {}
func (*SelectBarcodeByIDReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bc93e03df457931, []int{16}
}
func (m *SelectBarcodeByIDReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SelectBarcodeByIDReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SelectBarcodeByIDReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SelectBarcodeByIDReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SelectBarcodeByIDReq.Merge(m, src)
}
func (m *SelectBarcodeByIDReq) XXX_Size() int {
	return m.Size()
}
func (m *SelectBarcodeByIDReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SelectBarcodeByIDReq.DiscardUnknown(m)
}

var xxx_messageInfo_SelectBarcodeByIDReq proto.InternalMessageInfo

func (m *SelectBarcodeByIDReq) GetBarcodeID() uint64 {
	if m != nil {
		return m.BarcodeID
	}
	return 0
}

type SelectBarcodeByIDResp struct {
	Code    int32    `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Message string   `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	Barcode *Barcode `protobuf:"bytes,3,opt,name=Barcode,proto3" json:"Barcode,omitempty"`
}

func (m *SelectBarcodeByIDResp) Reset()         { *m = SelectBarcodeByIDResp{} }
func (m *SelectBarcodeByIDResp) String() string { return proto.CompactTextString(m) }
func (*SelectBarcodeByIDResp) ProtoMessage()    {}
func (*SelectBarcodeByIDResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bc93e03df457931, []int{17}
}
func (m *SelectBarcodeByIDResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SelectBarcodeByIDResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SelectBarcodeByIDResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SelectBarcodeByIDResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SelectBarcodeByIDResp.Merge(m, src)
}
func (m *SelectBarcodeByIDResp) XXX_Size() int {
	return m.Size()
}
func (m *SelectBarcodeByIDResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SelectBarcodeByIDResp.DiscardUnknown(m)
}

var xxx_messageInfo_SelectBarcodeByIDResp proto.InternalMessageInfo

func (m *SelectBarcodeByIDResp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SelectBarcodeByIDResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *SelectBarcodeByIDResp) GetBarcode() *Barcode {
	if m != nil {
		return m.Barcode
	}
	return nil
}

type SaveBarcodeReq struct {
	Barcode *Barcode `protobuf:"bytes,1,opt,name=Barcode,proto3" json:"Barcode,omitempty"`
}

func (m *SaveBarcodeReq) Reset()         { *m = SaveBarcodeReq{} }
func (m *SaveBarcodeReq) String() string { return proto.CompactTextString(m) }
func (*SaveBarcodeReq) ProtoMessage()    {}
func (*SaveBarcodeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bc93e03df457931, []int{18}
}
func (m *SaveBarcodeReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SaveBarcodeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SaveBarcodeReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SaveBarcodeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveBarcodeReq.Merge(m, src)
}
func (m *SaveBarcodeReq) XXX_Size() int {
	return m.Size()
}
func (m *SaveBarcodeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveBarcodeReq.DiscardUnknown(m)
}

var xxx_messageInfo_SaveBarcodeReq proto.InternalMessageInfo

func (m *SaveBarcodeReq) GetBarcode() *Barcode {
	if m != nil {
		return m.Barcode
	}
	return nil
}

type SaveBarcodeResp struct {
	Code    int32  `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (m *SaveBarcodeResp) Reset()         { *m = SaveBarcodeResp{} }
func (m *SaveBarcodeResp) String() string { return proto.CompactTextString(m) }
func (*SaveBarcodeResp) ProtoMessage()    {}
func (*SaveBarcodeResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bc93e03df457931, []int{19}
}
func (m *SaveBarcodeResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SaveBarcodeResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SaveBarcodeResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SaveBarcodeResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveBarcodeResp.Merge(m, src)
}
func (m *SaveBarcodeResp) XXX_Size() int {
	return m.Size()
}
func (m *SaveBarcodeResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveBarcodeResp.DiscardUnknown(m)
}

var xxx_messageInfo_SaveBarcodeResp proto.InternalMessageInfo

func (m *SaveBarcodeResp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SaveBarcodeResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type UpdateBarcodeReq struct {
	Barcode *Barcode `protobuf:"bytes,1,opt,name=Barcode,proto3" json:"Barcode,omitempty"`
}

func (m *UpdateBarcodeReq) Reset()         { *m = UpdateBarcodeReq{} }
func (m *UpdateBarcodeReq) String() string { return proto.CompactTextString(m) }
func (*UpdateBarcodeReq) ProtoMessage()    {}
func (*UpdateBarcodeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bc93e03df457931, []int{20}
}
func (m *UpdateBarcodeReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateBarcodeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateBarcodeReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateBarcodeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateBarcodeReq.Merge(m, src)
}
func (m *UpdateBarcodeReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateBarcodeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateBarcodeReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateBarcodeReq proto.InternalMessageInfo

func (m *UpdateBarcodeReq) GetBarcode() *Barcode {
	if m != nil {
		return m.Barcode
	}
	return nil
}

type UpdateBarcodeResp struct {
	Code    int32  `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (m *UpdateBarcodeResp) Reset()         { *m = UpdateBarcodeResp{} }
func (m *UpdateBarcodeResp) String() string { return proto.CompactTextString(m) }
func (*UpdateBarcodeResp) ProtoMessage()    {}
func (*UpdateBarcodeResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bc93e03df457931, []int{21}
}
func (m *UpdateBarcodeResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateBarcodeResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateBarcodeResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateBarcodeResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateBarcodeResp.Merge(m, src)
}
func (m *UpdateBarcodeResp) XXX_Size() int {
	return m.Size()
}
func (m *UpdateBarcodeResp) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateBarcodeResp.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateBarcodeResp proto.InternalMessageInfo

func (m *UpdateBarcodeResp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *UpdateBarcodeResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type DeleteBarcodeReq struct {
	BarcodeID uint64 `protobuf:"varint,1,opt,name=BarcodeID,proto3" json:"BarcodeID,omitempty"`
}

func (m *DeleteBarcodeReq) Reset()         { *m = DeleteBarcodeReq{} }
func (m *DeleteBarcodeReq) String() string { return proto.CompactTextString(m) }
func (*DeleteBarcodeReq) ProtoMessage()    {}
func (*DeleteBarcodeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bc93e03df457931, []int{22}
}
func (m *DeleteBarcodeReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteBarcodeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteBarcodeReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteBarcodeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteBarcodeReq.Merge(m, src)
}
func (m *DeleteBarcodeReq) XXX_Size() int {
	return m.Size()
}
func (m *DeleteBarcodeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteBarcodeReq.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteBarcodeReq proto.InternalMessageInfo

func (m *DeleteBarcodeReq) GetBarcodeID() uint64 {
	if m != nil {
		return m.BarcodeID
	}
	return 0
}

type DeleteBarcodeResp struct {
	Code    int32  `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (m *DeleteBarcodeResp) Reset()         { *m = DeleteBarcodeResp{} }
func (m *DeleteBarcodeResp) String() string { return proto.CompactTextString(m) }
func (*DeleteBarcodeResp) ProtoMessage()    {}
func (*DeleteBarcodeResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bc93e03df457931, []int{23}
}
func (m *DeleteBarcodeResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteBarcodeResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteBarcodeResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteBarcodeResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteBarcodeResp.Merge(m, src)
}
func (m *DeleteBarcodeResp) XXX_Size() int {
	return m.Size()
}
func (m *DeleteBarcodeResp) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteBarcodeResp.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteBarcodeResp proto.InternalMessageInfo

func (m *DeleteBarcodeResp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *DeleteBarcodeResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type SelectAllBorrowFormReq struct {
}

func (m *SelectAllBorrowFormReq) Reset()         { *m = SelectAllBorrowFormReq{} }
func (m *SelectAllBorrowFormReq) String() string { return proto.CompactTextString(m) }
func (*SelectAllBorrowFormReq) ProtoMessage()    {}
func (*SelectAllBorrowFormReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bc93e03df457931, []int{24}
}
func (m *SelectAllBorrowFormReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SelectAllBorrowFormReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SelectAllBorrowFormReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SelectAllBorrowFormReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SelectAllBorrowFormReq.Merge(m, src)
}
func (m *SelectAllBorrowFormReq) XXX_Size() int {
	return m.Size()
}
func (m *SelectAllBorrowFormReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SelectAllBorrowFormReq.DiscardUnknown(m)
}

var xxx_messageInfo_SelectAllBorrowFormReq proto.InternalMessageInfo

type SelectAllBorrowFormResp struct {
	Code        int32         `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Message     string        `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	BorrowForms []*BorrowForm `protobuf:"bytes,3,rep,name=BorrowForms,proto3" json:"BorrowForms,omitempty"`
}

func (m *SelectAllBorrowFormResp) Reset()         { *m = SelectAllBorrowFormResp{} }
func (m *SelectAllBorrowFormResp) String() string { return proto.CompactTextString(m) }
func (*SelectAllBorrowFormResp) ProtoMessage()    {}
func (*SelectAllBorrowFormResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bc93e03df457931, []int{25}
}
func (m *SelectAllBorrowFormResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SelectAllBorrowFormResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SelectAllBorrowFormResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SelectAllBorrowFormResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SelectAllBorrowFormResp.Merge(m, src)
}
func (m *SelectAllBorrowFormResp) XXX_Size() int {
	return m.Size()
}
func (m *SelectAllBorrowFormResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SelectAllBorrowFormResp.DiscardUnknown(m)
}

var xxx_messageInfo_SelectAllBorrowFormResp proto.InternalMessageInfo

func (m *SelectAllBorrowFormResp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SelectAllBorrowFormResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *SelectAllBorrowFormResp) GetBorrowForms() []*BorrowForm {
	if m != nil {
		return m.BorrowForms
	}
	return nil
}

type SelectAllUnReturnBorrowFormReq struct {
}

func (m *SelectAllUnReturnBorrowFormReq) Reset()         { *m = SelectAllUnReturnBorrowFormReq{} }
func (m *SelectAllUnReturnBorrowFormReq) String() string { return proto.CompactTextString(m) }
func (*SelectAllUnReturnBorrowFormReq) ProtoMessage()    {}
func (*SelectAllUnReturnBorrowFormReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bc93e03df457931, []int{26}
}
func (m *SelectAllUnReturnBorrowFormReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SelectAllUnReturnBorrowFormReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SelectAllUnReturnBorrowFormReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SelectAllUnReturnBorrowFormReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SelectAllUnReturnBorrowFormReq.Merge(m, src)
}
func (m *SelectAllUnReturnBorrowFormReq) XXX_Size() int {
	return m.Size()
}
func (m *SelectAllUnReturnBorrowFormReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SelectAllUnReturnBorrowFormReq.DiscardUnknown(m)
}

var xxx_messageInfo_SelectAllUnReturnBorrowFormReq proto.InternalMessageInfo

type SelectAllUnReturnBorrowFormResp struct {
	Code        int32         `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Message     string        `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	BorrowForms []*BorrowForm `protobuf:"bytes,3,rep,name=BorrowForms,proto3" json:"BorrowForms,omitempty"`
}

func (m *SelectAllUnReturnBorrowFormResp) Reset()         { *m = SelectAllUnReturnBorrowFormResp{} }
func (m *SelectAllUnReturnBorrowFormResp) String() string { return proto.CompactTextString(m) }
func (*SelectAllUnReturnBorrowFormResp) ProtoMessage()    {}
func (*SelectAllUnReturnBorrowFormResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bc93e03df457931, []int{27}
}
func (m *SelectAllUnReturnBorrowFormResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SelectAllUnReturnBorrowFormResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SelectAllUnReturnBorrowFormResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SelectAllUnReturnBorrowFormResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SelectAllUnReturnBorrowFormResp.Merge(m, src)
}
func (m *SelectAllUnReturnBorrowFormResp) XXX_Size() int {
	return m.Size()
}
func (m *SelectAllUnReturnBorrowFormResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SelectAllUnReturnBorrowFormResp.DiscardUnknown(m)
}

var xxx_messageInfo_SelectAllUnReturnBorrowFormResp proto.InternalMessageInfo

func (m *SelectAllUnReturnBorrowFormResp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SelectAllUnReturnBorrowFormResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *SelectAllUnReturnBorrowFormResp) GetBorrowForms() []*BorrowForm {
	if m != nil {
		return m.BorrowForms
	}
	return nil
}

type SelectBorrowFormByIDReq struct {
	BorrowFormID uint64 `protobuf:"varint,1,opt,name=BorrowFormID,proto3" json:"BorrowFormID,omitempty"`
}

func (m *SelectBorrowFormByIDReq) Reset()         { *m = SelectBorrowFormByIDReq{} }
func (m *SelectBorrowFormByIDReq) String() string { return proto.CompactTextString(m) }
func (*SelectBorrowFormByIDReq) ProtoMessage()    {}
func (*SelectBorrowFormByIDReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bc93e03df457931, []int{28}
}
func (m *SelectBorrowFormByIDReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SelectBorrowFormByIDReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SelectBorrowFormByIDReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SelectBorrowFormByIDReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SelectBorrowFormByIDReq.Merge(m, src)
}
func (m *SelectBorrowFormByIDReq) XXX_Size() int {
	return m.Size()
}
func (m *SelectBorrowFormByIDReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SelectBorrowFormByIDReq.DiscardUnknown(m)
}

var xxx_messageInfo_SelectBorrowFormByIDReq proto.InternalMessageInfo

func (m *SelectBorrowFormByIDReq) GetBorrowFormID() uint64 {
	if m != nil {
		return m.BorrowFormID
	}
	return 0
}

type SelectBorrowFormByIDResp struct {
	Code       int32       `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Message    string      `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	Borrowform *BorrowForm `protobuf:"bytes,3,opt,name=Borrowform,proto3" json:"Borrowform,omitempty"`
}

func (m *SelectBorrowFormByIDResp) Reset()         { *m = SelectBorrowFormByIDResp{} }
func (m *SelectBorrowFormByIDResp) String() string { return proto.CompactTextString(m) }
func (*SelectBorrowFormByIDResp) ProtoMessage()    {}
func (*SelectBorrowFormByIDResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bc93e03df457931, []int{29}
}
func (m *SelectBorrowFormByIDResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SelectBorrowFormByIDResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SelectBorrowFormByIDResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SelectBorrowFormByIDResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SelectBorrowFormByIDResp.Merge(m, src)
}
func (m *SelectBorrowFormByIDResp) XXX_Size() int {
	return m.Size()
}
func (m *SelectBorrowFormByIDResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SelectBorrowFormByIDResp.DiscardUnknown(m)
}

var xxx_messageInfo_SelectBorrowFormByIDResp proto.InternalMessageInfo

func (m *SelectBorrowFormByIDResp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SelectBorrowFormByIDResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *SelectBorrowFormByIDResp) GetBorrowform() *BorrowForm {
	if m != nil {
		return m.Borrowform
	}
	return nil
}

type SaveBorrowFormReq struct {
	Borrowform *BorrowForm `protobuf:"bytes,1,opt,name=Borrowform,proto3" json:"Borrowform,omitempty"`
}

func (m *SaveBorrowFormReq) Reset()         { *m = SaveBorrowFormReq{} }
func (m *SaveBorrowFormReq) String() string { return proto.CompactTextString(m) }
func (*SaveBorrowFormReq) ProtoMessage()    {}
func (*SaveBorrowFormReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bc93e03df457931, []int{30}
}
func (m *SaveBorrowFormReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SaveBorrowFormReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SaveBorrowFormReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SaveBorrowFormReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveBorrowFormReq.Merge(m, src)
}
func (m *SaveBorrowFormReq) XXX_Size() int {
	return m.Size()
}
func (m *SaveBorrowFormReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveBorrowFormReq.DiscardUnknown(m)
}

var xxx_messageInfo_SaveBorrowFormReq proto.InternalMessageInfo

func (m *SaveBorrowFormReq) GetBorrowform() *BorrowForm {
	if m != nil {
		return m.Borrowform
	}
	return nil
}

type SaveBorrowFormResp struct {
	Code    int32  `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (m *SaveBorrowFormResp) Reset()         { *m = SaveBorrowFormResp{} }
func (m *SaveBorrowFormResp) String() string { return proto.CompactTextString(m) }
func (*SaveBorrowFormResp) ProtoMessage()    {}
func (*SaveBorrowFormResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bc93e03df457931, []int{31}
}
func (m *SaveBorrowFormResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SaveBorrowFormResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SaveBorrowFormResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SaveBorrowFormResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveBorrowFormResp.Merge(m, src)
}
func (m *SaveBorrowFormResp) XXX_Size() int {
	return m.Size()
}
func (m *SaveBorrowFormResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveBorrowFormResp.DiscardUnknown(m)
}

var xxx_messageInfo_SaveBorrowFormResp proto.InternalMessageInfo

func (m *SaveBorrowFormResp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SaveBorrowFormResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type UpdateBorrowFormStatusReq struct {
	BorrowFormID uint64 `protobuf:"varint,1,opt,name=BorrowFormID,proto3" json:"BorrowFormID,omitempty"`
	Status       uint64 `protobuf:"varint,2,opt,name=Status,proto3" json:"Status,omitempty"`
}

func (m *UpdateBorrowFormStatusReq) Reset()         { *m = UpdateBorrowFormStatusReq{} }
func (m *UpdateBorrowFormStatusReq) String() string { return proto.CompactTextString(m) }
func (*UpdateBorrowFormStatusReq) ProtoMessage()    {}
func (*UpdateBorrowFormStatusReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bc93e03df457931, []int{32}
}
func (m *UpdateBorrowFormStatusReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateBorrowFormStatusReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateBorrowFormStatusReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateBorrowFormStatusReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateBorrowFormStatusReq.Merge(m, src)
}
func (m *UpdateBorrowFormStatusReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateBorrowFormStatusReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateBorrowFormStatusReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateBorrowFormStatusReq proto.InternalMessageInfo

func (m *UpdateBorrowFormStatusReq) GetBorrowFormID() uint64 {
	if m != nil {
		return m.BorrowFormID
	}
	return 0
}

func (m *UpdateBorrowFormStatusReq) GetStatus() uint64 {
	if m != nil {
		return m.Status
	}
	return 0
}

type UpdateBorrowFormStatusResp struct {
	Code    int32  `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (m *UpdateBorrowFormStatusResp) Reset()         { *m = UpdateBorrowFormStatusResp{} }
func (m *UpdateBorrowFormStatusResp) String() string { return proto.CompactTextString(m) }
func (*UpdateBorrowFormStatusResp) ProtoMessage()    {}
func (*UpdateBorrowFormStatusResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bc93e03df457931, []int{33}
}
func (m *UpdateBorrowFormStatusResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateBorrowFormStatusResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateBorrowFormStatusResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateBorrowFormStatusResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateBorrowFormStatusResp.Merge(m, src)
}
func (m *UpdateBorrowFormStatusResp) XXX_Size() int {
	return m.Size()
}
func (m *UpdateBorrowFormStatusResp) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateBorrowFormStatusResp.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateBorrowFormStatusResp proto.InternalMessageInfo

func (m *UpdateBorrowFormStatusResp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *UpdateBorrowFormStatusResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type DeleteBorrowFormReq struct {
	BorrowFormID uint64 `protobuf:"varint,1,opt,name=BorrowFormID,proto3" json:"BorrowFormID,omitempty"`
}

func (m *DeleteBorrowFormReq) Reset()         { *m = DeleteBorrowFormReq{} }
func (m *DeleteBorrowFormReq) String() string { return proto.CompactTextString(m) }
func (*DeleteBorrowFormReq) ProtoMessage()    {}
func (*DeleteBorrowFormReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bc93e03df457931, []int{34}
}
func (m *DeleteBorrowFormReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteBorrowFormReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteBorrowFormReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteBorrowFormReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteBorrowFormReq.Merge(m, src)
}
func (m *DeleteBorrowFormReq) XXX_Size() int {
	return m.Size()
}
func (m *DeleteBorrowFormReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteBorrowFormReq.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteBorrowFormReq proto.InternalMessageInfo

func (m *DeleteBorrowFormReq) GetBorrowFormID() uint64 {
	if m != nil {
		return m.BorrowFormID
	}
	return 0
}

type DeleteBorrowFormResp struct {
	Code    int32  `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (m *DeleteBorrowFormResp) Reset()         { *m = DeleteBorrowFormResp{} }
func (m *DeleteBorrowFormResp) String() string { return proto.CompactTextString(m) }
func (*DeleteBorrowFormResp) ProtoMessage()    {}
func (*DeleteBorrowFormResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bc93e03df457931, []int{35}
}
func (m *DeleteBorrowFormResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteBorrowFormResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteBorrowFormResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteBorrowFormResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteBorrowFormResp.Merge(m, src)
}
func (m *DeleteBorrowFormResp) XXX_Size() int {
	return m.Size()
}
func (m *DeleteBorrowFormResp) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteBorrowFormResp.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteBorrowFormResp proto.InternalMessageInfo

func (m *DeleteBorrowFormResp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *DeleteBorrowFormResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// ----------------- Payment ------------------
type SelectAllPaymentReq struct {
}

func (m *SelectAllPaymentReq) Reset()         { *m = SelectAllPaymentReq{} }
func (m *SelectAllPaymentReq) String() string { return proto.CompactTextString(m) }
func (*SelectAllPaymentReq) ProtoMessage()    {}
func (*SelectAllPaymentReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bc93e03df457931, []int{36}
}
func (m *SelectAllPaymentReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SelectAllPaymentReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SelectAllPaymentReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SelectAllPaymentReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SelectAllPaymentReq.Merge(m, src)
}
func (m *SelectAllPaymentReq) XXX_Size() int {
	return m.Size()
}
func (m *SelectAllPaymentReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SelectAllPaymentReq.DiscardUnknown(m)
}

var xxx_messageInfo_SelectAllPaymentReq proto.InternalMessageInfo

type SelectAllPaymentResp struct {
	Code     int32      `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Message  string     `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	Payments []*Payment `protobuf:"bytes,3,rep,name=Payments,proto3" json:"Payments,omitempty"`
}

func (m *SelectAllPaymentResp) Reset()         { *m = SelectAllPaymentResp{} }
func (m *SelectAllPaymentResp) String() string { return proto.CompactTextString(m) }
func (*SelectAllPaymentResp) ProtoMessage()    {}
func (*SelectAllPaymentResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bc93e03df457931, []int{37}
}
func (m *SelectAllPaymentResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SelectAllPaymentResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SelectAllPaymentResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SelectAllPaymentResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SelectAllPaymentResp.Merge(m, src)
}
func (m *SelectAllPaymentResp) XXX_Size() int {
	return m.Size()
}
func (m *SelectAllPaymentResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SelectAllPaymentResp.DiscardUnknown(m)
}

var xxx_messageInfo_SelectAllPaymentResp proto.InternalMessageInfo

func (m *SelectAllPaymentResp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SelectAllPaymentResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *SelectAllPaymentResp) GetPayments() []*Payment {
	if m != nil {
		return m.Payments
	}
	return nil
}

type SelectPaymentByIDReq struct {
	PaymentID uint64 `protobuf:"varint,1,opt,name=PaymentID,proto3" json:"PaymentID,omitempty"`
}

func (m *SelectPaymentByIDReq) Reset()         { *m = SelectPaymentByIDReq{} }
func (m *SelectPaymentByIDReq) String() string { return proto.CompactTextString(m) }
func (*SelectPaymentByIDReq) ProtoMessage()    {}
func (*SelectPaymentByIDReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bc93e03df457931, []int{38}
}
func (m *SelectPaymentByIDReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SelectPaymentByIDReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SelectPaymentByIDReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SelectPaymentByIDReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SelectPaymentByIDReq.Merge(m, src)
}
func (m *SelectPaymentByIDReq) XXX_Size() int {
	return m.Size()
}
func (m *SelectPaymentByIDReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SelectPaymentByIDReq.DiscardUnknown(m)
}

var xxx_messageInfo_SelectPaymentByIDReq proto.InternalMessageInfo

func (m *SelectPaymentByIDReq) GetPaymentID() uint64 {
	if m != nil {
		return m.PaymentID
	}
	return 0
}

type SelectPaymentByIDResp struct {
	Code    int32    `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Message string   `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	Payment *Payment `protobuf:"bytes,3,opt,name=Payment,proto3" json:"Payment,omitempty"`
}

func (m *SelectPaymentByIDResp) Reset()         { *m = SelectPaymentByIDResp{} }
func (m *SelectPaymentByIDResp) String() string { return proto.CompactTextString(m) }
func (*SelectPaymentByIDResp) ProtoMessage()    {}
func (*SelectPaymentByIDResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bc93e03df457931, []int{39}
}
func (m *SelectPaymentByIDResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SelectPaymentByIDResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SelectPaymentByIDResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SelectPaymentByIDResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SelectPaymentByIDResp.Merge(m, src)
}
func (m *SelectPaymentByIDResp) XXX_Size() int {
	return m.Size()
}
func (m *SelectPaymentByIDResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SelectPaymentByIDResp.DiscardUnknown(m)
}

var xxx_messageInfo_SelectPaymentByIDResp proto.InternalMessageInfo

func (m *SelectPaymentByIDResp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SelectPaymentByIDResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *SelectPaymentByIDResp) GetPayment() *Payment {
	if m != nil {
		return m.Payment
	}
	return nil
}

type SelectPaymentByBorrowFormIDReq struct {
	BorrowFormID uint64 `protobuf:"varint,1,opt,name=BorrowFormID,proto3" json:"BorrowFormID,omitempty"`
}

func (m *SelectPaymentByBorrowFormIDReq) Reset()         { *m = SelectPaymentByBorrowFormIDReq{} }
func (m *SelectPaymentByBorrowFormIDReq) String() string { return proto.CompactTextString(m) }
func (*SelectPaymentByBorrowFormIDReq) ProtoMessage()    {}
func (*SelectPaymentByBorrowFormIDReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bc93e03df457931, []int{40}
}
func (m *SelectPaymentByBorrowFormIDReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SelectPaymentByBorrowFormIDReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SelectPaymentByBorrowFormIDReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SelectPaymentByBorrowFormIDReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SelectPaymentByBorrowFormIDReq.Merge(m, src)
}
func (m *SelectPaymentByBorrowFormIDReq) XXX_Size() int {
	return m.Size()
}
func (m *SelectPaymentByBorrowFormIDReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SelectPaymentByBorrowFormIDReq.DiscardUnknown(m)
}

var xxx_messageInfo_SelectPaymentByBorrowFormIDReq proto.InternalMessageInfo

func (m *SelectPaymentByBorrowFormIDReq) GetBorrowFormID() uint64 {
	if m != nil {
		return m.BorrowFormID
	}
	return 0
}

type SelectPaymentByBorrowFormIDResp struct {
	Code    int32    `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Message string   `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	Payment *Payment `protobuf:"bytes,3,opt,name=Payment,proto3" json:"Payment,omitempty"`
}

func (m *SelectPaymentByBorrowFormIDResp) Reset()         { *m = SelectPaymentByBorrowFormIDResp{} }
func (m *SelectPaymentByBorrowFormIDResp) String() string { return proto.CompactTextString(m) }
func (*SelectPaymentByBorrowFormIDResp) ProtoMessage()    {}
func (*SelectPaymentByBorrowFormIDResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bc93e03df457931, []int{41}
}
func (m *SelectPaymentByBorrowFormIDResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SelectPaymentByBorrowFormIDResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SelectPaymentByBorrowFormIDResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SelectPaymentByBorrowFormIDResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SelectPaymentByBorrowFormIDResp.Merge(m, src)
}
func (m *SelectPaymentByBorrowFormIDResp) XXX_Size() int {
	return m.Size()
}
func (m *SelectPaymentByBorrowFormIDResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SelectPaymentByBorrowFormIDResp.DiscardUnknown(m)
}

var xxx_messageInfo_SelectPaymentByBorrowFormIDResp proto.InternalMessageInfo

func (m *SelectPaymentByBorrowFormIDResp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SelectPaymentByBorrowFormIDResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *SelectPaymentByBorrowFormIDResp) GetPayment() *Payment {
	if m != nil {
		return m.Payment
	}
	return nil
}

type SelectPaymentWithFineReq struct {
}

func (m *SelectPaymentWithFineReq) Reset()         { *m = SelectPaymentWithFineReq{} }
func (m *SelectPaymentWithFineReq) String() string { return proto.CompactTextString(m) }
func (*SelectPaymentWithFineReq) ProtoMessage()    {}
func (*SelectPaymentWithFineReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bc93e03df457931, []int{42}
}
func (m *SelectPaymentWithFineReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SelectPaymentWithFineReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SelectPaymentWithFineReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SelectPaymentWithFineReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SelectPaymentWithFineReq.Merge(m, src)
}
func (m *SelectPaymentWithFineReq) XXX_Size() int {
	return m.Size()
}
func (m *SelectPaymentWithFineReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SelectPaymentWithFineReq.DiscardUnknown(m)
}

var xxx_messageInfo_SelectPaymentWithFineReq proto.InternalMessageInfo

type SelectPaymentWithFineResp struct {
	Code    int32      `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Message string     `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	Payment []*Payment `protobuf:"bytes,3,rep,name=Payment,proto3" json:"Payment,omitempty"`
}

func (m *SelectPaymentWithFineResp) Reset()         { *m = SelectPaymentWithFineResp{} }
func (m *SelectPaymentWithFineResp) String() string { return proto.CompactTextString(m) }
func (*SelectPaymentWithFineResp) ProtoMessage()    {}
func (*SelectPaymentWithFineResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bc93e03df457931, []int{43}
}
func (m *SelectPaymentWithFineResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SelectPaymentWithFineResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SelectPaymentWithFineResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SelectPaymentWithFineResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SelectPaymentWithFineResp.Merge(m, src)
}
func (m *SelectPaymentWithFineResp) XXX_Size() int {
	return m.Size()
}
func (m *SelectPaymentWithFineResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SelectPaymentWithFineResp.DiscardUnknown(m)
}

var xxx_messageInfo_SelectPaymentWithFineResp proto.InternalMessageInfo

func (m *SelectPaymentWithFineResp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SelectPaymentWithFineResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *SelectPaymentWithFineResp) GetPayment() []*Payment {
	if m != nil {
		return m.Payment
	}
	return nil
}

type SavePaymentReq struct {
	Payment *Payment `protobuf:"bytes,1,opt,name=Payment,proto3" json:"Payment,omitempty"`
}

func (m *SavePaymentReq) Reset()         { *m = SavePaymentReq{} }
func (m *SavePaymentReq) String() string { return proto.CompactTextString(m) }
func (*SavePaymentReq) ProtoMessage()    {}
func (*SavePaymentReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bc93e03df457931, []int{44}
}
func (m *SavePaymentReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SavePaymentReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SavePaymentReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SavePaymentReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SavePaymentReq.Merge(m, src)
}
func (m *SavePaymentReq) XXX_Size() int {
	return m.Size()
}
func (m *SavePaymentReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SavePaymentReq.DiscardUnknown(m)
}

var xxx_messageInfo_SavePaymentReq proto.InternalMessageInfo

func (m *SavePaymentReq) GetPayment() *Payment {
	if m != nil {
		return m.Payment
	}
	return nil
}

type SavePaymentResp struct {
	Code    int32  `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (m *SavePaymentResp) Reset()         { *m = SavePaymentResp{} }
func (m *SavePaymentResp) String() string { return proto.CompactTextString(m) }
func (*SavePaymentResp) ProtoMessage()    {}
func (*SavePaymentResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bc93e03df457931, []int{45}
}
func (m *SavePaymentResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SavePaymentResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SavePaymentResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SavePaymentResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SavePaymentResp.Merge(m, src)
}
func (m *SavePaymentResp) XXX_Size() int {
	return m.Size()
}
func (m *SavePaymentResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SavePaymentResp.DiscardUnknown(m)
}

var xxx_messageInfo_SavePaymentResp proto.InternalMessageInfo

func (m *SavePaymentResp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SavePaymentResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type SelectAllSaleBillReq struct {
}

func (m *SelectAllSaleBillReq) Reset()         { *m = SelectAllSaleBillReq{} }
func (m *SelectAllSaleBillReq) String() string { return proto.CompactTextString(m) }
func (*SelectAllSaleBillReq) ProtoMessage()    {}
func (*SelectAllSaleBillReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bc93e03df457931, []int{46}
}
func (m *SelectAllSaleBillReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SelectAllSaleBillReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SelectAllSaleBillReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SelectAllSaleBillReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SelectAllSaleBillReq.Merge(m, src)
}
func (m *SelectAllSaleBillReq) XXX_Size() int {
	return m.Size()
}
func (m *SelectAllSaleBillReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SelectAllSaleBillReq.DiscardUnknown(m)
}

var xxx_messageInfo_SelectAllSaleBillReq proto.InternalMessageInfo

type SelectAllSaleBillResp struct {
	Code      int32       `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Message   string      `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	SaleBills []*SaleBill `protobuf:"bytes,3,rep,name=SaleBills,proto3" json:"SaleBills,omitempty"`
}

func (m *SelectAllSaleBillResp) Reset()         { *m = SelectAllSaleBillResp{} }
func (m *SelectAllSaleBillResp) String() string { return proto.CompactTextString(m) }
func (*SelectAllSaleBillResp) ProtoMessage()    {}
func (*SelectAllSaleBillResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bc93e03df457931, []int{47}
}
func (m *SelectAllSaleBillResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SelectAllSaleBillResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SelectAllSaleBillResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SelectAllSaleBillResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SelectAllSaleBillResp.Merge(m, src)
}
func (m *SelectAllSaleBillResp) XXX_Size() int {
	return m.Size()
}
func (m *SelectAllSaleBillResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SelectAllSaleBillResp.DiscardUnknown(m)
}

var xxx_messageInfo_SelectAllSaleBillResp proto.InternalMessageInfo

func (m *SelectAllSaleBillResp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SelectAllSaleBillResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *SelectAllSaleBillResp) GetSaleBills() []*SaleBill {
	if m != nil {
		return m.SaleBills
	}
	return nil
}

type SelectSaleBillByIDReq struct {
	SaleBillID uint64 `protobuf:"varint,1,opt,name=SaleBillID,proto3" json:"SaleBillID,omitempty"`
}

func (m *SelectSaleBillByIDReq) Reset()         { *m = SelectSaleBillByIDReq{} }
func (m *SelectSaleBillByIDReq) String() string { return proto.CompactTextString(m) }
func (*SelectSaleBillByIDReq) ProtoMessage()    {}
func (*SelectSaleBillByIDReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bc93e03df457931, []int{48}
}
func (m *SelectSaleBillByIDReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SelectSaleBillByIDReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SelectSaleBillByIDReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SelectSaleBillByIDReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SelectSaleBillByIDReq.Merge(m, src)
}
func (m *SelectSaleBillByIDReq) XXX_Size() int {
	return m.Size()
}
func (m *SelectSaleBillByIDReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SelectSaleBillByIDReq.DiscardUnknown(m)
}

var xxx_messageInfo_SelectSaleBillByIDReq proto.InternalMessageInfo

func (m *SelectSaleBillByIDReq) GetSaleBillID() uint64 {
	if m != nil {
		return m.SaleBillID
	}
	return 0
}

type SelectSaleBillByIDResp struct {
	Code     int32     `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Message  string    `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	SaleBill *SaleBill `protobuf:"bytes,3,opt,name=SaleBill,proto3" json:"SaleBill,omitempty"`
}

func (m *SelectSaleBillByIDResp) Reset()         { *m = SelectSaleBillByIDResp{} }
func (m *SelectSaleBillByIDResp) String() string { return proto.CompactTextString(m) }
func (*SelectSaleBillByIDResp) ProtoMessage()    {}
func (*SelectSaleBillByIDResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bc93e03df457931, []int{49}
}
func (m *SelectSaleBillByIDResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SelectSaleBillByIDResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SelectSaleBillByIDResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SelectSaleBillByIDResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SelectSaleBillByIDResp.Merge(m, src)
}
func (m *SelectSaleBillByIDResp) XXX_Size() int {
	return m.Size()
}
func (m *SelectSaleBillByIDResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SelectSaleBillByIDResp.DiscardUnknown(m)
}

var xxx_messageInfo_SelectSaleBillByIDResp proto.InternalMessageInfo

func (m *SelectSaleBillByIDResp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SelectSaleBillByIDResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *SelectSaleBillByIDResp) GetSaleBill() *SaleBill {
	if m != nil {
		return m.SaleBill
	}
	return nil
}

type SaveSaleBillReq struct {
	SaleBill *SaleBill `protobuf:"bytes,1,opt,name=SaleBill,proto3" json:"SaleBill,omitempty"`
}

func (m *SaveSaleBillReq) Reset()         { *m = SaveSaleBillReq{} }
func (m *SaveSaleBillReq) String() string { return proto.CompactTextString(m) }
func (*SaveSaleBillReq) ProtoMessage()    {}
func (*SaveSaleBillReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bc93e03df457931, []int{50}
}
func (m *SaveSaleBillReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SaveSaleBillReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SaveSaleBillReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SaveSaleBillReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveSaleBillReq.Merge(m, src)
}
func (m *SaveSaleBillReq) XXX_Size() int {
	return m.Size()
}
func (m *SaveSaleBillReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveSaleBillReq.DiscardUnknown(m)
}

var xxx_messageInfo_SaveSaleBillReq proto.InternalMessageInfo

func (m *SaveSaleBillReq) GetSaleBill() *SaleBill {
	if m != nil {
		return m.SaleBill
	}
	return nil
}

type SaveSaleBillResp struct {
	Code    int32  `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (m *SaveSaleBillResp) Reset()         { *m = SaveSaleBillResp{} }
func (m *SaveSaleBillResp) String() string { return proto.CompactTextString(m) }
func (*SaveSaleBillResp) ProtoMessage()    {}
func (*SaveSaleBillResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bc93e03df457931, []int{51}
}
func (m *SaveSaleBillResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SaveSaleBillResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SaveSaleBillResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SaveSaleBillResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveSaleBillResp.Merge(m, src)
}
func (m *SaveSaleBillResp) XXX_Size() int {
	return m.Size()
}
func (m *SaveSaleBillResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveSaleBillResp.DiscardUnknown(m)
}

var xxx_messageInfo_SaveSaleBillResp proto.InternalMessageInfo

func (m *SaveSaleBillResp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SaveSaleBillResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type DeleteSaleBillReq struct {
	SaleBillID uint64 `protobuf:"varint,1,opt,name=SaleBillID,proto3" json:"SaleBillID,omitempty"`
}

func (m *DeleteSaleBillReq) Reset()         { *m = DeleteSaleBillReq{} }
func (m *DeleteSaleBillReq) String() string { return proto.CompactTextString(m) }
func (*DeleteSaleBillReq) ProtoMessage()    {}
func (*DeleteSaleBillReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bc93e03df457931, []int{52}
}
func (m *DeleteSaleBillReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteSaleBillReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteSaleBillReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteSaleBillReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteSaleBillReq.Merge(m, src)
}
func (m *DeleteSaleBillReq) XXX_Size() int {
	return m.Size()
}
func (m *DeleteSaleBillReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteSaleBillReq.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteSaleBillReq proto.InternalMessageInfo

func (m *DeleteSaleBillReq) GetSaleBillID() uint64 {
	if m != nil {
		return m.SaleBillID
	}
	return 0
}

type DeleteSaleBillResp struct {
	Code    int32  `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (m *DeleteSaleBillResp) Reset()         { *m = DeleteSaleBillResp{} }
func (m *DeleteSaleBillResp) String() string { return proto.CompactTextString(m) }
func (*DeleteSaleBillResp) ProtoMessage()    {}
func (*DeleteSaleBillResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bc93e03df457931, []int{53}
}
func (m *DeleteSaleBillResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteSaleBillResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteSaleBillResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteSaleBillResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteSaleBillResp.Merge(m, src)
}
func (m *DeleteSaleBillResp) XXX_Size() int {
	return m.Size()
}
func (m *DeleteSaleBillResp) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteSaleBillResp.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteSaleBillResp proto.InternalMessageInfo

func (m *DeleteSaleBillResp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *DeleteSaleBillResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*Doc)(nil), "model.Doc")
	proto.RegisterType((*DocVersion)(nil), "model.DocVersion")
	proto.RegisterType((*Barcode)(nil), "model.Barcode")
	proto.RegisterType((*Payment)(nil), "model.Payment")
	proto.RegisterType((*BorrowForm)(nil), "model.BorrowForm")
	proto.RegisterType((*SaleBill)(nil), "model.SaleBill")
	proto.RegisterType((*SelectAllBarcodeReq)(nil), "model.SelectAllBarcodeReq")
	proto.RegisterType((*SelectAllBarcodeResp)(nil), "model.SelectAllBarcodeResp")
	proto.RegisterType((*SelectAllAvailableBarcodeReq)(nil), "model.SelectAllAvailableBarcodeReq")
	proto.RegisterType((*SelectAllAvailableBarcodeResp)(nil), "model.SelectAllAvailableBarcodeResp")
	proto.RegisterType((*SelectAllSellingBarcodeReq)(nil), "model.SelectAllSellingBarcodeReq")
	proto.RegisterType((*SelectAllSellingBarcodeResp)(nil), "model.SelectAllSellingBarcodeResp")
	proto.RegisterType((*SelectAllDamageBarcodeReq)(nil), "model.SelectAllDamageBarcodeReq")
	proto.RegisterType((*SelectAllDamageBarcodeResp)(nil), "model.SelectAllDamageBarcodeResp")
	proto.RegisterType((*SelectAllBarcodeByDocVerIDReq)(nil), "model.SelectAllBarcodeByDocVerIDReq")
	proto.RegisterType((*SelectAllBarcodeByDocVerIDResp)(nil), "model.SelectAllBarcodeByDocVerIDResp")
	proto.RegisterType((*SelectBarcodeByIDReq)(nil), "model.SelectBarcodeByIDReq")
	proto.RegisterType((*SelectBarcodeByIDResp)(nil), "model.SelectBarcodeByIDResp")
	proto.RegisterType((*SaveBarcodeReq)(nil), "model.SaveBarcodeReq")
	proto.RegisterType((*SaveBarcodeResp)(nil), "model.SaveBarcodeResp")
	proto.RegisterType((*UpdateBarcodeReq)(nil), "model.UpdateBarcodeReq")
	proto.RegisterType((*UpdateBarcodeResp)(nil), "model.UpdateBarcodeResp")
	proto.RegisterType((*DeleteBarcodeReq)(nil), "model.DeleteBarcodeReq")
	proto.RegisterType((*DeleteBarcodeResp)(nil), "model.DeleteBarcodeResp")
	proto.RegisterType((*SelectAllBorrowFormReq)(nil), "model.SelectAllBorrowFormReq")
	proto.RegisterType((*SelectAllBorrowFormResp)(nil), "model.SelectAllBorrowFormResp")
	proto.RegisterType((*SelectAllUnReturnBorrowFormReq)(nil), "model.SelectAllUnReturnBorrowFormReq")
	proto.RegisterType((*SelectAllUnReturnBorrowFormResp)(nil), "model.SelectAllUnReturnBorrowFormResp")
	proto.RegisterType((*SelectBorrowFormByIDReq)(nil), "model.SelectBorrowFormByIDReq")
	proto.RegisterType((*SelectBorrowFormByIDResp)(nil), "model.SelectBorrowFormByIDResp")
	proto.RegisterType((*SaveBorrowFormReq)(nil), "model.SaveBorrowFormReq")
	proto.RegisterType((*SaveBorrowFormResp)(nil), "model.SaveBorrowFormResp")
	proto.RegisterType((*UpdateBorrowFormStatusReq)(nil), "model.UpdateBorrowFormStatusReq")
	proto.RegisterType((*UpdateBorrowFormStatusResp)(nil), "model.UpdateBorrowFormStatusResp")
	proto.RegisterType((*DeleteBorrowFormReq)(nil), "model.DeleteBorrowFormReq")
	proto.RegisterType((*DeleteBorrowFormResp)(nil), "model.DeleteBorrowFormResp")
	proto.RegisterType((*SelectAllPaymentReq)(nil), "model.SelectAllPaymentReq")
	proto.RegisterType((*SelectAllPaymentResp)(nil), "model.SelectAllPaymentResp")
	proto.RegisterType((*SelectPaymentByIDReq)(nil), "model.SelectPaymentByIDReq")
	proto.RegisterType((*SelectPaymentByIDResp)(nil), "model.SelectPaymentByIDResp")
	proto.RegisterType((*SelectPaymentByBorrowFormIDReq)(nil), "model.SelectPaymentByBorrowFormIDReq")
	proto.RegisterType((*SelectPaymentByBorrowFormIDResp)(nil), "model.SelectPaymentByBorrowFormIDResp")
	proto.RegisterType((*SelectPaymentWithFineReq)(nil), "model.SelectPaymentWithFineReq")
	proto.RegisterType((*SelectPaymentWithFineResp)(nil), "model.SelectPaymentWithFineResp")
	proto.RegisterType((*SavePaymentReq)(nil), "model.SavePaymentReq")
	proto.RegisterType((*SavePaymentResp)(nil), "model.SavePaymentResp")
	proto.RegisterType((*SelectAllSaleBillReq)(nil), "model.SelectAllSaleBillReq")
	proto.RegisterType((*SelectAllSaleBillResp)(nil), "model.SelectAllSaleBillResp")
	proto.RegisterType((*SelectSaleBillByIDReq)(nil), "model.SelectSaleBillByIDReq")
	proto.RegisterType((*SelectSaleBillByIDResp)(nil), "model.SelectSaleBillByIDResp")
	proto.RegisterType((*SaveSaleBillReq)(nil), "model.SaveSaleBillReq")
	proto.RegisterType((*SaveSaleBillResp)(nil), "model.SaveSaleBillResp")
	proto.RegisterType((*DeleteSaleBillReq)(nil), "model.DeleteSaleBillReq")
	proto.RegisterType((*DeleteSaleBillResp)(nil), "model.DeleteSaleBillResp")
}

func init() {
	proto.RegisterFile("github.com/pinezapple/LibraryProject20201/skeleton/model/docmanager.proto", fileDescriptor_3bc93e03df457931)
}

var fileDescriptor_3bc93e03df457931 = []byte{
	// 2067 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x5a, 0xcf, 0x73, 0xdb, 0xc6,
	0xf5, 0x37, 0x24, 0x52, 0x14, 0x1f, 0x6d, 0x59, 0x5a, 0xd9, 0x32, 0x0d, 0xdb, 0x84, 0xbc, 0x49,
	0xbe, 0x63, 0x4f, 0x26, 0x92, 0x25, 0x7d, 0x33, 0x19, 0xe7, 0x47, 0x5d, 0xd1, 0xb0, 0x5b, 0xb6,
	0x51, 0xe2, 0x42, 0x49, 0x3d, 0x93, 0x99, 0x0e, 0x0b, 0x02, 0x6b, 0x19, 0x2d, 0x48, 0x20, 0x00,
	0xa4, 0x8e, 0x3c, 0x6d, 0x33, 0xed, 0x31, 0xa7, 0xde, 0x7b, 0xee, 0x4c, 0xff, 0x84, 0x1e, 0x7b,
	0x6b, 0x7a, 0x6a, 0x8e, 0x3d, 0x61, 0x62, 0xf9, 0xc6, 0x53, 0x47, 0xbd, 0xf4, 0xd8, 0xc1, 0x62,
	0x17, 0x58, 0xfc, 0x20, 0x45, 0x4a, 0xaa, 0x6f, 0xda, 0xb7, 0xef, 0xbd, 0x7d, 0x78, 0xef, 0xf3,
	0x76, 0x3f, 0x4f, 0x12, 0x74, 0xf6, 0xac, 0xe0, 0xf9, 0x7e, 0x6f, 0xcd, 0x70, 0xfa, 0xeb, 0xae,
	0x35, 0x20, 0x2f, 0x74, 0xd7, 0xb5, 0xc9, 0xfa, 0xc7, 0x56, 0xcf, 0xd3, 0xbd, 0xc3, 0x27, 0x9e,
	0xf3, 0x0b, 0x62, 0x04, 0x9b, 0xf7, 0x36, 0xef, 0x6d, 0xac, 0xfb, 0xbf, 0x24, 0x36, 0x09, 0x9c,
	0xc1, 0x7a, 0xdf, 0x31, 0x89, 0xbd, 0x6e, 0x3a, 0x46, 0x5f, 0x1f, 0xe8, 0x7b, 0xc4, 0x5b, 0x73,
	0x3d, 0x27, 0x70, 0x50, 0x95, 0xca, 0xe5, 0x77, 0x04, 0x8f, 0x7b, 0xce, 0x9e, 0xb3, 0x4e, 0x77,
	0x7b, 0xfb, 0xcf, 0xe8, 0x8a, 0x2e, 0xe8, 0x4f, 0xb1, 0x95, 0xfc, 0xf0, 0xd4, 0x01, 0x04, 0x56,
	0x9f, 0xc4, 0x4e, 0xf0, 0xdf, 0x66, 0x60, 0x56, 0x75, 0x0c, 0x74, 0x17, 0x66, 0x3a, 0x6a, 0x53,
	0x5a, 0x95, 0xee, 0x54, 0xda, 0xd7, 0x87, 0xa1, 0x32, 0x67, 0x99, 0x5d, 0xd3, 0x31, 0x8e, 0x43,
	0xa5, 0x61, 0xf6, 0xde, 0xc7, 0xf1, 0x0a, 0x6b, 0x33, 0x1d, 0x15, 0x6d, 0x40, 0xe5, 0x13, 0xbd,
	0x4f, 0x9a, 0x33, 0xab, 0xd2, 0x9d, 0x7a, 0xfb, 0xd6, 0x30, 0x54, 0xe6, 0x4d, 0xc7, 0xe8, 0x0e,
	0xf4, 0x3e, 0x39, 0x0e, 0x95, 0x4b, 0x91, 0x3a, 0x5f, 0x63, 0x8d, 0xaa, 0x22, 0x15, 0x1a, 0x0f,
	0xf5, 0x80, 0xec, 0x39, 0xde, 0x61, 0xd7, 0x32, 0x9b, 0xb3, 0xf4, 0x98, 0x37, 0x86, 0xa1, 0xd2,
	0x30, 0x52, 0xf1, 0x71, 0xa8, 0x2c, 0x46, 0xc6, 0x82, 0x08, 0x6b, 0xc0, 0xed, 0x3a, 0x26, 0xda,
	0x01, 0x78, 0xe8, 0x11, 0x3d, 0x20, 0x66, 0x57, 0x0f, 0x9a, 0x95, 0x55, 0xe9, 0x4e, 0x63, 0xb3,
	0xb1, 0x46, 0x3f, 0x69, 0xed, 0x33, 0xab, 0x4f, 0xda, 0xb7, 0x87, 0xa1, 0x02, 0x46, 0xa2, 0x72,
	0x1c, 0x2a, 0x97, 0xa9, 0xc3, 0x44, 0x82, 0xb5, 0x3a, 0xf3, 0xb0, 0x1d, 0x44, 0xee, 0x3e, 0x77,
	0x4d, 0xee, 0xae, 0x3a, 0xc2, 0xdd, 0x7e, 0xa2, 0xc2, 0xdd, 0xa5, 0x12, 0xac, 0xd5, 0x99, 0x87,
	0xed, 0x00, 0x7f, 0x5d, 0x01, 0x50, 0x1d, 0xe3, 0xa7, 0xc4, 0xf3, 0x2d, 0x67, 0x80, 0xb6, 0x60,
	0x2e, 0x5e, 0xd1, 0xa4, 0xd6, 0xdb, 0x37, 0x86, 0xa1, 0x52, 0x8b, 0xf2, 0x72, 0x40, 0xbc, 0xe3,
	0x50, 0xb9, 0xc8, 0xd3, 0x74, 0x40, 0x3c, 0xac, 0x31, 0x55, 0xb4, 0x0e, 0x55, 0xd5, 0x31, 0x3a,
	0x2a, 0xcd, 0x2d, 0x2b, 0x44, 0xa4, 0x44, 0x93, 0xd3, 0xe0, 0x26, 0x51, 0x5e, 0x62, 0x3d, 0xf4,
	0x2e, 0xd4, 0xd8, 0x81, 0x2c, 0xa9, 0xf4, 0x98, 0x83, 0x58, 0xc4, 0x8f, 0x61, 0x4b, 0xac, 0x71,
	0x5d, 0xf4, 0x0e, 0x54, 0x9f, 0x78, 0x96, 0x41, 0x68, 0x12, 0x2b, 0xed, 0x6b, 0xc3, 0x50, 0xa9,
	0xba, 0x91, 0xe0, 0x38, 0x54, 0x20, 0x32, 0xa1, 0x0b, 0xac, 0xc5, 0x5a, 0x68, 0x17, 0x16, 0x54,
	0xc7, 0x50, 0x89, 0x6f, 0x78, 0x96, 0x1b, 0x44, 0x87, 0x55, 0xe9, 0x37, 0xbd, 0x3d, 0x8c, 0x52,
	0xe2, 0x18, 0x5d, 0x33, 0xdd, 0x3a, 0x0e, 0x95, 0x2b, 0x3c, 0x50, 0x41, 0x8c, 0xb5, 0x9c, 0x0b,
	0xf4, 0x11, 0xd4, 0x9f, 0xec, 0xf7, 0x6c, 0xcb, 0x7f, 0x4e, 0xbc, 0xe6, 0x1c, 0xf5, 0xa7, 0x0c,
	0x43, 0xa5, 0xee, 0x72, 0xe1, 0x71, 0xa8, 0x2c, 0xd0, 0x58, 0xb8, 0x00, 0x6b, 0xa9, 0x45, 0x0e,
	0x0c, 0xb5, 0xf3, 0x05, 0xc3, 0xfc, 0x59, 0xc1, 0xf0, 0xa7, 0x59, 0xa8, 0xb5, 0x75, 0xcf, 0x70,
	0x4c, 0x82, 0x36, 0x84, 0xd6, 0xa2, 0x5e, 0x7a, 0xf1, 0x46, 0x5c, 0x55, 0xea, 0x25, 0x95, 0xf0,
	0x16, 0x9b, 0xdb, 0x0d, 0xf4, 0x60, 0xdf, 0x17, 0x81, 0xe0, 0x53, 0x09, 0x07, 0x42, 0xbc, 0xc2,
	0x1a, 0x53, 0x44, 0x8f, 0x00, 0x76, 0x75, 0x9b, 0xb4, 0x2d, 0xdb, 0xee, 0xa8, 0xac, 0xae, 0x6f,
	0x0d, 0x43, 0xe5, 0xa2, 0xaf, 0xdb, 0xa4, 0xdb, 0xb3, 0x6c, 0x3b, 0x3e, 0x6f, 0x89, 0x1a, 0x0b,
	0x32, 0xac, 0x09, 0x86, 0xe8, 0x53, 0x98, 0x8f, 0xb1, 0xd8, 0x51, 0x69, 0x91, 0x2b, 0xed, 0xad,
	0x61, 0xa8, 0x2c, 0x9b, 0x8e, 0xb1, 0xdf, 0x27, 0x83, 0xa0, 0xcb, 0xb0, 0x14, 0xfb, 0x6a, 0xb2,
	0x42, 0xe7, 0xb7, 0xb0, 0x96, 0x38, 0xc9, 0xd5, 0x69, 0xee, 0x7c, 0xeb, 0x54, 0x3b, 0x6b, 0x9d,
	0xfe, 0x58, 0x85, 0xda, 0x13, 0xfd, 0x30, 0x8a, 0xbf, 0x58, 0x27, 0x37, 0xde, 0x10, 0xea, 0x94,
	0x4a, 0xe2, 0x3a, 0xfd, 0x00, 0x1a, 0xf1, 0x75, 0x6b, 0xe9, 0x83, 0x8e, 0xca, 0x5a, 0x90, 0x66,
	0xdd, 0xe6, 0x62, 0x21, 0xeb, 0xa2, 0x0c, 0x6b, 0xa2, 0x25, 0xda, 0x81, 0x8b, 0x6d, 0xc7, 0xf3,
	0x9c, 0x5f, 0x3d, 0x76, 0xbc, 0x7e, 0x52, 0xbf, 0xbb, 0xc3, 0x50, 0x59, 0xe8, 0x51, 0x79, 0xf7,
	0x99, 0xe3, 0xf5, 0x63, 0x5f, 0xcb, 0x14, 0x31, 0x19, 0x29, 0xd6, 0x32, 0xe6, 0xe8, 0x2e, 0x54,
	0x1e, 0x5b, 0x03, 0xc2, 0x2a, 0x78, 0x75, 0x18, 0x2a, 0x95, 0x67, 0xd6, 0x20, 0xea, 0xee, 0x7a,
	0x64, 0x1c, 0xfd, 0x8c, 0x35, 0xaa, 0x82, 0x3e, 0x80, 0x79, 0x8d, 0xe8, 0x26, 0x2d, 0xf8, 0x1c,
	0x55, 0xa7, 0x5d, 0xe8, 0x51, 0x59, 0x7c, 0x20, 0xed, 0xc2, 0x44, 0x80, 0xb5, 0xc4, 0x00, 0x3d,
	0x80, 0x3a, 0x43, 0x79, 0x47, 0x6d, 0xd6, 0x56, 0x67, 0x27, 0x43, 0x78, 0x6a, 0x83, 0x3e, 0x85,
	0x4b, 0x6c, 0xc1, 0xf0, 0x3e, 0x4f, 0x9d, 0xc4, 0x1f, 0xce, 0x4c, 0x12, 0xdc, 0x2f, 0x8b, 0x8e,
	0x38, 0xfe, 0xb3, 0xf6, 0xd1, 0xcd, 0xb6, 0xe3, 0x0c, 0xc8, 0x61, 0xb3, 0x4e, 0x1d, 0xd1, 0x9b,
	0xad, 0x1f, 0x09, 0xf8, 0xcd, 0x46, 0x17, 0x58, 0x8b, 0xb5, 0x72, 0xe8, 0x84, 0xf3, 0x45, 0x67,
	0xe3, 0xac, 0xe8, 0xfc, 0x77, 0x05, 0x20, 0xad, 0x2b, 0xba, 0x2f, 0x00, 0x74, 0x0a, 0x68, 0x94,
	0x00, 0x75, 0xe6, 0xd4, 0x40, 0x4d, 0x6f, 0xa6, 0xd9, 0x49, 0x6f, 0x26, 0x11, 0x61, 0x95, 0x33,
	0x21, 0xac, 0x7a, 0x0a, 0x84, 0x7d, 0x0c, 0xf5, 0xdd, 0x40, 0xf7, 0x82, 0x28, 0xfd, 0x23, 0xaf,
	0x1f, 0x3f, 0xd2, 0xe8, 0x46, 0xb4, 0x88, 0x7b, 0x4b, 0x25, 0x58, 0x4b, 0x1d, 0x20, 0x15, 0x6a,
	0x8f, 0x06, 0x26, 0xf5, 0x55, 0x72, 0xf7, 0x50, 0x2e, 0x44, 0x06, 0x26, 0xf7, 0x44, 0xb9, 0x10,
	0x5f, 0x63, 0x8d, 0x9b, 0xe6, 0x50, 0x37, 0x7f, 0xbe, 0xa8, 0xab, 0x9f, 0x15, 0x75, 0x7f, 0x9f,
	0x81, 0x79, 0xfe, 0x22, 0xa0, 0x77, 0x05, 0xcc, 0x4d, 0xf8, 0x9c, 0x9c, 0x2b, 0xde, 0x32, 0xf5,
	0x9f, 0x3d, 0x45, 0xfd, 0x05, 0xaa, 0x33, 0x3b, 0x01, 0xd5, 0xc9, 0x96, 0xa6, 0x7a, 0xc6, 0xd2,
	0xe0, 0xab, 0xb0, 0xbc, 0x4b, 0x6c, 0x62, 0x04, 0xdb, 0xb6, 0xcd, 0x62, 0xd2, 0xc8, 0x97, 0xf8,
	0x00, 0xae, 0x14, 0xc5, 0xbe, 0x8b, 0x10, 0x54, 0x1e, 0x3a, 0x26, 0xa1, 0xf9, 0xae, 0x6a, 0xf4,
	0x67, 0xd4, 0x84, 0xda, 0x0e, 0xf1, 0x7d, 0x7d, 0x8f, 0x31, 0x6e, 0x8d, 0x2f, 0xd1, 0x3d, 0x98,
	0x67, 0xc6, 0x3e, 0x4d, 0x4d, 0x63, 0x73, 0x81, 0x45, 0xca, 0xc4, 0xed, 0xca, 0x37, 0xa1, 0x22,
	0x69, 0x89, 0x16, 0x6e, 0xc1, 0xcd, 0xe4, 0xdc, 0xed, 0x03, 0xdd, 0xb2, 0xf5, 0x9e, 0x4d, 0x84,
	0xb8, 0xbe, 0x82, 0x5b, 0x63, 0xf6, 0x5f, 0x43, 0x80, 0x37, 0x41, 0x4e, 0x02, 0xd8, 0x25, 0xb6,
	0x6d, 0x0d, 0xf6, 0x84, 0xf0, 0x7e, 0x03, 0x37, 0x46, 0xee, 0xbe, 0x86, 0xe0, 0x6e, 0xc0, 0xf5,
	0xe4, 0x78, 0x55, 0xef, 0xeb, 0x7b, 0x62, 0xea, 0x7e, 0x2d, 0x44, 0x9e, 0xdb, 0x7c, 0x0d, 0xa1,
	0x7d, 0x20, 0x14, 0x8e, 0xeb, 0x1c, 0x72, 0x0e, 0xa6, 0x91, 0x2f, 0x91, 0x2c, 0xf0, 0x3a, 0xda,
	0xcd, 0x29, 0x45, 0xc3, 0xbf, 0x85, 0xd6, 0x38, 0xe3, 0xa9, 0xc3, 0x5f, 0x4b, 0xb8, 0xef, 0xd8,
	0xe8, 0xb9, 0x12, 0xfe, 0x7f, 0xde, 0x0d, 0xc9, 0xe1, 0x71, 0xcc, 0x37, 0xc5, 0xde, 0x8f, 0x83,
	0x4e, 0x05, 0x78, 0x1f, 0xae, 0x96, 0x58, 0x9d, 0x2d, 0x58, 0xe9, 0xe4, 0x60, 0xdf, 0x87, 0x85,
	0x5d, 0xfd, 0x40, 0xa8, 0x3c, 0xba, 0x93, 0x7a, 0x90, 0xca, 0x3c, 0xa4, 0xb6, 0x0f, 0xe0, 0x72,
	0xc6, 0x76, 0xda, 0x60, 0xf1, 0x87, 0xb0, 0x18, 0xdf, 0xd3, 0xa7, 0x3a, 0x7e, 0x1b, 0x96, 0x72,
	0xd6, 0x53, 0x07, 0x70, 0x0f, 0x16, 0x55, 0x62, 0x93, 0x4c, 0x00, 0xe3, 0xcb, 0xb4, 0x0d, 0x4b,
	0x39, 0x8b, 0xa9, 0x0f, 0x6d, 0xc2, 0x4a, 0x8a, 0xcf, 0x84, 0x0e, 0x45, 0x4d, 0xf7, 0x7b, 0x09,
	0xae, 0x95, 0x6e, 0x4d, 0x0d, 0x83, 0xfb, 0xd0, 0x48, 0xed, 0x79, 0xd7, 0x2d, 0xf1, 0x4c, 0x26,
	0x3b, 0x0c, 0x0d, 0xa2, 0x2e, 0x5e, 0x15, 0xda, 0xe7, 0xf3, 0x81, 0x46, 0x82, 0x7d, 0x6f, 0x90,
	0x0d, 0xf3, 0x6b, 0x09, 0x94, 0xb1, 0x2a, 0xaf, 0x33, 0xdc, 0x8f, 0x78, 0xca, 0x04, 0x35, 0xd6,
	0x70, 0x38, 0x37, 0x85, 0xc4, 0xc5, 0xcc, 0xc8, 0xf0, 0xef, 0x24, 0x68, 0x96, 0xdb, 0x4f, 0xfd,
	0x11, 0xef, 0x71, 0x76, 0x1b, 0x51, 0x55, 0xd6, 0x7d, 0x23, 0xbf, 0x41, 0x50, 0xc5, 0x8f, 0x61,
	0x89, 0xf6, 0x91, 0x98, 0x64, 0xb4, 0x91, 0xf1, 0x26, 0x8d, 0xf0, 0x96, 0xf1, 0xd3, 0x06, 0x94,
	0xf7, 0x33, 0x35, 0x38, 0x9f, 0xc2, 0x75, 0xd6, 0x54, 0x89, 0x97, 0x98, 0xf7, 0x4e, 0x98, 0x50,
	0xb4, 0x92, 0x9d, 0xf5, 0x39, 0x6d, 0xc6, 0x3f, 0x02, 0x79, 0x94, 0xe3, 0xa9, 0x83, 0xbc, 0x0f,
	0xcb, 0xac, 0x09, 0x33, 0x29, 0x9b, 0xa4, 0xde, 0x2a, 0x5c, 0x29, 0x9a, 0x4e, 0x1d, 0x80, 0xc8,
	0x83, 0xd8, 0xbc, 0x9d, 0xe7, 0x41, 0x89, 0xf8, 0x34, 0xcf, 0x25, 0x33, 0xce, 0x3f, 0x97, 0x4c,
	0xcc, 0x9f, 0x4b, 0xae, 0x95, 0xbe, 0x38, 0x5c, 0x21, 0x7d, 0x71, 0x98, 0x24, 0xbd, 0xca, 0x12,
	0x41, 0xfa, 0xe2, 0x64, 0xac, 0x4e, 0xf3, 0xe2, 0x30, 0x07, 0xb9, 0x17, 0x27, 0x1b, 0x2d, 0x57,
	0xc2, 0x2a, 0xbf, 0x5f, 0x92, 0x63, 0xc5, 0x02, 0x4d, 0x5a, 0xc7, 0xaf, 0xf8, 0x15, 0x34, 0xc2,
	0xcb, 0xff, 0xfc, 0x33, 0x64, 0x7e, 0x6f, 0x30, 0xc1, 0x53, 0x2b, 0x78, 0xfe, 0xd8, 0x1a, 0x50,
	0xf2, 0x74, 0xc8, 0x99, 0x55, 0x61, 0xef, 0x6c, 0x61, 0xcd, 0x9e, 0x1c, 0x16, 0x7b, 0xcf, 0x53,
	0x50, 0x46, 0x0f, 0x2a, 0xf7, 0x20, 0x95, 0x7d, 0x58, 0x6a, 0xcb, 0xde, 0xf3, 0x53, 0x23, 0x17,
	0xaf, 0x08, 0xf8, 0xe7, 0x23, 0x57, 0x94, 0x8f, 0x17, 0x1c, 0x69, 0x19, 0xf9, 0xd4, 0xb9, 0xd8,
	0x82, 0x3a, 0xb7, 0xe6, 0x9d, 0x71, 0x99, 0x7d, 0x0b, 0x97, 0xb3, 0x74, 0xa4, 0x7a, 0xf8, 0x3d,
	0x7e, 0x76, 0xa2, 0xc2, 0x9a, 0xa3, 0x95, 0xf9, 0x0d, 0x63, 0x8c, 0x31, 0x41, 0x82, 0x0f, 0xf9,
	0x33, 0x9d, 0x35, 0x9c, 0x3a, 0xea, 0x8d, 0x74, 0xfc, 0x64, 0xc8, 0x1a, 0x11, 0x74, 0xa2, 0x86,
	0xbf, 0x17, 0x17, 0x42, 0x48, 0x21, 0x7a, 0x5b, 0xf0, 0x22, 0x95, 0x7a, 0x11, 0xec, 0xbf, 0x0f,
	0x8b, 0x59, 0xfb, 0xa9, 0x2b, 0xb9, 0xc5, 0x69, 0x8e, 0x18, 0xc3, 0x49, 0x19, 0x6b, 0x03, 0xca,
	0x1b, 0x4d, 0x7b, 0xf0, 0xe6, 0x3f, 0x16, 0xe8, 0x9f, 0x1d, 0xd8, 0x1f, 0x94, 0xd0, 0x8f, 0x61,
	0x31, 0xcf, 0xe5, 0x91, 0xcc, 0x3f, 0xbc, 0x38, 0x89, 0xca, 0x37, 0x46, 0xee, 0xf9, 0x2e, 0x7a,
	0x26, 0x0c, 0x3c, 0xf9, 0x71, 0x10, 0xbd, 0x91, 0xb7, 0x2c, 0x19, 0x28, 0xe5, 0x37, 0x4f, 0x56,
	0xf2, 0x5d, 0xf4, 0x73, 0x81, 0xc5, 0x65, 0xe7, 0x3a, 0x74, 0x3b, 0xef, 0xa0, 0x30, 0x15, 0xca,
	0xf8, 0x24, 0x15, 0xdf, 0x45, 0x3f, 0x13, 0x28, 0x64, 0x66, 0x3a, 0x43, 0xab, 0x79, 0xeb, 0xfc,
	0x64, 0x27, 0xdf, 0x3e, 0x41, 0xc3, 0x77, 0x91, 0x25, 0x0c, 0x7f, 0x85, 0x09, 0x0a, 0xbd, 0x39,
	0x22, 0xc7, 0x99, 0x09, 0x4d, 0x7e, 0x6b, 0x02, 0x2d, 0xdf, 0x45, 0x9f, 0xc0, 0x52, 0x61, 0xec,
	0x41, 0xd9, 0x2a, 0x66, 0xc7, 0x28, 0xf9, 0xe6, 0xe8, 0x4d, 0xdf, 0x45, 0x1f, 0x42, 0x43, 0x98,
	0x49, 0xd0, 0xd5, 0xa4, 0x49, 0xc4, 0x19, 0x47, 0x5e, 0x29, 0x13, 0xfb, 0x2e, 0x6a, 0xc3, 0xa5,
	0xcc, 0x48, 0x81, 0xae, 0x31, 0xc5, 0xfc, 0x98, 0x22, 0x37, 0xcb, 0x37, 0x62, 0x1f, 0x99, 0x09,
	0x21, 0xf1, 0x91, 0x9f, 0x34, 0x12, 0x1f, 0xc5, 0x81, 0xe2, 0x33, 0xf1, 0xf7, 0x2c, 0xe9, 0x6f,
	0x4c, 0x6f, 0x15, 0x72, 0x2a, 0xf2, 0x1f, 0xb9, 0x35, 0x6e, 0xdb, 0x77, 0x91, 0x2d, 0xfc, 0xbe,
	0xa1, 0x48, 0xdb, 0x51, 0xa1, 0x62, 0xa5, 0xec, 0x5f, 0xfe, 0xbf, 0x49, 0xd4, 0x7c, 0x17, 0x3d,
	0x4d, 0xc6, 0xe0, 0x0c, 0xb1, 0x46, 0xd9, 0x28, 0x0b, 0xac, 0x5d, 0x56, 0xc6, 0xee, 0xc7, 0xe0,
	0x2f, 0x67, 0x92, 0x09, 0xf8, 0x47, 0x32, 0xd8, 0x04, 0xfc, 0x63, 0xa8, 0xe8, 0x23, 0x36, 0x11,
	0xa7, 0x89, 0x69, 0x8a, 0x68, 0xc9, 0xe4, 0xe2, 0xfa, 0x88, 0x1d, 0xdf, 0xcd, 0xdc, 0x5c, 0xfc,
	0x4f, 0x32, 0x85, 0x9b, 0x2b, 0x7d, 0xa6, 0x8b, 0x37, 0x97, 0xf8, 0x0c, 0x27, 0x5d, 0x22, 0x50,
	0xb5, 0x5c, 0x97, 0x64, 0xa9, 0x5f, 0xae, 0x4b, 0xf2, 0x0c, 0x2f, 0x41, 0x42, 0x29, 0x7b, 0xca,
	0x21, 0x61, 0x14, 0x4f, 0xcb, 0x21, 0x61, 0x34, 0x11, 0xfb, 0x22, 0x47, 0x34, 0x39, 0x1d, 0x42,
	0x4a, 0x99, 0x03, 0x81, 0x48, 0xc9, 0xab, 0xe3, 0x15, 0xd2, 0x7e, 0xe7, 0x19, 0x16, 0xfb, 0x5d,
	0x48, 0xee, 0x4a, 0x99, 0x58, 0xcc, 0xab, 0x40, 0x4c, 0x50, 0xa1, 0x12, 0xc2, 0x1b, 0x98, 0xcb,
	0x6b, 0x9e, 0xcf, 0xfc, 0x04, 0x50, 0x91, 0x33, 0xa0, 0xac, 0x4d, 0x8e, 0x87, 0xc8, 0xb7, 0xc6,
	0xec, 0xfa, 0x2e, 0x7a, 0x00, 0x17, 0xc5, 0xb7, 0x1c, 0x89, 0x9f, 0x22, 0x06, 0x76, 0xad, 0x54,
	0xee, 0xbb, 0xed, 0x17, 0xdf, 0xbd, 0x6c, 0x49, 0xff, 0x7a, 0xd9, 0x92, 0xfe, 0xf3, 0xb2, 0x25,
	0xfd, 0xf9, 0xa8, 0x25, 0xfd, 0xe5, 0xa8, 0x25, 0xfd, 0xf5, 0xa8, 0x75, 0xe1, 0x9b, 0xa3, 0x96,
	0xf4, 0xed, 0x51, 0x4b, 0xfa, 0xee, 0xa8, 0x25, 0xfd, 0xe1, 0x55, 0xeb, 0xc2, 0xb7, 0xaf, 0x5a,
	0x17, 0xfe, 0xf9, 0xaa, 0x75, 0xe1, 0x8b, 0x1f, 0x9e, 0xc3, 0xbf, 0x82, 0xec, 0x44, 0xeb, 0xde,
	0x1c, 0xfd, 0xaf, 0x8c, 0xad, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x7d, 0x84, 0x18, 0xc6, 0x5d,
	0x22, 0x00, 0x00,
}

func (this *Doc) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Doc)
	if !ok {
		that2, ok := that.(Doc)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Doc")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Doc but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Doc but is not nil && this == nil")
	}
	if this.ID != that1.ID {
		return fmt.Errorf("ID this(%v) Not Equal that(%v)", this.ID, that1.ID)
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if this.CategoryId != that1.CategoryId {
		return fmt.Errorf("CategoryId this(%v) Not Equal that(%v)", this.CategoryId, that1.CategoryId)
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return fmt.Errorf("CreatedAt this(%v) Not Equal that(%v)", this.CreatedAt, that1.CreatedAt)
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return fmt.Errorf("UpdatedAt this(%v) Not Equal that(%v)", this.UpdatedAt, that1.UpdatedAt)
	}
	return nil
}
func (this *Doc) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Doc)
	if !ok {
		that2, ok := that.(Doc)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.CategoryId != that1.CategoryId {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return false
	}
	return true
}
func (this *DocVersion) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*DocVersion)
	if !ok {
		that2, ok := that.(DocVersion)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *DocVersion")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *DocVersion but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *DocVersion but is not nil && this == nil")
	}
	if this.DocVer != that1.DocVer {
		return fmt.Errorf("DocVer this(%v) Not Equal that(%v)", this.DocVer, that1.DocVer)
	}
	if this.DocID != that1.DocID {
		return fmt.Errorf("DocID this(%v) Not Equal that(%v)", this.DocID, that1.DocID)
	}
	if this.Version != that1.Version {
		return fmt.Errorf("Version this(%v) Not Equal that(%v)", this.Version, that1.Version)
	}
	if this.Price != that1.Price {
		return fmt.Errorf("Price this(%v) Not Equal that(%v)", this.Price, that1.Price)
	}
	if this.DocDescription != that1.DocDescription {
		return fmt.Errorf("DocDescription this(%v) Not Equal that(%v)", this.DocDescription, that1.DocDescription)
	}
	if this.Publisher != that1.Publisher {
		return fmt.Errorf("Publisher this(%v) Not Equal that(%v)", this.Publisher, that1.Publisher)
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return fmt.Errorf("CreatedAt this(%v) Not Equal that(%v)", this.CreatedAt, that1.CreatedAt)
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return fmt.Errorf("UpdatedAt this(%v) Not Equal that(%v)", this.UpdatedAt, that1.UpdatedAt)
	}
	return nil
}
func (this *DocVersion) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DocVersion)
	if !ok {
		that2, ok := that.(DocVersion)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DocVer != that1.DocVer {
		return false
	}
	if this.DocID != that1.DocID {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if this.Price != that1.Price {
		return false
	}
	if this.DocDescription != that1.DocDescription {
		return false
	}
	if this.Publisher != that1.Publisher {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return false
	}
	return true
}
func (this *Barcode) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Barcode)
	if !ok {
		that2, ok := that.(Barcode)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Barcode")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Barcode but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Barcode but is not nil && this == nil")
	}
	if this.ID != that1.ID {
		return fmt.Errorf("ID this(%v) Not Equal that(%v)", this.ID, that1.ID)
	}
	if this.Status != that1.Status {
		return fmt.Errorf("Status this(%v) Not Equal that(%v)", this.Status, that1.Status)
	}
	if this.SaleBillID != that1.SaleBillID {
		return fmt.Errorf("SaleBillID this(%v) Not Equal that(%v)", this.SaleBillID, that1.SaleBillID)
	}
	if this.DocVerID != that1.DocVerID {
		return fmt.Errorf("DocVerID this(%v) Not Equal that(%v)", this.DocVerID, that1.DocVerID)
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return fmt.Errorf("CreatedAt this(%v) Not Equal that(%v)", this.CreatedAt, that1.CreatedAt)
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return fmt.Errorf("UpdatedAt this(%v) Not Equal that(%v)", this.UpdatedAt, that1.UpdatedAt)
	}
	return nil
}
func (this *Barcode) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Barcode)
	if !ok {
		that2, ok := that.(Barcode)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.SaleBillID != that1.SaleBillID {
		return false
	}
	if this.DocVerID != that1.DocVerID {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return false
	}
	return true
}
func (this *Payment) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Payment)
	if !ok {
		that2, ok := that.(Payment)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Payment")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Payment but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Payment but is not nil && this == nil")
	}
	if this.ID != that1.ID {
		return fmt.Errorf("ID this(%v) Not Equal that(%v)", this.ID, that1.ID)
	}
	if this.LibrarianID != that1.LibrarianID {
		return fmt.Errorf("LibrarianID this(%v) Not Equal that(%v)", this.LibrarianID, that1.LibrarianID)
	}
	if this.BorrowFormID != that1.BorrowFormID {
		return fmt.Errorf("BorrowFormID this(%v) Not Equal that(%v)", this.BorrowFormID, that1.BorrowFormID)
	}
	if this.Fine != that1.Fine {
		return fmt.Errorf("Fine this(%v) Not Equal that(%v)", this.Fine, that1.Fine)
	}
	if this.ReaderID != that1.ReaderID {
		return fmt.Errorf("ReaderID this(%v) Not Equal that(%v)", this.ReaderID, that1.ReaderID)
	}
	if len(this.BarcodeID) != len(that1.BarcodeID) {
		return fmt.Errorf("BarcodeID this(%v) Not Equal that(%v)", len(this.BarcodeID), len(that1.BarcodeID))
	}
	for i := range this.BarcodeID {
		if this.BarcodeID[i] != that1.BarcodeID[i] {
			return fmt.Errorf("BarcodeID this[%v](%v) Not Equal that[%v](%v)", i, this.BarcodeID[i], i, that1.BarcodeID[i])
		}
	}
	if len(this.BarcodeStatus) != len(that1.BarcodeStatus) {
		return fmt.Errorf("BarcodeStatus this(%v) Not Equal that(%v)", len(this.BarcodeStatus), len(that1.BarcodeStatus))
	}
	for i := range this.BarcodeStatus {
		if this.BarcodeStatus[i] != that1.BarcodeStatus[i] {
			return fmt.Errorf("BarcodeStatus this[%v](%v) Not Equal that[%v](%v)", i, this.BarcodeStatus[i], i, that1.BarcodeStatus[i])
		}
	}
	if len(this.Money) != len(that1.Money) {
		return fmt.Errorf("Money this(%v) Not Equal that(%v)", len(this.Money), len(that1.Money))
	}
	for i := range this.Money {
		if this.Money[i] != that1.Money[i] {
			return fmt.Errorf("Money this[%v](%v) Not Equal that[%v](%v)", i, this.Money[i], i, that1.Money[i])
		}
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return fmt.Errorf("CreatedAt this(%v) Not Equal that(%v)", this.CreatedAt, that1.CreatedAt)
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return fmt.Errorf("UpdatedAt this(%v) Not Equal that(%v)", this.UpdatedAt, that1.UpdatedAt)
	}
	return nil
}
func (this *Payment) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Payment)
	if !ok {
		that2, ok := that.(Payment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.LibrarianID != that1.LibrarianID {
		return false
	}
	if this.BorrowFormID != that1.BorrowFormID {
		return false
	}
	if this.Fine != that1.Fine {
		return false
	}
	if this.ReaderID != that1.ReaderID {
		return false
	}
	if len(this.BarcodeID) != len(that1.BarcodeID) {
		return false
	}
	for i := range this.BarcodeID {
		if this.BarcodeID[i] != that1.BarcodeID[i] {
			return false
		}
	}
	if len(this.BarcodeStatus) != len(that1.BarcodeStatus) {
		return false
	}
	for i := range this.BarcodeStatus {
		if this.BarcodeStatus[i] != that1.BarcodeStatus[i] {
			return false
		}
	}
	if len(this.Money) != len(that1.Money) {
		return false
	}
	for i := range this.Money {
		if this.Money[i] != that1.Money[i] {
			return false
		}
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return false
	}
	return true
}
func (this *BorrowForm) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*BorrowForm)
	if !ok {
		that2, ok := that.(BorrowForm)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *BorrowForm")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *BorrowForm but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *BorrowForm but is not nil && this == nil")
	}
	if this.ID != that1.ID {
		return fmt.Errorf("ID this(%v) Not Equal that(%v)", this.ID, that1.ID)
	}
	if this.LibrarianID != that1.LibrarianID {
		return fmt.Errorf("LibrarianID this(%v) Not Equal that(%v)", this.LibrarianID, that1.LibrarianID)
	}
	if this.Status != that1.Status {
		return fmt.Errorf("Status this(%v) Not Equal that(%v)", this.Status, that1.Status)
	}
	if this.ReaderID != that1.ReaderID {
		return fmt.Errorf("ReaderID this(%v) Not Equal that(%v)", this.ReaderID, that1.ReaderID)
	}
	if len(this.BarcodeID) != len(that1.BarcodeID) {
		return fmt.Errorf("BarcodeID this(%v) Not Equal that(%v)", len(this.BarcodeID), len(that1.BarcodeID))
	}
	for i := range this.BarcodeID {
		if this.BarcodeID[i] != that1.BarcodeID[i] {
			return fmt.Errorf("BarcodeID this[%v](%v) Not Equal that[%v](%v)", i, this.BarcodeID[i], i, that1.BarcodeID[i])
		}
	}
	if !this.StartTime.Equal(that1.StartTime) {
		return fmt.Errorf("StartTime this(%v) Not Equal that(%v)", this.StartTime, that1.StartTime)
	}
	if !this.EndTime.Equal(that1.EndTime) {
		return fmt.Errorf("EndTime this(%v) Not Equal that(%v)", this.EndTime, that1.EndTime)
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return fmt.Errorf("CreatedAt this(%v) Not Equal that(%v)", this.CreatedAt, that1.CreatedAt)
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return fmt.Errorf("UpdatedAt this(%v) Not Equal that(%v)", this.UpdatedAt, that1.UpdatedAt)
	}
	return nil
}
func (this *BorrowForm) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BorrowForm)
	if !ok {
		that2, ok := that.(BorrowForm)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.LibrarianID != that1.LibrarianID {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.ReaderID != that1.ReaderID {
		return false
	}
	if len(this.BarcodeID) != len(that1.BarcodeID) {
		return false
	}
	for i := range this.BarcodeID {
		if this.BarcodeID[i] != that1.BarcodeID[i] {
			return false
		}
	}
	if !this.StartTime.Equal(that1.StartTime) {
		return false
	}
	if !this.EndTime.Equal(that1.EndTime) {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return false
	}
	return true
}
func (this *SaleBill) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SaleBill)
	if !ok {
		that2, ok := that.(SaleBill)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SaleBill")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SaleBill but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SaleBill but is not nil && this == nil")
	}
	if this.ID != that1.ID {
		return fmt.Errorf("ID this(%v) Not Equal that(%v)", this.ID, that1.ID)
	}
	if this.LibrarianID != that1.LibrarianID {
		return fmt.Errorf("LibrarianID this(%v) Not Equal that(%v)", this.LibrarianID, that1.LibrarianID)
	}
	if len(this.BarcodeID) != len(that1.BarcodeID) {
		return fmt.Errorf("BarcodeID this(%v) Not Equal that(%v)", len(this.BarcodeID), len(that1.BarcodeID))
	}
	for i := range this.BarcodeID {
		if this.BarcodeID[i] != that1.BarcodeID[i] {
			return fmt.Errorf("BarcodeID this[%v](%v) Not Equal that[%v](%v)", i, this.BarcodeID[i], i, that1.BarcodeID[i])
		}
	}
	if len(this.Price) != len(that1.Price) {
		return fmt.Errorf("Price this(%v) Not Equal that(%v)", len(this.Price), len(that1.Price))
	}
	for i := range this.Price {
		if this.Price[i] != that1.Price[i] {
			return fmt.Errorf("Price this[%v](%v) Not Equal that[%v](%v)", i, this.Price[i], i, that1.Price[i])
		}
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return fmt.Errorf("CreatedAt this(%v) Not Equal that(%v)", this.CreatedAt, that1.CreatedAt)
	}
	return nil
}
func (this *SaleBill) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SaleBill)
	if !ok {
		that2, ok := that.(SaleBill)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.LibrarianID != that1.LibrarianID {
		return false
	}
	if len(this.BarcodeID) != len(that1.BarcodeID) {
		return false
	}
	for i := range this.BarcodeID {
		if this.BarcodeID[i] != that1.BarcodeID[i] {
			return false
		}
	}
	if len(this.Price) != len(that1.Price) {
		return false
	}
	for i := range this.Price {
		if this.Price[i] != that1.Price[i] {
			return false
		}
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	return true
}
func (this *SelectAllBarcodeReq) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SelectAllBarcodeReq)
	if !ok {
		that2, ok := that.(SelectAllBarcodeReq)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SelectAllBarcodeReq")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SelectAllBarcodeReq but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SelectAllBarcodeReq but is not nil && this == nil")
	}
	return nil
}
func (this *SelectAllBarcodeReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SelectAllBarcodeReq)
	if !ok {
		that2, ok := that.(SelectAllBarcodeReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SelectAllBarcodeResp) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SelectAllBarcodeResp)
	if !ok {
		that2, ok := that.(SelectAllBarcodeResp)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SelectAllBarcodeResp")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SelectAllBarcodeResp but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SelectAllBarcodeResp but is not nil && this == nil")
	}
	if this.Code != that1.Code {
		return fmt.Errorf("Code this(%v) Not Equal that(%v)", this.Code, that1.Code)
	}
	if this.Message != that1.Message {
		return fmt.Errorf("Message this(%v) Not Equal that(%v)", this.Message, that1.Message)
	}
	if len(this.Barcodes) != len(that1.Barcodes) {
		return fmt.Errorf("Barcodes this(%v) Not Equal that(%v)", len(this.Barcodes), len(that1.Barcodes))
	}
	for i := range this.Barcodes {
		if !this.Barcodes[i].Equal(that1.Barcodes[i]) {
			return fmt.Errorf("Barcodes this[%v](%v) Not Equal that[%v](%v)", i, this.Barcodes[i], i, that1.Barcodes[i])
		}
	}
	return nil
}
func (this *SelectAllBarcodeResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SelectAllBarcodeResp)
	if !ok {
		that2, ok := that.(SelectAllBarcodeResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	if len(this.Barcodes) != len(that1.Barcodes) {
		return false
	}
	for i := range this.Barcodes {
		if !this.Barcodes[i].Equal(that1.Barcodes[i]) {
			return false
		}
	}
	return true
}
func (this *SelectAllAvailableBarcodeReq) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SelectAllAvailableBarcodeReq)
	if !ok {
		that2, ok := that.(SelectAllAvailableBarcodeReq)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SelectAllAvailableBarcodeReq")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SelectAllAvailableBarcodeReq but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SelectAllAvailableBarcodeReq but is not nil && this == nil")
	}
	return nil
}
func (this *SelectAllAvailableBarcodeReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SelectAllAvailableBarcodeReq)
	if !ok {
		that2, ok := that.(SelectAllAvailableBarcodeReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SelectAllAvailableBarcodeResp) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SelectAllAvailableBarcodeResp)
	if !ok {
		that2, ok := that.(SelectAllAvailableBarcodeResp)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SelectAllAvailableBarcodeResp")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SelectAllAvailableBarcodeResp but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SelectAllAvailableBarcodeResp but is not nil && this == nil")
	}
	if this.Code != that1.Code {
		return fmt.Errorf("Code this(%v) Not Equal that(%v)", this.Code, that1.Code)
	}
	if this.Message != that1.Message {
		return fmt.Errorf("Message this(%v) Not Equal that(%v)", this.Message, that1.Message)
	}
	if len(this.Barcodes) != len(that1.Barcodes) {
		return fmt.Errorf("Barcodes this(%v) Not Equal that(%v)", len(this.Barcodes), len(that1.Barcodes))
	}
	for i := range this.Barcodes {
		if !this.Barcodes[i].Equal(that1.Barcodes[i]) {
			return fmt.Errorf("Barcodes this[%v](%v) Not Equal that[%v](%v)", i, this.Barcodes[i], i, that1.Barcodes[i])
		}
	}
	return nil
}
func (this *SelectAllAvailableBarcodeResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SelectAllAvailableBarcodeResp)
	if !ok {
		that2, ok := that.(SelectAllAvailableBarcodeResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	if len(this.Barcodes) != len(that1.Barcodes) {
		return false
	}
	for i := range this.Barcodes {
		if !this.Barcodes[i].Equal(that1.Barcodes[i]) {
			return false
		}
	}
	return true
}
func (this *SelectAllSellingBarcodeReq) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SelectAllSellingBarcodeReq)
	if !ok {
		that2, ok := that.(SelectAllSellingBarcodeReq)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SelectAllSellingBarcodeReq")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SelectAllSellingBarcodeReq but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SelectAllSellingBarcodeReq but is not nil && this == nil")
	}
	return nil
}
func (this *SelectAllSellingBarcodeReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SelectAllSellingBarcodeReq)
	if !ok {
		that2, ok := that.(SelectAllSellingBarcodeReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SelectAllSellingBarcodeResp) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SelectAllSellingBarcodeResp)
	if !ok {
		that2, ok := that.(SelectAllSellingBarcodeResp)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SelectAllSellingBarcodeResp")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SelectAllSellingBarcodeResp but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SelectAllSellingBarcodeResp but is not nil && this == nil")
	}
	if this.Code != that1.Code {
		return fmt.Errorf("Code this(%v) Not Equal that(%v)", this.Code, that1.Code)
	}
	if this.Message != that1.Message {
		return fmt.Errorf("Message this(%v) Not Equal that(%v)", this.Message, that1.Message)
	}
	if len(this.Barcodes) != len(that1.Barcodes) {
		return fmt.Errorf("Barcodes this(%v) Not Equal that(%v)", len(this.Barcodes), len(that1.Barcodes))
	}
	for i := range this.Barcodes {
		if !this.Barcodes[i].Equal(that1.Barcodes[i]) {
			return fmt.Errorf("Barcodes this[%v](%v) Not Equal that[%v](%v)", i, this.Barcodes[i], i, that1.Barcodes[i])
		}
	}
	return nil
}
func (this *SelectAllSellingBarcodeResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SelectAllSellingBarcodeResp)
	if !ok {
		that2, ok := that.(SelectAllSellingBarcodeResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	if len(this.Barcodes) != len(that1.Barcodes) {
		return false
	}
	for i := range this.Barcodes {
		if !this.Barcodes[i].Equal(that1.Barcodes[i]) {
			return false
		}
	}
	return true
}
func (this *SelectAllDamageBarcodeReq) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SelectAllDamageBarcodeReq)
	if !ok {
		that2, ok := that.(SelectAllDamageBarcodeReq)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SelectAllDamageBarcodeReq")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SelectAllDamageBarcodeReq but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SelectAllDamageBarcodeReq but is not nil && this == nil")
	}
	return nil
}
func (this *SelectAllDamageBarcodeReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SelectAllDamageBarcodeReq)
	if !ok {
		that2, ok := that.(SelectAllDamageBarcodeReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SelectAllDamageBarcodeResp) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SelectAllDamageBarcodeResp)
	if !ok {
		that2, ok := that.(SelectAllDamageBarcodeResp)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SelectAllDamageBarcodeResp")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SelectAllDamageBarcodeResp but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SelectAllDamageBarcodeResp but is not nil && this == nil")
	}
	if this.Code != that1.Code {
		return fmt.Errorf("Code this(%v) Not Equal that(%v)", this.Code, that1.Code)
	}
	if this.Message != that1.Message {
		return fmt.Errorf("Message this(%v) Not Equal that(%v)", this.Message, that1.Message)
	}
	if len(this.Barcodes) != len(that1.Barcodes) {
		return fmt.Errorf("Barcodes this(%v) Not Equal that(%v)", len(this.Barcodes), len(that1.Barcodes))
	}
	for i := range this.Barcodes {
		if !this.Barcodes[i].Equal(that1.Barcodes[i]) {
			return fmt.Errorf("Barcodes this[%v](%v) Not Equal that[%v](%v)", i, this.Barcodes[i], i, that1.Barcodes[i])
		}
	}
	return nil
}
func (this *SelectAllDamageBarcodeResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SelectAllDamageBarcodeResp)
	if !ok {
		that2, ok := that.(SelectAllDamageBarcodeResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	if len(this.Barcodes) != len(that1.Barcodes) {
		return false
	}
	for i := range this.Barcodes {
		if !this.Barcodes[i].Equal(that1.Barcodes[i]) {
			return false
		}
	}
	return true
}
func (this *SelectAllBarcodeByDocVerIDReq) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SelectAllBarcodeByDocVerIDReq)
	if !ok {
		that2, ok := that.(SelectAllBarcodeByDocVerIDReq)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SelectAllBarcodeByDocVerIDReq")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SelectAllBarcodeByDocVerIDReq but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SelectAllBarcodeByDocVerIDReq but is not nil && this == nil")
	}
	if this.DocVerID != that1.DocVerID {
		return fmt.Errorf("DocVerID this(%v) Not Equal that(%v)", this.DocVerID, that1.DocVerID)
	}
	return nil
}
func (this *SelectAllBarcodeByDocVerIDReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SelectAllBarcodeByDocVerIDReq)
	if !ok {
		that2, ok := that.(SelectAllBarcodeByDocVerIDReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DocVerID != that1.DocVerID {
		return false
	}
	return true
}
func (this *SelectAllBarcodeByDocVerIDResp) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SelectAllBarcodeByDocVerIDResp)
	if !ok {
		that2, ok := that.(SelectAllBarcodeByDocVerIDResp)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SelectAllBarcodeByDocVerIDResp")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SelectAllBarcodeByDocVerIDResp but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SelectAllBarcodeByDocVerIDResp but is not nil && this == nil")
	}
	if this.Code != that1.Code {
		return fmt.Errorf("Code this(%v) Not Equal that(%v)", this.Code, that1.Code)
	}
	if this.Message != that1.Message {
		return fmt.Errorf("Message this(%v) Not Equal that(%v)", this.Message, that1.Message)
	}
	if len(this.Barcode) != len(that1.Barcode) {
		return fmt.Errorf("Barcode this(%v) Not Equal that(%v)", len(this.Barcode), len(that1.Barcode))
	}
	for i := range this.Barcode {
		if !this.Barcode[i].Equal(that1.Barcode[i]) {
			return fmt.Errorf("Barcode this[%v](%v) Not Equal that[%v](%v)", i, this.Barcode[i], i, that1.Barcode[i])
		}
	}
	return nil
}
func (this *SelectAllBarcodeByDocVerIDResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SelectAllBarcodeByDocVerIDResp)
	if !ok {
		that2, ok := that.(SelectAllBarcodeByDocVerIDResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	if len(this.Barcode) != len(that1.Barcode) {
		return false
	}
	for i := range this.Barcode {
		if !this.Barcode[i].Equal(that1.Barcode[i]) {
			return false
		}
	}
	return true
}
func (this *SelectBarcodeByIDReq) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SelectBarcodeByIDReq)
	if !ok {
		that2, ok := that.(SelectBarcodeByIDReq)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SelectBarcodeByIDReq")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SelectBarcodeByIDReq but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SelectBarcodeByIDReq but is not nil && this == nil")
	}
	if this.BarcodeID != that1.BarcodeID {
		return fmt.Errorf("BarcodeID this(%v) Not Equal that(%v)", this.BarcodeID, that1.BarcodeID)
	}
	return nil
}
func (this *SelectBarcodeByIDReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SelectBarcodeByIDReq)
	if !ok {
		that2, ok := that.(SelectBarcodeByIDReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BarcodeID != that1.BarcodeID {
		return false
	}
	return true
}
func (this *SelectBarcodeByIDResp) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SelectBarcodeByIDResp)
	if !ok {
		that2, ok := that.(SelectBarcodeByIDResp)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SelectBarcodeByIDResp")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SelectBarcodeByIDResp but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SelectBarcodeByIDResp but is not nil && this == nil")
	}
	if this.Code != that1.Code {
		return fmt.Errorf("Code this(%v) Not Equal that(%v)", this.Code, that1.Code)
	}
	if this.Message != that1.Message {
		return fmt.Errorf("Message this(%v) Not Equal that(%v)", this.Message, that1.Message)
	}
	if !this.Barcode.Equal(that1.Barcode) {
		return fmt.Errorf("Barcode this(%v) Not Equal that(%v)", this.Barcode, that1.Barcode)
	}
	return nil
}
func (this *SelectBarcodeByIDResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SelectBarcodeByIDResp)
	if !ok {
		that2, ok := that.(SelectBarcodeByIDResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	if !this.Barcode.Equal(that1.Barcode) {
		return false
	}
	return true
}
func (this *SaveBarcodeReq) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SaveBarcodeReq)
	if !ok {
		that2, ok := that.(SaveBarcodeReq)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SaveBarcodeReq")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SaveBarcodeReq but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SaveBarcodeReq but is not nil && this == nil")
	}
	if !this.Barcode.Equal(that1.Barcode) {
		return fmt.Errorf("Barcode this(%v) Not Equal that(%v)", this.Barcode, that1.Barcode)
	}
	return nil
}
func (this *SaveBarcodeReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SaveBarcodeReq)
	if !ok {
		that2, ok := that.(SaveBarcodeReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Barcode.Equal(that1.Barcode) {
		return false
	}
	return true
}
func (this *SaveBarcodeResp) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SaveBarcodeResp)
	if !ok {
		that2, ok := that.(SaveBarcodeResp)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SaveBarcodeResp")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SaveBarcodeResp but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SaveBarcodeResp but is not nil && this == nil")
	}
	if this.Code != that1.Code {
		return fmt.Errorf("Code this(%v) Not Equal that(%v)", this.Code, that1.Code)
	}
	if this.Message != that1.Message {
		return fmt.Errorf("Message this(%v) Not Equal that(%v)", this.Message, that1.Message)
	}
	return nil
}
func (this *SaveBarcodeResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SaveBarcodeResp)
	if !ok {
		that2, ok := that.(SaveBarcodeResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	return true
}
func (this *UpdateBarcodeReq) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*UpdateBarcodeReq)
	if !ok {
		that2, ok := that.(UpdateBarcodeReq)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *UpdateBarcodeReq")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *UpdateBarcodeReq but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *UpdateBarcodeReq but is not nil && this == nil")
	}
	if !this.Barcode.Equal(that1.Barcode) {
		return fmt.Errorf("Barcode this(%v) Not Equal that(%v)", this.Barcode, that1.Barcode)
	}
	return nil
}
func (this *UpdateBarcodeReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateBarcodeReq)
	if !ok {
		that2, ok := that.(UpdateBarcodeReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Barcode.Equal(that1.Barcode) {
		return false
	}
	return true
}
func (this *UpdateBarcodeResp) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*UpdateBarcodeResp)
	if !ok {
		that2, ok := that.(UpdateBarcodeResp)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *UpdateBarcodeResp")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *UpdateBarcodeResp but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *UpdateBarcodeResp but is not nil && this == nil")
	}
	if this.Code != that1.Code {
		return fmt.Errorf("Code this(%v) Not Equal that(%v)", this.Code, that1.Code)
	}
	if this.Message != that1.Message {
		return fmt.Errorf("Message this(%v) Not Equal that(%v)", this.Message, that1.Message)
	}
	return nil
}
func (this *UpdateBarcodeResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateBarcodeResp)
	if !ok {
		that2, ok := that.(UpdateBarcodeResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	return true
}
func (this *DeleteBarcodeReq) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*DeleteBarcodeReq)
	if !ok {
		that2, ok := that.(DeleteBarcodeReq)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *DeleteBarcodeReq")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *DeleteBarcodeReq but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *DeleteBarcodeReq but is not nil && this == nil")
	}
	if this.BarcodeID != that1.BarcodeID {
		return fmt.Errorf("BarcodeID this(%v) Not Equal that(%v)", this.BarcodeID, that1.BarcodeID)
	}
	return nil
}
func (this *DeleteBarcodeReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteBarcodeReq)
	if !ok {
		that2, ok := that.(DeleteBarcodeReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BarcodeID != that1.BarcodeID {
		return false
	}
	return true
}
func (this *DeleteBarcodeResp) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*DeleteBarcodeResp)
	if !ok {
		that2, ok := that.(DeleteBarcodeResp)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *DeleteBarcodeResp")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *DeleteBarcodeResp but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *DeleteBarcodeResp but is not nil && this == nil")
	}
	if this.Code != that1.Code {
		return fmt.Errorf("Code this(%v) Not Equal that(%v)", this.Code, that1.Code)
	}
	if this.Message != that1.Message {
		return fmt.Errorf("Message this(%v) Not Equal that(%v)", this.Message, that1.Message)
	}
	return nil
}
func (this *DeleteBarcodeResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteBarcodeResp)
	if !ok {
		that2, ok := that.(DeleteBarcodeResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	return true
}
func (this *SelectAllBorrowFormReq) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SelectAllBorrowFormReq)
	if !ok {
		that2, ok := that.(SelectAllBorrowFormReq)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SelectAllBorrowFormReq")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SelectAllBorrowFormReq but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SelectAllBorrowFormReq but is not nil && this == nil")
	}
	return nil
}
func (this *SelectAllBorrowFormReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SelectAllBorrowFormReq)
	if !ok {
		that2, ok := that.(SelectAllBorrowFormReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SelectAllBorrowFormResp) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SelectAllBorrowFormResp)
	if !ok {
		that2, ok := that.(SelectAllBorrowFormResp)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SelectAllBorrowFormResp")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SelectAllBorrowFormResp but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SelectAllBorrowFormResp but is not nil && this == nil")
	}
	if this.Code != that1.Code {
		return fmt.Errorf("Code this(%v) Not Equal that(%v)", this.Code, that1.Code)
	}
	if this.Message != that1.Message {
		return fmt.Errorf("Message this(%v) Not Equal that(%v)", this.Message, that1.Message)
	}
	if len(this.BorrowForms) != len(that1.BorrowForms) {
		return fmt.Errorf("BorrowForms this(%v) Not Equal that(%v)", len(this.BorrowForms), len(that1.BorrowForms))
	}
	for i := range this.BorrowForms {
		if !this.BorrowForms[i].Equal(that1.BorrowForms[i]) {
			return fmt.Errorf("BorrowForms this[%v](%v) Not Equal that[%v](%v)", i, this.BorrowForms[i], i, that1.BorrowForms[i])
		}
	}
	return nil
}
func (this *SelectAllBorrowFormResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SelectAllBorrowFormResp)
	if !ok {
		that2, ok := that.(SelectAllBorrowFormResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	if len(this.BorrowForms) != len(that1.BorrowForms) {
		return false
	}
	for i := range this.BorrowForms {
		if !this.BorrowForms[i].Equal(that1.BorrowForms[i]) {
			return false
		}
	}
	return true
}
func (this *SelectAllUnReturnBorrowFormReq) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SelectAllUnReturnBorrowFormReq)
	if !ok {
		that2, ok := that.(SelectAllUnReturnBorrowFormReq)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SelectAllUnReturnBorrowFormReq")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SelectAllUnReturnBorrowFormReq but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SelectAllUnReturnBorrowFormReq but is not nil && this == nil")
	}
	return nil
}
func (this *SelectAllUnReturnBorrowFormReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SelectAllUnReturnBorrowFormReq)
	if !ok {
		that2, ok := that.(SelectAllUnReturnBorrowFormReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SelectAllUnReturnBorrowFormResp) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SelectAllUnReturnBorrowFormResp)
	if !ok {
		that2, ok := that.(SelectAllUnReturnBorrowFormResp)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SelectAllUnReturnBorrowFormResp")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SelectAllUnReturnBorrowFormResp but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SelectAllUnReturnBorrowFormResp but is not nil && this == nil")
	}
	if this.Code != that1.Code {
		return fmt.Errorf("Code this(%v) Not Equal that(%v)", this.Code, that1.Code)
	}
	if this.Message != that1.Message {
		return fmt.Errorf("Message this(%v) Not Equal that(%v)", this.Message, that1.Message)
	}
	if len(this.BorrowForms) != len(that1.BorrowForms) {
		return fmt.Errorf("BorrowForms this(%v) Not Equal that(%v)", len(this.BorrowForms), len(that1.BorrowForms))
	}
	for i := range this.BorrowForms {
		if !this.BorrowForms[i].Equal(that1.BorrowForms[i]) {
			return fmt.Errorf("BorrowForms this[%v](%v) Not Equal that[%v](%v)", i, this.BorrowForms[i], i, that1.BorrowForms[i])
		}
	}
	return nil
}
func (this *SelectAllUnReturnBorrowFormResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SelectAllUnReturnBorrowFormResp)
	if !ok {
		that2, ok := that.(SelectAllUnReturnBorrowFormResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	if len(this.BorrowForms) != len(that1.BorrowForms) {
		return false
	}
	for i := range this.BorrowForms {
		if !this.BorrowForms[i].Equal(that1.BorrowForms[i]) {
			return false
		}
	}
	return true
}
func (this *SelectBorrowFormByIDReq) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SelectBorrowFormByIDReq)
	if !ok {
		that2, ok := that.(SelectBorrowFormByIDReq)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SelectBorrowFormByIDReq")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SelectBorrowFormByIDReq but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SelectBorrowFormByIDReq but is not nil && this == nil")
	}
	if this.BorrowFormID != that1.BorrowFormID {
		return fmt.Errorf("BorrowFormID this(%v) Not Equal that(%v)", this.BorrowFormID, that1.BorrowFormID)
	}
	return nil
}
func (this *SelectBorrowFormByIDReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SelectBorrowFormByIDReq)
	if !ok {
		that2, ok := that.(SelectBorrowFormByIDReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BorrowFormID != that1.BorrowFormID {
		return false
	}
	return true
}
func (this *SelectBorrowFormByIDResp) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SelectBorrowFormByIDResp)
	if !ok {
		that2, ok := that.(SelectBorrowFormByIDResp)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SelectBorrowFormByIDResp")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SelectBorrowFormByIDResp but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SelectBorrowFormByIDResp but is not nil && this == nil")
	}
	if this.Code != that1.Code {
		return fmt.Errorf("Code this(%v) Not Equal that(%v)", this.Code, that1.Code)
	}
	if this.Message != that1.Message {
		return fmt.Errorf("Message this(%v) Not Equal that(%v)", this.Message, that1.Message)
	}
	if !this.Borrowform.Equal(that1.Borrowform) {
		return fmt.Errorf("Borrowform this(%v) Not Equal that(%v)", this.Borrowform, that1.Borrowform)
	}
	return nil
}
func (this *SelectBorrowFormByIDResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SelectBorrowFormByIDResp)
	if !ok {
		that2, ok := that.(SelectBorrowFormByIDResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	if !this.Borrowform.Equal(that1.Borrowform) {
		return false
	}
	return true
}
func (this *SaveBorrowFormReq) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SaveBorrowFormReq)
	if !ok {
		that2, ok := that.(SaveBorrowFormReq)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SaveBorrowFormReq")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SaveBorrowFormReq but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SaveBorrowFormReq but is not nil && this == nil")
	}
	if !this.Borrowform.Equal(that1.Borrowform) {
		return fmt.Errorf("Borrowform this(%v) Not Equal that(%v)", this.Borrowform, that1.Borrowform)
	}
	return nil
}
func (this *SaveBorrowFormReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SaveBorrowFormReq)
	if !ok {
		that2, ok := that.(SaveBorrowFormReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Borrowform.Equal(that1.Borrowform) {
		return false
	}
	return true
}
func (this *SaveBorrowFormResp) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SaveBorrowFormResp)
	if !ok {
		that2, ok := that.(SaveBorrowFormResp)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SaveBorrowFormResp")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SaveBorrowFormResp but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SaveBorrowFormResp but is not nil && this == nil")
	}
	if this.Code != that1.Code {
		return fmt.Errorf("Code this(%v) Not Equal that(%v)", this.Code, that1.Code)
	}
	if this.Message != that1.Message {
		return fmt.Errorf("Message this(%v) Not Equal that(%v)", this.Message, that1.Message)
	}
	return nil
}
func (this *SaveBorrowFormResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SaveBorrowFormResp)
	if !ok {
		that2, ok := that.(SaveBorrowFormResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	return true
}
func (this *UpdateBorrowFormStatusReq) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*UpdateBorrowFormStatusReq)
	if !ok {
		that2, ok := that.(UpdateBorrowFormStatusReq)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *UpdateBorrowFormStatusReq")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *UpdateBorrowFormStatusReq but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *UpdateBorrowFormStatusReq but is not nil && this == nil")
	}
	if this.BorrowFormID != that1.BorrowFormID {
		return fmt.Errorf("BorrowFormID this(%v) Not Equal that(%v)", this.BorrowFormID, that1.BorrowFormID)
	}
	if this.Status != that1.Status {
		return fmt.Errorf("Status this(%v) Not Equal that(%v)", this.Status, that1.Status)
	}
	return nil
}
func (this *UpdateBorrowFormStatusReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateBorrowFormStatusReq)
	if !ok {
		that2, ok := that.(UpdateBorrowFormStatusReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BorrowFormID != that1.BorrowFormID {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	return true
}
func (this *UpdateBorrowFormStatusResp) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*UpdateBorrowFormStatusResp)
	if !ok {
		that2, ok := that.(UpdateBorrowFormStatusResp)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *UpdateBorrowFormStatusResp")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *UpdateBorrowFormStatusResp but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *UpdateBorrowFormStatusResp but is not nil && this == nil")
	}
	if this.Code != that1.Code {
		return fmt.Errorf("Code this(%v) Not Equal that(%v)", this.Code, that1.Code)
	}
	if this.Message != that1.Message {
		return fmt.Errorf("Message this(%v) Not Equal that(%v)", this.Message, that1.Message)
	}
	return nil
}
func (this *UpdateBorrowFormStatusResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateBorrowFormStatusResp)
	if !ok {
		that2, ok := that.(UpdateBorrowFormStatusResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	return true
}
func (this *DeleteBorrowFormReq) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*DeleteBorrowFormReq)
	if !ok {
		that2, ok := that.(DeleteBorrowFormReq)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *DeleteBorrowFormReq")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *DeleteBorrowFormReq but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *DeleteBorrowFormReq but is not nil && this == nil")
	}
	if this.BorrowFormID != that1.BorrowFormID {
		return fmt.Errorf("BorrowFormID this(%v) Not Equal that(%v)", this.BorrowFormID, that1.BorrowFormID)
	}
	return nil
}
func (this *DeleteBorrowFormReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteBorrowFormReq)
	if !ok {
		that2, ok := that.(DeleteBorrowFormReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BorrowFormID != that1.BorrowFormID {
		return false
	}
	return true
}
func (this *DeleteBorrowFormResp) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*DeleteBorrowFormResp)
	if !ok {
		that2, ok := that.(DeleteBorrowFormResp)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *DeleteBorrowFormResp")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *DeleteBorrowFormResp but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *DeleteBorrowFormResp but is not nil && this == nil")
	}
	if this.Code != that1.Code {
		return fmt.Errorf("Code this(%v) Not Equal that(%v)", this.Code, that1.Code)
	}
	if this.Message != that1.Message {
		return fmt.Errorf("Message this(%v) Not Equal that(%v)", this.Message, that1.Message)
	}
	return nil
}
func (this *DeleteBorrowFormResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteBorrowFormResp)
	if !ok {
		that2, ok := that.(DeleteBorrowFormResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	return true
}
func (this *SelectAllPaymentReq) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SelectAllPaymentReq)
	if !ok {
		that2, ok := that.(SelectAllPaymentReq)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SelectAllPaymentReq")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SelectAllPaymentReq but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SelectAllPaymentReq but is not nil && this == nil")
	}
	return nil
}
func (this *SelectAllPaymentReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SelectAllPaymentReq)
	if !ok {
		that2, ok := that.(SelectAllPaymentReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SelectAllPaymentResp) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SelectAllPaymentResp)
	if !ok {
		that2, ok := that.(SelectAllPaymentResp)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SelectAllPaymentResp")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SelectAllPaymentResp but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SelectAllPaymentResp but is not nil && this == nil")
	}
	if this.Code != that1.Code {
		return fmt.Errorf("Code this(%v) Not Equal that(%v)", this.Code, that1.Code)
	}
	if this.Message != that1.Message {
		return fmt.Errorf("Message this(%v) Not Equal that(%v)", this.Message, that1.Message)
	}
	if len(this.Payments) != len(that1.Payments) {
		return fmt.Errorf("Payments this(%v) Not Equal that(%v)", len(this.Payments), len(that1.Payments))
	}
	for i := range this.Payments {
		if !this.Payments[i].Equal(that1.Payments[i]) {
			return fmt.Errorf("Payments this[%v](%v) Not Equal that[%v](%v)", i, this.Payments[i], i, that1.Payments[i])
		}
	}
	return nil
}
func (this *SelectAllPaymentResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SelectAllPaymentResp)
	if !ok {
		that2, ok := that.(SelectAllPaymentResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	if len(this.Payments) != len(that1.Payments) {
		return false
	}
	for i := range this.Payments {
		if !this.Payments[i].Equal(that1.Payments[i]) {
			return false
		}
	}
	return true
}
func (this *SelectPaymentByIDReq) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SelectPaymentByIDReq)
	if !ok {
		that2, ok := that.(SelectPaymentByIDReq)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SelectPaymentByIDReq")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SelectPaymentByIDReq but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SelectPaymentByIDReq but is not nil && this == nil")
	}
	if this.PaymentID != that1.PaymentID {
		return fmt.Errorf("PaymentID this(%v) Not Equal that(%v)", this.PaymentID, that1.PaymentID)
	}
	return nil
}
func (this *SelectPaymentByIDReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SelectPaymentByIDReq)
	if !ok {
		that2, ok := that.(SelectPaymentByIDReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PaymentID != that1.PaymentID {
		return false
	}
	return true
}
func (this *SelectPaymentByIDResp) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SelectPaymentByIDResp)
	if !ok {
		that2, ok := that.(SelectPaymentByIDResp)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SelectPaymentByIDResp")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SelectPaymentByIDResp but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SelectPaymentByIDResp but is not nil && this == nil")
	}
	if this.Code != that1.Code {
		return fmt.Errorf("Code this(%v) Not Equal that(%v)", this.Code, that1.Code)
	}
	if this.Message != that1.Message {
		return fmt.Errorf("Message this(%v) Not Equal that(%v)", this.Message, that1.Message)
	}
	if !this.Payment.Equal(that1.Payment) {
		return fmt.Errorf("Payment this(%v) Not Equal that(%v)", this.Payment, that1.Payment)
	}
	return nil
}
func (this *SelectPaymentByIDResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SelectPaymentByIDResp)
	if !ok {
		that2, ok := that.(SelectPaymentByIDResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	if !this.Payment.Equal(that1.Payment) {
		return false
	}
	return true
}
func (this *SelectPaymentByBorrowFormIDReq) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SelectPaymentByBorrowFormIDReq)
	if !ok {
		that2, ok := that.(SelectPaymentByBorrowFormIDReq)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SelectPaymentByBorrowFormIDReq")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SelectPaymentByBorrowFormIDReq but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SelectPaymentByBorrowFormIDReq but is not nil && this == nil")
	}
	if this.BorrowFormID != that1.BorrowFormID {
		return fmt.Errorf("BorrowFormID this(%v) Not Equal that(%v)", this.BorrowFormID, that1.BorrowFormID)
	}
	return nil
}
func (this *SelectPaymentByBorrowFormIDReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SelectPaymentByBorrowFormIDReq)
	if !ok {
		that2, ok := that.(SelectPaymentByBorrowFormIDReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BorrowFormID != that1.BorrowFormID {
		return false
	}
	return true
}
func (this *SelectPaymentByBorrowFormIDResp) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SelectPaymentByBorrowFormIDResp)
	if !ok {
		that2, ok := that.(SelectPaymentByBorrowFormIDResp)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SelectPaymentByBorrowFormIDResp")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SelectPaymentByBorrowFormIDResp but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SelectPaymentByBorrowFormIDResp but is not nil && this == nil")
	}
	if this.Code != that1.Code {
		return fmt.Errorf("Code this(%v) Not Equal that(%v)", this.Code, that1.Code)
	}
	if this.Message != that1.Message {
		return fmt.Errorf("Message this(%v) Not Equal that(%v)", this.Message, that1.Message)
	}
	if !this.Payment.Equal(that1.Payment) {
		return fmt.Errorf("Payment this(%v) Not Equal that(%v)", this.Payment, that1.Payment)
	}
	return nil
}
func (this *SelectPaymentByBorrowFormIDResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SelectPaymentByBorrowFormIDResp)
	if !ok {
		that2, ok := that.(SelectPaymentByBorrowFormIDResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	if !this.Payment.Equal(that1.Payment) {
		return false
	}
	return true
}
func (this *SelectPaymentWithFineReq) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SelectPaymentWithFineReq)
	if !ok {
		that2, ok := that.(SelectPaymentWithFineReq)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SelectPaymentWithFineReq")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SelectPaymentWithFineReq but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SelectPaymentWithFineReq but is not nil && this == nil")
	}
	return nil
}
func (this *SelectPaymentWithFineReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SelectPaymentWithFineReq)
	if !ok {
		that2, ok := that.(SelectPaymentWithFineReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SelectPaymentWithFineResp) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SelectPaymentWithFineResp)
	if !ok {
		that2, ok := that.(SelectPaymentWithFineResp)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SelectPaymentWithFineResp")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SelectPaymentWithFineResp but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SelectPaymentWithFineResp but is not nil && this == nil")
	}
	if this.Code != that1.Code {
		return fmt.Errorf("Code this(%v) Not Equal that(%v)", this.Code, that1.Code)
	}
	if this.Message != that1.Message {
		return fmt.Errorf("Message this(%v) Not Equal that(%v)", this.Message, that1.Message)
	}
	if len(this.Payment) != len(that1.Payment) {
		return fmt.Errorf("Payment this(%v) Not Equal that(%v)", len(this.Payment), len(that1.Payment))
	}
	for i := range this.Payment {
		if !this.Payment[i].Equal(that1.Payment[i]) {
			return fmt.Errorf("Payment this[%v](%v) Not Equal that[%v](%v)", i, this.Payment[i], i, that1.Payment[i])
		}
	}
	return nil
}
func (this *SelectPaymentWithFineResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SelectPaymentWithFineResp)
	if !ok {
		that2, ok := that.(SelectPaymentWithFineResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	if len(this.Payment) != len(that1.Payment) {
		return false
	}
	for i := range this.Payment {
		if !this.Payment[i].Equal(that1.Payment[i]) {
			return false
		}
	}
	return true
}
func (this *SavePaymentReq) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SavePaymentReq)
	if !ok {
		that2, ok := that.(SavePaymentReq)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SavePaymentReq")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SavePaymentReq but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SavePaymentReq but is not nil && this == nil")
	}
	if !this.Payment.Equal(that1.Payment) {
		return fmt.Errorf("Payment this(%v) Not Equal that(%v)", this.Payment, that1.Payment)
	}
	return nil
}
func (this *SavePaymentReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SavePaymentReq)
	if !ok {
		that2, ok := that.(SavePaymentReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Payment.Equal(that1.Payment) {
		return false
	}
	return true
}
func (this *SavePaymentResp) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SavePaymentResp)
	if !ok {
		that2, ok := that.(SavePaymentResp)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SavePaymentResp")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SavePaymentResp but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SavePaymentResp but is not nil && this == nil")
	}
	if this.Code != that1.Code {
		return fmt.Errorf("Code this(%v) Not Equal that(%v)", this.Code, that1.Code)
	}
	if this.Message != that1.Message {
		return fmt.Errorf("Message this(%v) Not Equal that(%v)", this.Message, that1.Message)
	}
	return nil
}
func (this *SavePaymentResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SavePaymentResp)
	if !ok {
		that2, ok := that.(SavePaymentResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	return true
}
func (this *SelectAllSaleBillReq) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SelectAllSaleBillReq)
	if !ok {
		that2, ok := that.(SelectAllSaleBillReq)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SelectAllSaleBillReq")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SelectAllSaleBillReq but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SelectAllSaleBillReq but is not nil && this == nil")
	}
	return nil
}
func (this *SelectAllSaleBillReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SelectAllSaleBillReq)
	if !ok {
		that2, ok := that.(SelectAllSaleBillReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SelectAllSaleBillResp) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SelectAllSaleBillResp)
	if !ok {
		that2, ok := that.(SelectAllSaleBillResp)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SelectAllSaleBillResp")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SelectAllSaleBillResp but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SelectAllSaleBillResp but is not nil && this == nil")
	}
	if this.Code != that1.Code {
		return fmt.Errorf("Code this(%v) Not Equal that(%v)", this.Code, that1.Code)
	}
	if this.Message != that1.Message {
		return fmt.Errorf("Message this(%v) Not Equal that(%v)", this.Message, that1.Message)
	}
	if len(this.SaleBills) != len(that1.SaleBills) {
		return fmt.Errorf("SaleBills this(%v) Not Equal that(%v)", len(this.SaleBills), len(that1.SaleBills))
	}
	for i := range this.SaleBills {
		if !this.SaleBills[i].Equal(that1.SaleBills[i]) {
			return fmt.Errorf("SaleBills this[%v](%v) Not Equal that[%v](%v)", i, this.SaleBills[i], i, that1.SaleBills[i])
		}
	}
	return nil
}
func (this *SelectAllSaleBillResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SelectAllSaleBillResp)
	if !ok {
		that2, ok := that.(SelectAllSaleBillResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	if len(this.SaleBills) != len(that1.SaleBills) {
		return false
	}
	for i := range this.SaleBills {
		if !this.SaleBills[i].Equal(that1.SaleBills[i]) {
			return false
		}
	}
	return true
}
func (this *SelectSaleBillByIDReq) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SelectSaleBillByIDReq)
	if !ok {
		that2, ok := that.(SelectSaleBillByIDReq)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SelectSaleBillByIDReq")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SelectSaleBillByIDReq but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SelectSaleBillByIDReq but is not nil && this == nil")
	}
	if this.SaleBillID != that1.SaleBillID {
		return fmt.Errorf("SaleBillID this(%v) Not Equal that(%v)", this.SaleBillID, that1.SaleBillID)
	}
	return nil
}
func (this *SelectSaleBillByIDReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SelectSaleBillByIDReq)
	if !ok {
		that2, ok := that.(SelectSaleBillByIDReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SaleBillID != that1.SaleBillID {
		return false
	}
	return true
}
func (this *SelectSaleBillByIDResp) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SelectSaleBillByIDResp)
	if !ok {
		that2, ok := that.(SelectSaleBillByIDResp)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SelectSaleBillByIDResp")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SelectSaleBillByIDResp but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SelectSaleBillByIDResp but is not nil && this == nil")
	}
	if this.Code != that1.Code {
		return fmt.Errorf("Code this(%v) Not Equal that(%v)", this.Code, that1.Code)
	}
	if this.Message != that1.Message {
		return fmt.Errorf("Message this(%v) Not Equal that(%v)", this.Message, that1.Message)
	}
	if !this.SaleBill.Equal(that1.SaleBill) {
		return fmt.Errorf("SaleBill this(%v) Not Equal that(%v)", this.SaleBill, that1.SaleBill)
	}
	return nil
}
func (this *SelectSaleBillByIDResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SelectSaleBillByIDResp)
	if !ok {
		that2, ok := that.(SelectSaleBillByIDResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	if !this.SaleBill.Equal(that1.SaleBill) {
		return false
	}
	return true
}
func (this *SaveSaleBillReq) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SaveSaleBillReq)
	if !ok {
		that2, ok := that.(SaveSaleBillReq)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SaveSaleBillReq")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SaveSaleBillReq but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SaveSaleBillReq but is not nil && this == nil")
	}
	if !this.SaleBill.Equal(that1.SaleBill) {
		return fmt.Errorf("SaleBill this(%v) Not Equal that(%v)", this.SaleBill, that1.SaleBill)
	}
	return nil
}
func (this *SaveSaleBillReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SaveSaleBillReq)
	if !ok {
		that2, ok := that.(SaveSaleBillReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SaleBill.Equal(that1.SaleBill) {
		return false
	}
	return true
}
func (this *SaveSaleBillResp) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SaveSaleBillResp)
	if !ok {
		that2, ok := that.(SaveSaleBillResp)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SaveSaleBillResp")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SaveSaleBillResp but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SaveSaleBillResp but is not nil && this == nil")
	}
	if this.Code != that1.Code {
		return fmt.Errorf("Code this(%v) Not Equal that(%v)", this.Code, that1.Code)
	}
	if this.Message != that1.Message {
		return fmt.Errorf("Message this(%v) Not Equal that(%v)", this.Message, that1.Message)
	}
	return nil
}
func (this *SaveSaleBillResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SaveSaleBillResp)
	if !ok {
		that2, ok := that.(SaveSaleBillResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	return true
}
func (this *DeleteSaleBillReq) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*DeleteSaleBillReq)
	if !ok {
		that2, ok := that.(DeleteSaleBillReq)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *DeleteSaleBillReq")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *DeleteSaleBillReq but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *DeleteSaleBillReq but is not nil && this == nil")
	}
	if this.SaleBillID != that1.SaleBillID {
		return fmt.Errorf("SaleBillID this(%v) Not Equal that(%v)", this.SaleBillID, that1.SaleBillID)
	}
	return nil
}
func (this *DeleteSaleBillReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteSaleBillReq)
	if !ok {
		that2, ok := that.(DeleteSaleBillReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SaleBillID != that1.SaleBillID {
		return false
	}
	return true
}
func (this *DeleteSaleBillResp) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*DeleteSaleBillResp)
	if !ok {
		that2, ok := that.(DeleteSaleBillResp)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *DeleteSaleBillResp")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *DeleteSaleBillResp but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *DeleteSaleBillResp but is not nil && this == nil")
	}
	if this.Code != that1.Code {
		return fmt.Errorf("Code this(%v) Not Equal that(%v)", this.Code, that1.Code)
	}
	if this.Message != that1.Message {
		return fmt.Errorf("Message this(%v) Not Equal that(%v)", this.Message, that1.Message)
	}
	return nil
}
func (this *DeleteSaleBillResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteSaleBillResp)
	if !ok {
		that2, ok := that.(DeleteSaleBillResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	return true
}
func (this *Doc) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&docmanagerModel.Doc{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "CategoryId: "+fmt.Sprintf("%#v", this.CategoryId)+",\n")
	if this.CreatedAt != nil {
		s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	}
	if this.UpdatedAt != nil {
		s = append(s, "UpdatedAt: "+fmt.Sprintf("%#v", this.UpdatedAt)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DocVersion) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&docmanagerModel.DocVersion{")
	s = append(s, "DocVer: "+fmt.Sprintf("%#v", this.DocVer)+",\n")
	s = append(s, "DocID: "+fmt.Sprintf("%#v", this.DocID)+",\n")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "Price: "+fmt.Sprintf("%#v", this.Price)+",\n")
	s = append(s, "DocDescription: "+fmt.Sprintf("%#v", this.DocDescription)+",\n")
	s = append(s, "Publisher: "+fmt.Sprintf("%#v", this.Publisher)+",\n")
	if this.CreatedAt != nil {
		s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	}
	if this.UpdatedAt != nil {
		s = append(s, "UpdatedAt: "+fmt.Sprintf("%#v", this.UpdatedAt)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Barcode) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&docmanagerModel.Barcode{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "SaleBillID: "+fmt.Sprintf("%#v", this.SaleBillID)+",\n")
	s = append(s, "DocVerID: "+fmt.Sprintf("%#v", this.DocVerID)+",\n")
	if this.CreatedAt != nil {
		s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	}
	if this.UpdatedAt != nil {
		s = append(s, "UpdatedAt: "+fmt.Sprintf("%#v", this.UpdatedAt)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Payment) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&docmanagerModel.Payment{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "LibrarianID: "+fmt.Sprintf("%#v", this.LibrarianID)+",\n")
	s = append(s, "BorrowFormID: "+fmt.Sprintf("%#v", this.BorrowFormID)+",\n")
	s = append(s, "Fine: "+fmt.Sprintf("%#v", this.Fine)+",\n")
	s = append(s, "ReaderID: "+fmt.Sprintf("%#v", this.ReaderID)+",\n")
	s = append(s, "BarcodeID: "+fmt.Sprintf("%#v", this.BarcodeID)+",\n")
	s = append(s, "BarcodeStatus: "+fmt.Sprintf("%#v", this.BarcodeStatus)+",\n")
	s = append(s, "Money: "+fmt.Sprintf("%#v", this.Money)+",\n")
	if this.CreatedAt != nil {
		s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	}
	if this.UpdatedAt != nil {
		s = append(s, "UpdatedAt: "+fmt.Sprintf("%#v", this.UpdatedAt)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BorrowForm) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&docmanagerModel.BorrowForm{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "LibrarianID: "+fmt.Sprintf("%#v", this.LibrarianID)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "ReaderID: "+fmt.Sprintf("%#v", this.ReaderID)+",\n")
	s = append(s, "BarcodeID: "+fmt.Sprintf("%#v", this.BarcodeID)+",\n")
	if this.StartTime != nil {
		s = append(s, "StartTime: "+fmt.Sprintf("%#v", this.StartTime)+",\n")
	}
	if this.EndTime != nil {
		s = append(s, "EndTime: "+fmt.Sprintf("%#v", this.EndTime)+",\n")
	}
	if this.CreatedAt != nil {
		s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	}
	if this.UpdatedAt != nil {
		s = append(s, "UpdatedAt: "+fmt.Sprintf("%#v", this.UpdatedAt)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SaleBill) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&docmanagerModel.SaleBill{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "LibrarianID: "+fmt.Sprintf("%#v", this.LibrarianID)+",\n")
	s = append(s, "BarcodeID: "+fmt.Sprintf("%#v", this.BarcodeID)+",\n")
	s = append(s, "Price: "+fmt.Sprintf("%#v", this.Price)+",\n")
	if this.CreatedAt != nil {
		s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SelectAllBarcodeReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&docmanagerModel.SelectAllBarcodeReq{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SelectAllBarcodeResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&docmanagerModel.SelectAllBarcodeResp{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	if this.Barcodes != nil {
		s = append(s, "Barcodes: "+fmt.Sprintf("%#v", this.Barcodes)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SelectAllAvailableBarcodeReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&docmanagerModel.SelectAllAvailableBarcodeReq{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SelectAllAvailableBarcodeResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&docmanagerModel.SelectAllAvailableBarcodeResp{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	if this.Barcodes != nil {
		s = append(s, "Barcodes: "+fmt.Sprintf("%#v", this.Barcodes)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SelectAllSellingBarcodeReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&docmanagerModel.SelectAllSellingBarcodeReq{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SelectAllSellingBarcodeResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&docmanagerModel.SelectAllSellingBarcodeResp{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	if this.Barcodes != nil {
		s = append(s, "Barcodes: "+fmt.Sprintf("%#v", this.Barcodes)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SelectAllDamageBarcodeReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&docmanagerModel.SelectAllDamageBarcodeReq{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SelectAllDamageBarcodeResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&docmanagerModel.SelectAllDamageBarcodeResp{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	if this.Barcodes != nil {
		s = append(s, "Barcodes: "+fmt.Sprintf("%#v", this.Barcodes)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SelectAllBarcodeByDocVerIDReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&docmanagerModel.SelectAllBarcodeByDocVerIDReq{")
	s = append(s, "DocVerID: "+fmt.Sprintf("%#v", this.DocVerID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SelectAllBarcodeByDocVerIDResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&docmanagerModel.SelectAllBarcodeByDocVerIDResp{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	if this.Barcode != nil {
		s = append(s, "Barcode: "+fmt.Sprintf("%#v", this.Barcode)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SelectBarcodeByIDReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&docmanagerModel.SelectBarcodeByIDReq{")
	s = append(s, "BarcodeID: "+fmt.Sprintf("%#v", this.BarcodeID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SelectBarcodeByIDResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&docmanagerModel.SelectBarcodeByIDResp{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	if this.Barcode != nil {
		s = append(s, "Barcode: "+fmt.Sprintf("%#v", this.Barcode)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SaveBarcodeReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&docmanagerModel.SaveBarcodeReq{")
	if this.Barcode != nil {
		s = append(s, "Barcode: "+fmt.Sprintf("%#v", this.Barcode)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SaveBarcodeResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&docmanagerModel.SaveBarcodeResp{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateBarcodeReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&docmanagerModel.UpdateBarcodeReq{")
	if this.Barcode != nil {
		s = append(s, "Barcode: "+fmt.Sprintf("%#v", this.Barcode)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateBarcodeResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&docmanagerModel.UpdateBarcodeResp{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteBarcodeReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&docmanagerModel.DeleteBarcodeReq{")
	s = append(s, "BarcodeID: "+fmt.Sprintf("%#v", this.BarcodeID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteBarcodeResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&docmanagerModel.DeleteBarcodeResp{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SelectAllBorrowFormReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&docmanagerModel.SelectAllBorrowFormReq{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SelectAllBorrowFormResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&docmanagerModel.SelectAllBorrowFormResp{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	if this.BorrowForms != nil {
		s = append(s, "BorrowForms: "+fmt.Sprintf("%#v", this.BorrowForms)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SelectAllUnReturnBorrowFormReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&docmanagerModel.SelectAllUnReturnBorrowFormReq{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SelectAllUnReturnBorrowFormResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&docmanagerModel.SelectAllUnReturnBorrowFormResp{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	if this.BorrowForms != nil {
		s = append(s, "BorrowForms: "+fmt.Sprintf("%#v", this.BorrowForms)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SelectBorrowFormByIDReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&docmanagerModel.SelectBorrowFormByIDReq{")
	s = append(s, "BorrowFormID: "+fmt.Sprintf("%#v", this.BorrowFormID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SelectBorrowFormByIDResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&docmanagerModel.SelectBorrowFormByIDResp{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	if this.Borrowform != nil {
		s = append(s, "Borrowform: "+fmt.Sprintf("%#v", this.Borrowform)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SaveBorrowFormReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&docmanagerModel.SaveBorrowFormReq{")
	if this.Borrowform != nil {
		s = append(s, "Borrowform: "+fmt.Sprintf("%#v", this.Borrowform)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SaveBorrowFormResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&docmanagerModel.SaveBorrowFormResp{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateBorrowFormStatusReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&docmanagerModel.UpdateBorrowFormStatusReq{")
	s = append(s, "BorrowFormID: "+fmt.Sprintf("%#v", this.BorrowFormID)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateBorrowFormStatusResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&docmanagerModel.UpdateBorrowFormStatusResp{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteBorrowFormReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&docmanagerModel.DeleteBorrowFormReq{")
	s = append(s, "BorrowFormID: "+fmt.Sprintf("%#v", this.BorrowFormID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteBorrowFormResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&docmanagerModel.DeleteBorrowFormResp{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SelectAllPaymentReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&docmanagerModel.SelectAllPaymentReq{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SelectAllPaymentResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&docmanagerModel.SelectAllPaymentResp{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	if this.Payments != nil {
		s = append(s, "Payments: "+fmt.Sprintf("%#v", this.Payments)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SelectPaymentByIDReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&docmanagerModel.SelectPaymentByIDReq{")
	s = append(s, "PaymentID: "+fmt.Sprintf("%#v", this.PaymentID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SelectPaymentByIDResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&docmanagerModel.SelectPaymentByIDResp{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	if this.Payment != nil {
		s = append(s, "Payment: "+fmt.Sprintf("%#v", this.Payment)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SelectPaymentByBorrowFormIDReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&docmanagerModel.SelectPaymentByBorrowFormIDReq{")
	s = append(s, "BorrowFormID: "+fmt.Sprintf("%#v", this.BorrowFormID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SelectPaymentByBorrowFormIDResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&docmanagerModel.SelectPaymentByBorrowFormIDResp{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	if this.Payment != nil {
		s = append(s, "Payment: "+fmt.Sprintf("%#v", this.Payment)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SelectPaymentWithFineReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&docmanagerModel.SelectPaymentWithFineReq{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SelectPaymentWithFineResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&docmanagerModel.SelectPaymentWithFineResp{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	if this.Payment != nil {
		s = append(s, "Payment: "+fmt.Sprintf("%#v", this.Payment)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SavePaymentReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&docmanagerModel.SavePaymentReq{")
	if this.Payment != nil {
		s = append(s, "Payment: "+fmt.Sprintf("%#v", this.Payment)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SavePaymentResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&docmanagerModel.SavePaymentResp{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SelectAllSaleBillReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&docmanagerModel.SelectAllSaleBillReq{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SelectAllSaleBillResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&docmanagerModel.SelectAllSaleBillResp{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	if this.SaleBills != nil {
		s = append(s, "SaleBills: "+fmt.Sprintf("%#v", this.SaleBills)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SelectSaleBillByIDReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&docmanagerModel.SelectSaleBillByIDReq{")
	s = append(s, "SaleBillID: "+fmt.Sprintf("%#v", this.SaleBillID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SelectSaleBillByIDResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&docmanagerModel.SelectSaleBillByIDResp{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	if this.SaleBill != nil {
		s = append(s, "SaleBill: "+fmt.Sprintf("%#v", this.SaleBill)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SaveSaleBillReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&docmanagerModel.SaveSaleBillReq{")
	if this.SaleBill != nil {
		s = append(s, "SaleBill: "+fmt.Sprintf("%#v", this.SaleBill)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SaveSaleBillResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&docmanagerModel.SaveSaleBillResp{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteSaleBillReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&docmanagerModel.DeleteSaleBillReq{")
	s = append(s, "SaleBillID: "+fmt.Sprintf("%#v", this.SaleBillID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteSaleBillResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&docmanagerModel.DeleteSaleBillResp{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringDocmanager(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DocmanagerClient is the client API for Docmanager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DocmanagerClient interface {
	SelectAllBarcode(ctx context.Context, in *SelectAllBarcodeReq, opts ...grpc.CallOption) (*SelectAllBarcodeResp, error)
	SelectAllAvailableBarcode(ctx context.Context, in *SelectAllAvailableBarcodeReq, opts ...grpc.CallOption) (*SelectAllAvailableBarcodeResp, error)
	SelectAllSellingBarcode(ctx context.Context, in *SelectAllSellingBarcodeReq, opts ...grpc.CallOption) (*SelectAllSellingBarcodeResp, error)
	SelectAllDamageBarcode(ctx context.Context, in *SelectAllDamageBarcodeReq, opts ...grpc.CallOption) (*SelectAllDamageBarcodeResp, error)
	SelectAllBarcodeByDocVerID(ctx context.Context, in *SelectAllBarcodeByDocVerIDReq, opts ...grpc.CallOption) (*SelectAllBarcodeByDocVerIDResp, error)
	SelectBarcodeByID(ctx context.Context, in *SelectBarcodeByIDReq, opts ...grpc.CallOption) (*SelectBarcodeByIDResp, error)
	SaveBarcode(ctx context.Context, in *SaveBarcodeReq, opts ...grpc.CallOption) (*SaveBarcodeResp, error)
	UpdateBarcode(ctx context.Context, in *UpdateBarcodeReq, opts ...grpc.CallOption) (*UpdateBarcodeResp, error)
	DeleteBarcode(ctx context.Context, in *DeleteBarcodeReq, opts ...grpc.CallOption) (*DeleteBarcodeResp, error)
	SelectAllBorrowForm(ctx context.Context, in *SelectAllBorrowFormReq, opts ...grpc.CallOption) (*SelectAllBorrowFormResp, error)
	SelectAllUnReturnBorrowForm(ctx context.Context, in *SelectAllUnReturnBorrowFormReq, opts ...grpc.CallOption) (*SelectAllUnReturnBorrowFormResp, error)
	SelectBorrowFormByID(ctx context.Context, in *SelectBorrowFormByIDReq, opts ...grpc.CallOption) (*SelectBorrowFormByIDResp, error)
	UpdateBorrowFormStatus(ctx context.Context, in *UpdateBorrowFormStatusReq, opts ...grpc.CallOption) (*UpdateBorrowFormStatusResp, error)
	SaveBorrowForm(ctx context.Context, in *SaveBorrowFormReq, opts ...grpc.CallOption) (*SaveBorrowFormResp, error)
	SelectAllPayment(ctx context.Context, in *SelectAllPaymentReq, opts ...grpc.CallOption) (*SelectAllPaymentResp, error)
	SelectPaymentByID(ctx context.Context, in *SelectPaymentByIDReq, opts ...grpc.CallOption) (*SelectPaymentByIDResp, error)
	SelectPaymentByBorrowFormID(ctx context.Context, in *SelectPaymentByBorrowFormIDReq, opts ...grpc.CallOption) (*SelectPaymentByBorrowFormIDResp, error)
	SelectPaymentWithFine(ctx context.Context, in *SelectPaymentWithFineReq, opts ...grpc.CallOption) (*SelectPaymentWithFineResp, error)
	SavePayment(ctx context.Context, in *SavePaymentReq, opts ...grpc.CallOption) (*SavePaymentResp, error)
	SelectAllSaleBill(ctx context.Context, in *SelectAllSaleBillReq, opts ...grpc.CallOption) (*SelectAllSaleBillResp, error)
	SelectSaleBillByID(ctx context.Context, in *SelectSaleBillByIDReq, opts ...grpc.CallOption) (*SelectSaleBillByIDResp, error)
	SaveSaleBill(ctx context.Context, in *SaveSaleBillReq, opts ...grpc.CallOption) (*SaveSaleBillResp, error)
}

type docmanagerClient struct {
	cc *grpc.ClientConn
}

func NewDocmanagerClient(cc *grpc.ClientConn) DocmanagerClient {
	return &docmanagerClient{cc}
}

func (c *docmanagerClient) SelectAllBarcode(ctx context.Context, in *SelectAllBarcodeReq, opts ...grpc.CallOption) (*SelectAllBarcodeResp, error) {
	out := new(SelectAllBarcodeResp)
	err := c.cc.Invoke(ctx, "/model.Docmanager/SelectAllBarcode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docmanagerClient) SelectAllAvailableBarcode(ctx context.Context, in *SelectAllAvailableBarcodeReq, opts ...grpc.CallOption) (*SelectAllAvailableBarcodeResp, error) {
	out := new(SelectAllAvailableBarcodeResp)
	err := c.cc.Invoke(ctx, "/model.Docmanager/SelectAllAvailableBarcode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docmanagerClient) SelectAllSellingBarcode(ctx context.Context, in *SelectAllSellingBarcodeReq, opts ...grpc.CallOption) (*SelectAllSellingBarcodeResp, error) {
	out := new(SelectAllSellingBarcodeResp)
	err := c.cc.Invoke(ctx, "/model.Docmanager/SelectAllSellingBarcode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docmanagerClient) SelectAllDamageBarcode(ctx context.Context, in *SelectAllDamageBarcodeReq, opts ...grpc.CallOption) (*SelectAllDamageBarcodeResp, error) {
	out := new(SelectAllDamageBarcodeResp)
	err := c.cc.Invoke(ctx, "/model.Docmanager/SelectAllDamageBarcode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docmanagerClient) SelectAllBarcodeByDocVerID(ctx context.Context, in *SelectAllBarcodeByDocVerIDReq, opts ...grpc.CallOption) (*SelectAllBarcodeByDocVerIDResp, error) {
	out := new(SelectAllBarcodeByDocVerIDResp)
	err := c.cc.Invoke(ctx, "/model.Docmanager/SelectAllBarcodeByDocVerID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docmanagerClient) SelectBarcodeByID(ctx context.Context, in *SelectBarcodeByIDReq, opts ...grpc.CallOption) (*SelectBarcodeByIDResp, error) {
	out := new(SelectBarcodeByIDResp)
	err := c.cc.Invoke(ctx, "/model.Docmanager/SelectBarcodeByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docmanagerClient) SaveBarcode(ctx context.Context, in *SaveBarcodeReq, opts ...grpc.CallOption) (*SaveBarcodeResp, error) {
	out := new(SaveBarcodeResp)
	err := c.cc.Invoke(ctx, "/model.Docmanager/SaveBarcode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docmanagerClient) UpdateBarcode(ctx context.Context, in *UpdateBarcodeReq, opts ...grpc.CallOption) (*UpdateBarcodeResp, error) {
	out := new(UpdateBarcodeResp)
	err := c.cc.Invoke(ctx, "/model.Docmanager/UpdateBarcode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docmanagerClient) DeleteBarcode(ctx context.Context, in *DeleteBarcodeReq, opts ...grpc.CallOption) (*DeleteBarcodeResp, error) {
	out := new(DeleteBarcodeResp)
	err := c.cc.Invoke(ctx, "/model.Docmanager/DeleteBarcode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docmanagerClient) SelectAllBorrowForm(ctx context.Context, in *SelectAllBorrowFormReq, opts ...grpc.CallOption) (*SelectAllBorrowFormResp, error) {
	out := new(SelectAllBorrowFormResp)
	err := c.cc.Invoke(ctx, "/model.Docmanager/SelectAllBorrowForm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docmanagerClient) SelectAllUnReturnBorrowForm(ctx context.Context, in *SelectAllUnReturnBorrowFormReq, opts ...grpc.CallOption) (*SelectAllUnReturnBorrowFormResp, error) {
	out := new(SelectAllUnReturnBorrowFormResp)
	err := c.cc.Invoke(ctx, "/model.Docmanager/SelectAllUnReturnBorrowForm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docmanagerClient) SelectBorrowFormByID(ctx context.Context, in *SelectBorrowFormByIDReq, opts ...grpc.CallOption) (*SelectBorrowFormByIDResp, error) {
	out := new(SelectBorrowFormByIDResp)
	err := c.cc.Invoke(ctx, "/model.Docmanager/SelectBorrowFormByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docmanagerClient) UpdateBorrowFormStatus(ctx context.Context, in *UpdateBorrowFormStatusReq, opts ...grpc.CallOption) (*UpdateBorrowFormStatusResp, error) {
	out := new(UpdateBorrowFormStatusResp)
	err := c.cc.Invoke(ctx, "/model.Docmanager/UpdateBorrowFormStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docmanagerClient) SaveBorrowForm(ctx context.Context, in *SaveBorrowFormReq, opts ...grpc.CallOption) (*SaveBorrowFormResp, error) {
	out := new(SaveBorrowFormResp)
	err := c.cc.Invoke(ctx, "/model.Docmanager/SaveBorrowForm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docmanagerClient) SelectAllPayment(ctx context.Context, in *SelectAllPaymentReq, opts ...grpc.CallOption) (*SelectAllPaymentResp, error) {
	out := new(SelectAllPaymentResp)
	err := c.cc.Invoke(ctx, "/model.Docmanager/SelectAllPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docmanagerClient) SelectPaymentByID(ctx context.Context, in *SelectPaymentByIDReq, opts ...grpc.CallOption) (*SelectPaymentByIDResp, error) {
	out := new(SelectPaymentByIDResp)
	err := c.cc.Invoke(ctx, "/model.Docmanager/SelectPaymentByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docmanagerClient) SelectPaymentByBorrowFormID(ctx context.Context, in *SelectPaymentByBorrowFormIDReq, opts ...grpc.CallOption) (*SelectPaymentByBorrowFormIDResp, error) {
	out := new(SelectPaymentByBorrowFormIDResp)
	err := c.cc.Invoke(ctx, "/model.Docmanager/SelectPaymentByBorrowFormID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docmanagerClient) SelectPaymentWithFine(ctx context.Context, in *SelectPaymentWithFineReq, opts ...grpc.CallOption) (*SelectPaymentWithFineResp, error) {
	out := new(SelectPaymentWithFineResp)
	err := c.cc.Invoke(ctx, "/model.Docmanager/SelectPaymentWithFine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docmanagerClient) SavePayment(ctx context.Context, in *SavePaymentReq, opts ...grpc.CallOption) (*SavePaymentResp, error) {
	out := new(SavePaymentResp)
	err := c.cc.Invoke(ctx, "/model.Docmanager/SavePayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docmanagerClient) SelectAllSaleBill(ctx context.Context, in *SelectAllSaleBillReq, opts ...grpc.CallOption) (*SelectAllSaleBillResp, error) {
	out := new(SelectAllSaleBillResp)
	err := c.cc.Invoke(ctx, "/model.Docmanager/SelectAllSaleBill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docmanagerClient) SelectSaleBillByID(ctx context.Context, in *SelectSaleBillByIDReq, opts ...grpc.CallOption) (*SelectSaleBillByIDResp, error) {
	out := new(SelectSaleBillByIDResp)
	err := c.cc.Invoke(ctx, "/model.Docmanager/SelectSaleBillByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docmanagerClient) SaveSaleBill(ctx context.Context, in *SaveSaleBillReq, opts ...grpc.CallOption) (*SaveSaleBillResp, error) {
	out := new(SaveSaleBillResp)
	err := c.cc.Invoke(ctx, "/model.Docmanager/SaveSaleBill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DocmanagerServer is the server API for Docmanager service.
type DocmanagerServer interface {
	SelectAllBarcode(context.Context, *SelectAllBarcodeReq) (*SelectAllBarcodeResp, error)
	SelectAllAvailableBarcode(context.Context, *SelectAllAvailableBarcodeReq) (*SelectAllAvailableBarcodeResp, error)
	SelectAllSellingBarcode(context.Context, *SelectAllSellingBarcodeReq) (*SelectAllSellingBarcodeResp, error)
	SelectAllDamageBarcode(context.Context, *SelectAllDamageBarcodeReq) (*SelectAllDamageBarcodeResp, error)
	SelectAllBarcodeByDocVerID(context.Context, *SelectAllBarcodeByDocVerIDReq) (*SelectAllBarcodeByDocVerIDResp, error)
	SelectBarcodeByID(context.Context, *SelectBarcodeByIDReq) (*SelectBarcodeByIDResp, error)
	SaveBarcode(context.Context, *SaveBarcodeReq) (*SaveBarcodeResp, error)
	UpdateBarcode(context.Context, *UpdateBarcodeReq) (*UpdateBarcodeResp, error)
	DeleteBarcode(context.Context, *DeleteBarcodeReq) (*DeleteBarcodeResp, error)
	SelectAllBorrowForm(context.Context, *SelectAllBorrowFormReq) (*SelectAllBorrowFormResp, error)
	SelectAllUnReturnBorrowForm(context.Context, *SelectAllUnReturnBorrowFormReq) (*SelectAllUnReturnBorrowFormResp, error)
	SelectBorrowFormByID(context.Context, *SelectBorrowFormByIDReq) (*SelectBorrowFormByIDResp, error)
	UpdateBorrowFormStatus(context.Context, *UpdateBorrowFormStatusReq) (*UpdateBorrowFormStatusResp, error)
	SaveBorrowForm(context.Context, *SaveBorrowFormReq) (*SaveBorrowFormResp, error)
	SelectAllPayment(context.Context, *SelectAllPaymentReq) (*SelectAllPaymentResp, error)
	SelectPaymentByID(context.Context, *SelectPaymentByIDReq) (*SelectPaymentByIDResp, error)
	SelectPaymentByBorrowFormID(context.Context, *SelectPaymentByBorrowFormIDReq) (*SelectPaymentByBorrowFormIDResp, error)
	SelectPaymentWithFine(context.Context, *SelectPaymentWithFineReq) (*SelectPaymentWithFineResp, error)
	SavePayment(context.Context, *SavePaymentReq) (*SavePaymentResp, error)
	SelectAllSaleBill(context.Context, *SelectAllSaleBillReq) (*SelectAllSaleBillResp, error)
	SelectSaleBillByID(context.Context, *SelectSaleBillByIDReq) (*SelectSaleBillByIDResp, error)
	SaveSaleBill(context.Context, *SaveSaleBillReq) (*SaveSaleBillResp, error)
}

// UnimplementedDocmanagerServer can be embedded to have forward compatible implementations.
type UnimplementedDocmanagerServer struct {
}

func (*UnimplementedDocmanagerServer) SelectAllBarcode(ctx context.Context, req *SelectAllBarcodeReq) (*SelectAllBarcodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectAllBarcode not implemented")
}
func (*UnimplementedDocmanagerServer) SelectAllAvailableBarcode(ctx context.Context, req *SelectAllAvailableBarcodeReq) (*SelectAllAvailableBarcodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectAllAvailableBarcode not implemented")
}
func (*UnimplementedDocmanagerServer) SelectAllSellingBarcode(ctx context.Context, req *SelectAllSellingBarcodeReq) (*SelectAllSellingBarcodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectAllSellingBarcode not implemented")
}
func (*UnimplementedDocmanagerServer) SelectAllDamageBarcode(ctx context.Context, req *SelectAllDamageBarcodeReq) (*SelectAllDamageBarcodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectAllDamageBarcode not implemented")
}
func (*UnimplementedDocmanagerServer) SelectAllBarcodeByDocVerID(ctx context.Context, req *SelectAllBarcodeByDocVerIDReq) (*SelectAllBarcodeByDocVerIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectAllBarcodeByDocVerID not implemented")
}
func (*UnimplementedDocmanagerServer) SelectBarcodeByID(ctx context.Context, req *SelectBarcodeByIDReq) (*SelectBarcodeByIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectBarcodeByID not implemented")
}
func (*UnimplementedDocmanagerServer) SaveBarcode(ctx context.Context, req *SaveBarcodeReq) (*SaveBarcodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveBarcode not implemented")
}
func (*UnimplementedDocmanagerServer) UpdateBarcode(ctx context.Context, req *UpdateBarcodeReq) (*UpdateBarcodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBarcode not implemented")
}
func (*UnimplementedDocmanagerServer) DeleteBarcode(ctx context.Context, req *DeleteBarcodeReq) (*DeleteBarcodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBarcode not implemented")
}
func (*UnimplementedDocmanagerServer) SelectAllBorrowForm(ctx context.Context, req *SelectAllBorrowFormReq) (*SelectAllBorrowFormResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectAllBorrowForm not implemented")
}
func (*UnimplementedDocmanagerServer) SelectAllUnReturnBorrowForm(ctx context.Context, req *SelectAllUnReturnBorrowFormReq) (*SelectAllUnReturnBorrowFormResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectAllUnReturnBorrowForm not implemented")
}
func (*UnimplementedDocmanagerServer) SelectBorrowFormByID(ctx context.Context, req *SelectBorrowFormByIDReq) (*SelectBorrowFormByIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectBorrowFormByID not implemented")
}
func (*UnimplementedDocmanagerServer) UpdateBorrowFormStatus(ctx context.Context, req *UpdateBorrowFormStatusReq) (*UpdateBorrowFormStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBorrowFormStatus not implemented")
}
func (*UnimplementedDocmanagerServer) SaveBorrowForm(ctx context.Context, req *SaveBorrowFormReq) (*SaveBorrowFormResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveBorrowForm not implemented")
}
func (*UnimplementedDocmanagerServer) SelectAllPayment(ctx context.Context, req *SelectAllPaymentReq) (*SelectAllPaymentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectAllPayment not implemented")
}
func (*UnimplementedDocmanagerServer) SelectPaymentByID(ctx context.Context, req *SelectPaymentByIDReq) (*SelectPaymentByIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectPaymentByID not implemented")
}
func (*UnimplementedDocmanagerServer) SelectPaymentByBorrowFormID(ctx context.Context, req *SelectPaymentByBorrowFormIDReq) (*SelectPaymentByBorrowFormIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectPaymentByBorrowFormID not implemented")
}
func (*UnimplementedDocmanagerServer) SelectPaymentWithFine(ctx context.Context, req *SelectPaymentWithFineReq) (*SelectPaymentWithFineResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectPaymentWithFine not implemented")
}
func (*UnimplementedDocmanagerServer) SavePayment(ctx context.Context, req *SavePaymentReq) (*SavePaymentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SavePayment not implemented")
}
func (*UnimplementedDocmanagerServer) SelectAllSaleBill(ctx context.Context, req *SelectAllSaleBillReq) (*SelectAllSaleBillResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectAllSaleBill not implemented")
}
func (*UnimplementedDocmanagerServer) SelectSaleBillByID(ctx context.Context, req *SelectSaleBillByIDReq) (*SelectSaleBillByIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectSaleBillByID not implemented")
}
func (*UnimplementedDocmanagerServer) SaveSaleBill(ctx context.Context, req *SaveSaleBillReq) (*SaveSaleBillResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveSaleBill not implemented")
}

func RegisterDocmanagerServer(s *grpc.Server, srv DocmanagerServer) {
	s.RegisterService(&_Docmanager_serviceDesc, srv)
}

func _Docmanager_SelectAllBarcode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectAllBarcodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocmanagerServer).SelectAllBarcode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.Docmanager/SelectAllBarcode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocmanagerServer).SelectAllBarcode(ctx, req.(*SelectAllBarcodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Docmanager_SelectAllAvailableBarcode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectAllAvailableBarcodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocmanagerServer).SelectAllAvailableBarcode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.Docmanager/SelectAllAvailableBarcode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocmanagerServer).SelectAllAvailableBarcode(ctx, req.(*SelectAllAvailableBarcodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Docmanager_SelectAllSellingBarcode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectAllSellingBarcodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocmanagerServer).SelectAllSellingBarcode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.Docmanager/SelectAllSellingBarcode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocmanagerServer).SelectAllSellingBarcode(ctx, req.(*SelectAllSellingBarcodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Docmanager_SelectAllDamageBarcode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectAllDamageBarcodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocmanagerServer).SelectAllDamageBarcode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.Docmanager/SelectAllDamageBarcode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocmanagerServer).SelectAllDamageBarcode(ctx, req.(*SelectAllDamageBarcodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Docmanager_SelectAllBarcodeByDocVerID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectAllBarcodeByDocVerIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocmanagerServer).SelectAllBarcodeByDocVerID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.Docmanager/SelectAllBarcodeByDocVerID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocmanagerServer).SelectAllBarcodeByDocVerID(ctx, req.(*SelectAllBarcodeByDocVerIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Docmanager_SelectBarcodeByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectBarcodeByIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocmanagerServer).SelectBarcodeByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.Docmanager/SelectBarcodeByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocmanagerServer).SelectBarcodeByID(ctx, req.(*SelectBarcodeByIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Docmanager_SaveBarcode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveBarcodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocmanagerServer).SaveBarcode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.Docmanager/SaveBarcode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocmanagerServer).SaveBarcode(ctx, req.(*SaveBarcodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Docmanager_UpdateBarcode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBarcodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocmanagerServer).UpdateBarcode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.Docmanager/UpdateBarcode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocmanagerServer).UpdateBarcode(ctx, req.(*UpdateBarcodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Docmanager_DeleteBarcode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBarcodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocmanagerServer).DeleteBarcode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.Docmanager/DeleteBarcode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocmanagerServer).DeleteBarcode(ctx, req.(*DeleteBarcodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Docmanager_SelectAllBorrowForm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectAllBorrowFormReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocmanagerServer).SelectAllBorrowForm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.Docmanager/SelectAllBorrowForm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocmanagerServer).SelectAllBorrowForm(ctx, req.(*SelectAllBorrowFormReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Docmanager_SelectAllUnReturnBorrowForm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectAllUnReturnBorrowFormReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocmanagerServer).SelectAllUnReturnBorrowForm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.Docmanager/SelectAllUnReturnBorrowForm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocmanagerServer).SelectAllUnReturnBorrowForm(ctx, req.(*SelectAllUnReturnBorrowFormReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Docmanager_SelectBorrowFormByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectBorrowFormByIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocmanagerServer).SelectBorrowFormByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.Docmanager/SelectBorrowFormByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocmanagerServer).SelectBorrowFormByID(ctx, req.(*SelectBorrowFormByIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Docmanager_UpdateBorrowFormStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBorrowFormStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocmanagerServer).UpdateBorrowFormStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.Docmanager/UpdateBorrowFormStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocmanagerServer).UpdateBorrowFormStatus(ctx, req.(*UpdateBorrowFormStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Docmanager_SaveBorrowForm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveBorrowFormReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocmanagerServer).SaveBorrowForm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.Docmanager/SaveBorrowForm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocmanagerServer).SaveBorrowForm(ctx, req.(*SaveBorrowFormReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Docmanager_SelectAllPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectAllPaymentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocmanagerServer).SelectAllPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.Docmanager/SelectAllPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocmanagerServer).SelectAllPayment(ctx, req.(*SelectAllPaymentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Docmanager_SelectPaymentByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectPaymentByIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocmanagerServer).SelectPaymentByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.Docmanager/SelectPaymentByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocmanagerServer).SelectPaymentByID(ctx, req.(*SelectPaymentByIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Docmanager_SelectPaymentByBorrowFormID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectPaymentByBorrowFormIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocmanagerServer).SelectPaymentByBorrowFormID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.Docmanager/SelectPaymentByBorrowFormID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocmanagerServer).SelectPaymentByBorrowFormID(ctx, req.(*SelectPaymentByBorrowFormIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Docmanager_SelectPaymentWithFine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectPaymentWithFineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocmanagerServer).SelectPaymentWithFine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.Docmanager/SelectPaymentWithFine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocmanagerServer).SelectPaymentWithFine(ctx, req.(*SelectPaymentWithFineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Docmanager_SavePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SavePaymentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocmanagerServer).SavePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.Docmanager/SavePayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocmanagerServer).SavePayment(ctx, req.(*SavePaymentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Docmanager_SelectAllSaleBill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectAllSaleBillReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocmanagerServer).SelectAllSaleBill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.Docmanager/SelectAllSaleBill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocmanagerServer).SelectAllSaleBill(ctx, req.(*SelectAllSaleBillReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Docmanager_SelectSaleBillByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectSaleBillByIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocmanagerServer).SelectSaleBillByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.Docmanager/SelectSaleBillByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocmanagerServer).SelectSaleBillByID(ctx, req.(*SelectSaleBillByIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Docmanager_SaveSaleBill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveSaleBillReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocmanagerServer).SaveSaleBill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.Docmanager/SaveSaleBill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocmanagerServer).SaveSaleBill(ctx, req.(*SaveSaleBillReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Docmanager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "model.Docmanager",
	HandlerType: (*DocmanagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SelectAllBarcode",
			Handler:    _Docmanager_SelectAllBarcode_Handler,
		},
		{
			MethodName: "SelectAllAvailableBarcode",
			Handler:    _Docmanager_SelectAllAvailableBarcode_Handler,
		},
		{
			MethodName: "SelectAllSellingBarcode",
			Handler:    _Docmanager_SelectAllSellingBarcode_Handler,
		},
		{
			MethodName: "SelectAllDamageBarcode",
			Handler:    _Docmanager_SelectAllDamageBarcode_Handler,
		},
		{
			MethodName: "SelectAllBarcodeByDocVerID",
			Handler:    _Docmanager_SelectAllBarcodeByDocVerID_Handler,
		},
		{
			MethodName: "SelectBarcodeByID",
			Handler:    _Docmanager_SelectBarcodeByID_Handler,
		},
		{
			MethodName: "SaveBarcode",
			Handler:    _Docmanager_SaveBarcode_Handler,
		},
		{
			MethodName: "UpdateBarcode",
			Handler:    _Docmanager_UpdateBarcode_Handler,
		},
		{
			MethodName: "DeleteBarcode",
			Handler:    _Docmanager_DeleteBarcode_Handler,
		},
		{
			MethodName: "SelectAllBorrowForm",
			Handler:    _Docmanager_SelectAllBorrowForm_Handler,
		},
		{
			MethodName: "SelectAllUnReturnBorrowForm",
			Handler:    _Docmanager_SelectAllUnReturnBorrowForm_Handler,
		},
		{
			MethodName: "SelectBorrowFormByID",
			Handler:    _Docmanager_SelectBorrowFormByID_Handler,
		},
		{
			MethodName: "UpdateBorrowFormStatus",
			Handler:    _Docmanager_UpdateBorrowFormStatus_Handler,
		},
		{
			MethodName: "SaveBorrowForm",
			Handler:    _Docmanager_SaveBorrowForm_Handler,
		},
		{
			MethodName: "SelectAllPayment",
			Handler:    _Docmanager_SelectAllPayment_Handler,
		},
		{
			MethodName: "SelectPaymentByID",
			Handler:    _Docmanager_SelectPaymentByID_Handler,
		},
		{
			MethodName: "SelectPaymentByBorrowFormID",
			Handler:    _Docmanager_SelectPaymentByBorrowFormID_Handler,
		},
		{
			MethodName: "SelectPaymentWithFine",
			Handler:    _Docmanager_SelectPaymentWithFine_Handler,
		},
		{
			MethodName: "SavePayment",
			Handler:    _Docmanager_SavePayment_Handler,
		},
		{
			MethodName: "SelectAllSaleBill",
			Handler:    _Docmanager_SelectAllSaleBill_Handler,
		},
		{
			MethodName: "SelectSaleBillByID",
			Handler:    _Docmanager_SelectSaleBillByID_Handler,
		},
		{
			MethodName: "SaveSaleBill",
			Handler:    _Docmanager_SaveSaleBill_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/pinezapple/LibraryProject20201/skeleton/model/docmanager.proto",
}

func (m *Doc) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Doc) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Doc) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdatedAt != nil {
		{
			size, err := m.UpdatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDocmanager(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDocmanager(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.CategoryId != 0 {
		i = encodeVarintDocmanager(dAtA, i, uint64(m.CategoryId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintDocmanager(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintDocmanager(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DocVersion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DocVersion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DocVersion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdatedAt != nil {
		{
			size, err := m.UpdatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDocmanager(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDocmanager(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Publisher) > 0 {
		i -= len(m.Publisher)
		copy(dAtA[i:], m.Publisher)
		i = encodeVarintDocmanager(dAtA, i, uint64(len(m.Publisher)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.DocDescription) > 0 {
		i -= len(m.DocDescription)
		copy(dAtA[i:], m.DocDescription)
		i = encodeVarintDocmanager(dAtA, i, uint64(len(m.DocDescription)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Price != 0 {
		i = encodeVarintDocmanager(dAtA, i, uint64(m.Price))
		i--
		dAtA[i] = 0x20
	}
	if m.Version != 0 {
		i = encodeVarintDocmanager(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x18
	}
	if m.DocID != 0 {
		i = encodeVarintDocmanager(dAtA, i, uint64(m.DocID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.DocVer) > 0 {
		i -= len(m.DocVer)
		copy(dAtA[i:], m.DocVer)
		i = encodeVarintDocmanager(dAtA, i, uint64(len(m.DocVer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Barcode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Barcode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Barcode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdatedAt != nil {
		{
			size, err := m.UpdatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDocmanager(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDocmanager(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.DocVerID != 0 {
		i = encodeVarintDocmanager(dAtA, i, uint64(m.DocVerID))
		i--
		dAtA[i] = 0x28
	}
	if m.SaleBillID != 0 {
		i = encodeVarintDocmanager(dAtA, i, uint64(m.SaleBillID))
		i--
		dAtA[i] = 0x20
	}
	if m.Status != 0 {
		i = encodeVarintDocmanager(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintDocmanager(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Payment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Payment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Payment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdatedAt != nil {
		{
			size, err := m.UpdatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDocmanager(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDocmanager(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if len(m.Money) > 0 {
		dAtA10 := make([]byte, len(m.Money)*10)
		var j9 int
		for _, num := range m.Money {
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		i -= j9
		copy(dAtA[i:], dAtA10[:j9])
		i = encodeVarintDocmanager(dAtA, i, uint64(j9))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.BarcodeStatus) > 0 {
		dAtA12 := make([]byte, len(m.BarcodeStatus)*10)
		var j11 int
		for _, num := range m.BarcodeStatus {
			for num >= 1<<7 {
				dAtA12[j11] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j11++
			}
			dAtA12[j11] = uint8(num)
			j11++
		}
		i -= j11
		copy(dAtA[i:], dAtA12[:j11])
		i = encodeVarintDocmanager(dAtA, i, uint64(j11))
		i--
		dAtA[i] = 0x42
	}
	if len(m.BarcodeID) > 0 {
		dAtA14 := make([]byte, len(m.BarcodeID)*10)
		var j13 int
		for _, num := range m.BarcodeID {
			for num >= 1<<7 {
				dAtA14[j13] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j13++
			}
			dAtA14[j13] = uint8(num)
			j13++
		}
		i -= j13
		copy(dAtA[i:], dAtA14[:j13])
		i = encodeVarintDocmanager(dAtA, i, uint64(j13))
		i--
		dAtA[i] = 0x3a
	}
	if m.ReaderID != 0 {
		i = encodeVarintDocmanager(dAtA, i, uint64(m.ReaderID))
		i--
		dAtA[i] = 0x30
	}
	if m.Fine != 0 {
		i = encodeVarintDocmanager(dAtA, i, uint64(m.Fine))
		i--
		dAtA[i] = 0x28
	}
	if m.BorrowFormID != 0 {
		i = encodeVarintDocmanager(dAtA, i, uint64(m.BorrowFormID))
		i--
		dAtA[i] = 0x20
	}
	if m.LibrarianID != 0 {
		i = encodeVarintDocmanager(dAtA, i, uint64(m.LibrarianID))
		i--
		dAtA[i] = 0x18
	}
	if m.ID != 0 {
		i = encodeVarintDocmanager(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BorrowForm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BorrowForm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BorrowForm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdatedAt != nil {
		{
			size, err := m.UpdatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDocmanager(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDocmanager(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.EndTime != nil {
		{
			size, err := m.EndTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDocmanager(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.StartTime != nil {
		{
			size, err := m.StartTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDocmanager(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.BarcodeID) > 0 {
		dAtA20 := make([]byte, len(m.BarcodeID)*10)
		var j19 int
		for _, num := range m.BarcodeID {
			for num >= 1<<7 {
				dAtA20[j19] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j19++
			}
			dAtA20[j19] = uint8(num)
			j19++
		}
		i -= j19
		copy(dAtA[i:], dAtA20[:j19])
		i = encodeVarintDocmanager(dAtA, i, uint64(j19))
		i--
		dAtA[i] = 0x2a
	}
	if m.ReaderID != 0 {
		i = encodeVarintDocmanager(dAtA, i, uint64(m.ReaderID))
		i--
		dAtA[i] = 0x20
	}
	if m.Status != 0 {
		i = encodeVarintDocmanager(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if m.LibrarianID != 0 {
		i = encodeVarintDocmanager(dAtA, i, uint64(m.LibrarianID))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintDocmanager(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SaleBill) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SaleBill) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SaleBill) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDocmanager(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Price) > 0 {
		dAtA23 := make([]byte, len(m.Price)*10)
		var j22 int
		for _, num := range m.Price {
			for num >= 1<<7 {
				dAtA23[j22] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j22++
			}
			dAtA23[j22] = uint8(num)
			j22++
		}
		i -= j22
		copy(dAtA[i:], dAtA23[:j22])
		i = encodeVarintDocmanager(dAtA, i, uint64(j22))
		i--
		dAtA[i] = 0x22
	}
	if len(m.BarcodeID) > 0 {
		dAtA25 := make([]byte, len(m.BarcodeID)*10)
		var j24 int
		for _, num := range m.BarcodeID {
			for num >= 1<<7 {
				dAtA25[j24] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j24++
			}
			dAtA25[j24] = uint8(num)
			j24++
		}
		i -= j24
		copy(dAtA[i:], dAtA25[:j24])
		i = encodeVarintDocmanager(dAtA, i, uint64(j24))
		i--
		dAtA[i] = 0x1a
	}
	if m.LibrarianID != 0 {
		i = encodeVarintDocmanager(dAtA, i, uint64(m.LibrarianID))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintDocmanager(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SelectAllBarcodeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SelectAllBarcodeReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SelectAllBarcodeReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SelectAllBarcodeResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SelectAllBarcodeResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SelectAllBarcodeResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Barcodes) > 0 {
		for iNdEx := len(m.Barcodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Barcodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDocmanager(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintDocmanager(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintDocmanager(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SelectAllAvailableBarcodeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SelectAllAvailableBarcodeReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SelectAllAvailableBarcodeReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SelectAllAvailableBarcodeResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SelectAllAvailableBarcodeResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SelectAllAvailableBarcodeResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Barcodes) > 0 {
		for iNdEx := len(m.Barcodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Barcodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDocmanager(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintDocmanager(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintDocmanager(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SelectAllSellingBarcodeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SelectAllSellingBarcodeReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SelectAllSellingBarcodeReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SelectAllSellingBarcodeResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SelectAllSellingBarcodeResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SelectAllSellingBarcodeResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Barcodes) > 0 {
		for iNdEx := len(m.Barcodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Barcodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDocmanager(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintDocmanager(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintDocmanager(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SelectAllDamageBarcodeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SelectAllDamageBarcodeReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SelectAllDamageBarcodeReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SelectAllDamageBarcodeResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SelectAllDamageBarcodeResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SelectAllDamageBarcodeResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Barcodes) > 0 {
		for iNdEx := len(m.Barcodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Barcodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDocmanager(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintDocmanager(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintDocmanager(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SelectAllBarcodeByDocVerIDReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SelectAllBarcodeByDocVerIDReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SelectAllBarcodeByDocVerIDReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DocVerID != 0 {
		i = encodeVarintDocmanager(dAtA, i, uint64(m.DocVerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SelectAllBarcodeByDocVerIDResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SelectAllBarcodeByDocVerIDResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SelectAllBarcodeByDocVerIDResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Barcode) > 0 {
		for iNdEx := len(m.Barcode) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Barcode[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDocmanager(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintDocmanager(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintDocmanager(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SelectBarcodeByIDReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SelectBarcodeByIDReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SelectBarcodeByIDReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BarcodeID != 0 {
		i = encodeVarintDocmanager(dAtA, i, uint64(m.BarcodeID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SelectBarcodeByIDResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SelectBarcodeByIDResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SelectBarcodeByIDResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Barcode != nil {
		{
			size, err := m.Barcode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDocmanager(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintDocmanager(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintDocmanager(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SaveBarcodeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SaveBarcodeReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SaveBarcodeReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Barcode != nil {
		{
			size, err := m.Barcode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDocmanager(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SaveBarcodeResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SaveBarcodeResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SaveBarcodeResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintDocmanager(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintDocmanager(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateBarcodeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateBarcodeReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateBarcodeReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Barcode != nil {
		{
			size, err := m.Barcode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDocmanager(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateBarcodeResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateBarcodeResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateBarcodeResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintDocmanager(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintDocmanager(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteBarcodeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteBarcodeReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteBarcodeReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BarcodeID != 0 {
		i = encodeVarintDocmanager(dAtA, i, uint64(m.BarcodeID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteBarcodeResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteBarcodeResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteBarcodeResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintDocmanager(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintDocmanager(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SelectAllBorrowFormReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SelectAllBorrowFormReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SelectAllBorrowFormReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SelectAllBorrowFormResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SelectAllBorrowFormResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SelectAllBorrowFormResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BorrowForms) > 0 {
		for iNdEx := len(m.BorrowForms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BorrowForms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDocmanager(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintDocmanager(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintDocmanager(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SelectAllUnReturnBorrowFormReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SelectAllUnReturnBorrowFormReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SelectAllUnReturnBorrowFormReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SelectAllUnReturnBorrowFormResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SelectAllUnReturnBorrowFormResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SelectAllUnReturnBorrowFormResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BorrowForms) > 0 {
		for iNdEx := len(m.BorrowForms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BorrowForms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDocmanager(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintDocmanager(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintDocmanager(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SelectBorrowFormByIDReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SelectBorrowFormByIDReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SelectBorrowFormByIDReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BorrowFormID != 0 {
		i = encodeVarintDocmanager(dAtA, i, uint64(m.BorrowFormID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SelectBorrowFormByIDResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SelectBorrowFormByIDResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SelectBorrowFormByIDResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Borrowform != nil {
		{
			size, err := m.Borrowform.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDocmanager(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintDocmanager(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintDocmanager(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SaveBorrowFormReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SaveBorrowFormReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SaveBorrowFormReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Borrowform != nil {
		{
			size, err := m.Borrowform.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDocmanager(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SaveBorrowFormResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SaveBorrowFormResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SaveBorrowFormResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintDocmanager(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintDocmanager(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateBorrowFormStatusReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateBorrowFormStatusReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateBorrowFormStatusReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintDocmanager(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if m.BorrowFormID != 0 {
		i = encodeVarintDocmanager(dAtA, i, uint64(m.BorrowFormID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateBorrowFormStatusResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateBorrowFormStatusResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateBorrowFormStatusResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintDocmanager(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintDocmanager(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteBorrowFormReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteBorrowFormReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteBorrowFormReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BorrowFormID != 0 {
		i = encodeVarintDocmanager(dAtA, i, uint64(m.BorrowFormID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteBorrowFormResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteBorrowFormResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteBorrowFormResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintDocmanager(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintDocmanager(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SelectAllPaymentReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SelectAllPaymentReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SelectAllPaymentReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SelectAllPaymentResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SelectAllPaymentResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SelectAllPaymentResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Payments) > 0 {
		for iNdEx := len(m.Payments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Payments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDocmanager(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintDocmanager(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintDocmanager(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SelectPaymentByIDReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SelectPaymentByIDReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SelectPaymentByIDReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PaymentID != 0 {
		i = encodeVarintDocmanager(dAtA, i, uint64(m.PaymentID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SelectPaymentByIDResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SelectPaymentByIDResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SelectPaymentByIDResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Payment != nil {
		{
			size, err := m.Payment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDocmanager(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintDocmanager(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintDocmanager(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SelectPaymentByBorrowFormIDReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SelectPaymentByBorrowFormIDReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SelectPaymentByBorrowFormIDReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BorrowFormID != 0 {
		i = encodeVarintDocmanager(dAtA, i, uint64(m.BorrowFormID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SelectPaymentByBorrowFormIDResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SelectPaymentByBorrowFormIDResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SelectPaymentByBorrowFormIDResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Payment != nil {
		{
			size, err := m.Payment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDocmanager(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintDocmanager(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintDocmanager(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SelectPaymentWithFineReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SelectPaymentWithFineReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SelectPaymentWithFineReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SelectPaymentWithFineResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SelectPaymentWithFineResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SelectPaymentWithFineResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Payment) > 0 {
		for iNdEx := len(m.Payment) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Payment[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDocmanager(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintDocmanager(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintDocmanager(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SavePaymentReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SavePaymentReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SavePaymentReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Payment != nil {
		{
			size, err := m.Payment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDocmanager(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SavePaymentResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SavePaymentResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SavePaymentResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintDocmanager(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintDocmanager(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SelectAllSaleBillReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SelectAllSaleBillReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SelectAllSaleBillReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SelectAllSaleBillResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SelectAllSaleBillResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SelectAllSaleBillResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SaleBills) > 0 {
		for iNdEx := len(m.SaleBills) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SaleBills[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDocmanager(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintDocmanager(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintDocmanager(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SelectSaleBillByIDReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SelectSaleBillByIDReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SelectSaleBillByIDReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SaleBillID != 0 {
		i = encodeVarintDocmanager(dAtA, i, uint64(m.SaleBillID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SelectSaleBillByIDResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SelectSaleBillByIDResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SelectSaleBillByIDResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SaleBill != nil {
		{
			size, err := m.SaleBill.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDocmanager(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintDocmanager(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintDocmanager(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SaveSaleBillReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SaveSaleBillReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SaveSaleBillReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SaleBill != nil {
		{
			size, err := m.SaleBill.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDocmanager(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SaveSaleBillResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SaveSaleBillResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SaveSaleBillResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintDocmanager(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintDocmanager(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteSaleBillReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteSaleBillReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteSaleBillReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SaleBillID != 0 {
		i = encodeVarintDocmanager(dAtA, i, uint64(m.SaleBillID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteSaleBillResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteSaleBillResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteSaleBillResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintDocmanager(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintDocmanager(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintDocmanager(dAtA []byte, offset int, v uint64) int {
	offset -= sovDocmanager(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedDoc(r randyDocmanager, easy bool) *Doc {
	this := &Doc{}
	this.ID = uint64(uint64(r.Uint32()))
	this.Name = string(randStringDocmanager(r))
	this.CategoryId = uint64(uint64(r.Uint32()))
	if r.Intn(5) != 0 {
		this.CreatedAt = model.NewPopulatedTime(r, easy)
	}
	if r.Intn(5) != 0 {
		this.UpdatedAt = model.NewPopulatedTime(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDocVersion(r randyDocmanager, easy bool) *DocVersion {
	this := &DocVersion{}
	this.DocVer = string(randStringDocmanager(r))
	this.DocID = uint64(uint64(r.Uint32()))
	this.Version = uint64(uint64(r.Uint32()))
	this.Price = uint64(uint64(r.Uint32()))
	this.DocDescription = string(randStringDocmanager(r))
	this.Publisher = string(randStringDocmanager(r))
	if r.Intn(5) != 0 {
		this.CreatedAt = model.NewPopulatedTime(r, easy)
	}
	if r.Intn(5) != 0 {
		this.UpdatedAt = model.NewPopulatedTime(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBarcode(r randyDocmanager, easy bool) *Barcode {
	this := &Barcode{}
	this.ID = uint64(uint64(r.Uint32()))
	this.Status = uint64(uint64(r.Uint32()))
	this.SaleBillID = uint64(uint64(r.Uint32()))
	this.DocVerID = uint64(uint64(r.Uint32()))
	if r.Intn(5) != 0 {
		this.CreatedAt = model.NewPopulatedTime(r, easy)
	}
	if r.Intn(5) != 0 {
		this.UpdatedAt = model.NewPopulatedTime(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPayment(r randyDocmanager, easy bool) *Payment {
	this := &Payment{}
	this.ID = uint64(uint64(r.Uint32()))
	this.LibrarianID = uint64(uint64(r.Uint32()))
	this.BorrowFormID = uint64(uint64(r.Uint32()))
	this.Fine = uint64(uint64(r.Uint32()))
	this.ReaderID = uint64(uint64(r.Uint32()))
	v1 := r.Intn(10)
	this.BarcodeID = make([]uint64, v1)
	for i := 0; i < v1; i++ {
		this.BarcodeID[i] = uint64(uint64(r.Uint32()))
	}
	v2 := r.Intn(10)
	this.BarcodeStatus = make([]uint64, v2)
	for i := 0; i < v2; i++ {
		this.BarcodeStatus[i] = uint64(uint64(r.Uint32()))
	}
	v3 := r.Intn(10)
	this.Money = make([]uint64, v3)
	for i := 0; i < v3; i++ {
		this.Money[i] = uint64(uint64(r.Uint32()))
	}
	if r.Intn(5) != 0 {
		this.CreatedAt = model.NewPopulatedTime(r, easy)
	}
	if r.Intn(5) != 0 {
		this.UpdatedAt = model.NewPopulatedTime(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBorrowForm(r randyDocmanager, easy bool) *BorrowForm {
	this := &BorrowForm{}
	this.ID = uint64(uint64(r.Uint32()))
	this.LibrarianID = uint64(uint64(r.Uint32()))
	this.Status = uint64(uint64(r.Uint32()))
	this.ReaderID = uint64(uint64(r.Uint32()))
	v4 := r.Intn(10)
	this.BarcodeID = make([]uint64, v4)
	for i := 0; i < v4; i++ {
		this.BarcodeID[i] = uint64(uint64(r.Uint32()))
	}
	if r.Intn(5) != 0 {
		this.StartTime = model.NewPopulatedTime(r, easy)
	}
	if r.Intn(5) != 0 {
		this.EndTime = model.NewPopulatedTime(r, easy)
	}
	if r.Intn(5) != 0 {
		this.CreatedAt = model.NewPopulatedTime(r, easy)
	}
	if r.Intn(5) != 0 {
		this.UpdatedAt = model.NewPopulatedTime(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSaleBill(r randyDocmanager, easy bool) *SaleBill {
	this := &SaleBill{}
	this.ID = uint64(uint64(r.Uint32()))
	this.LibrarianID = uint64(uint64(r.Uint32()))
	v5 := r.Intn(10)
	this.BarcodeID = make([]uint64, v5)
	for i := 0; i < v5; i++ {
		this.BarcodeID[i] = uint64(uint64(r.Uint32()))
	}
	v6 := r.Intn(10)
	this.Price = make([]uint64, v6)
	for i := 0; i < v6; i++ {
		this.Price[i] = uint64(uint64(r.Uint32()))
	}
	if r.Intn(5) != 0 {
		this.CreatedAt = model.NewPopulatedTime(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSelectAllBarcodeReq(r randyDocmanager, easy bool) *SelectAllBarcodeReq {
	this := &SelectAllBarcodeReq{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSelectAllBarcodeResp(r randyDocmanager, easy bool) *SelectAllBarcodeResp {
	this := &SelectAllBarcodeResp{}
	this.Code = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Code *= -1
	}
	this.Message = string(randStringDocmanager(r))
	if r.Intn(5) != 0 {
		v7 := r.Intn(5)
		this.Barcodes = make([]*Barcode, v7)
		for i := 0; i < v7; i++ {
			this.Barcodes[i] = NewPopulatedBarcode(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSelectAllAvailableBarcodeReq(r randyDocmanager, easy bool) *SelectAllAvailableBarcodeReq {
	this := &SelectAllAvailableBarcodeReq{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSelectAllAvailableBarcodeResp(r randyDocmanager, easy bool) *SelectAllAvailableBarcodeResp {
	this := &SelectAllAvailableBarcodeResp{}
	this.Code = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Code *= -1
	}
	this.Message = string(randStringDocmanager(r))
	if r.Intn(5) != 0 {
		v8 := r.Intn(5)
		this.Barcodes = make([]*Barcode, v8)
		for i := 0; i < v8; i++ {
			this.Barcodes[i] = NewPopulatedBarcode(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSelectAllSellingBarcodeReq(r randyDocmanager, easy bool) *SelectAllSellingBarcodeReq {
	this := &SelectAllSellingBarcodeReq{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSelectAllSellingBarcodeResp(r randyDocmanager, easy bool) *SelectAllSellingBarcodeResp {
	this := &SelectAllSellingBarcodeResp{}
	this.Code = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Code *= -1
	}
	this.Message = string(randStringDocmanager(r))
	if r.Intn(5) != 0 {
		v9 := r.Intn(5)
		this.Barcodes = make([]*Barcode, v9)
		for i := 0; i < v9; i++ {
			this.Barcodes[i] = NewPopulatedBarcode(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSelectAllDamageBarcodeReq(r randyDocmanager, easy bool) *SelectAllDamageBarcodeReq {
	this := &SelectAllDamageBarcodeReq{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSelectAllDamageBarcodeResp(r randyDocmanager, easy bool) *SelectAllDamageBarcodeResp {
	this := &SelectAllDamageBarcodeResp{}
	this.Code = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Code *= -1
	}
	this.Message = string(randStringDocmanager(r))
	if r.Intn(5) != 0 {
		v10 := r.Intn(5)
		this.Barcodes = make([]*Barcode, v10)
		for i := 0; i < v10; i++ {
			this.Barcodes[i] = NewPopulatedBarcode(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSelectAllBarcodeByDocVerIDReq(r randyDocmanager, easy bool) *SelectAllBarcodeByDocVerIDReq {
	this := &SelectAllBarcodeByDocVerIDReq{}
	this.DocVerID = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSelectAllBarcodeByDocVerIDResp(r randyDocmanager, easy bool) *SelectAllBarcodeByDocVerIDResp {
	this := &SelectAllBarcodeByDocVerIDResp{}
	this.Code = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Code *= -1
	}
	this.Message = string(randStringDocmanager(r))
	if r.Intn(5) != 0 {
		v11 := r.Intn(5)
		this.Barcode = make([]*Barcode, v11)
		for i := 0; i < v11; i++ {
			this.Barcode[i] = NewPopulatedBarcode(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSelectBarcodeByIDReq(r randyDocmanager, easy bool) *SelectBarcodeByIDReq {
	this := &SelectBarcodeByIDReq{}
	this.BarcodeID = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSelectBarcodeByIDResp(r randyDocmanager, easy bool) *SelectBarcodeByIDResp {
	this := &SelectBarcodeByIDResp{}
	this.Code = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Code *= -1
	}
	this.Message = string(randStringDocmanager(r))
	if r.Intn(5) != 0 {
		this.Barcode = NewPopulatedBarcode(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSaveBarcodeReq(r randyDocmanager, easy bool) *SaveBarcodeReq {
	this := &SaveBarcodeReq{}
	if r.Intn(5) != 0 {
		this.Barcode = NewPopulatedBarcode(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSaveBarcodeResp(r randyDocmanager, easy bool) *SaveBarcodeResp {
	this := &SaveBarcodeResp{}
	this.Code = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Code *= -1
	}
	this.Message = string(randStringDocmanager(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUpdateBarcodeReq(r randyDocmanager, easy bool) *UpdateBarcodeReq {
	this := &UpdateBarcodeReq{}
	if r.Intn(5) != 0 {
		this.Barcode = NewPopulatedBarcode(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUpdateBarcodeResp(r randyDocmanager, easy bool) *UpdateBarcodeResp {
	this := &UpdateBarcodeResp{}
	this.Code = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Code *= -1
	}
	this.Message = string(randStringDocmanager(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDeleteBarcodeReq(r randyDocmanager, easy bool) *DeleteBarcodeReq {
	this := &DeleteBarcodeReq{}
	this.BarcodeID = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDeleteBarcodeResp(r randyDocmanager, easy bool) *DeleteBarcodeResp {
	this := &DeleteBarcodeResp{}
	this.Code = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Code *= -1
	}
	this.Message = string(randStringDocmanager(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSelectAllBorrowFormReq(r randyDocmanager, easy bool) *SelectAllBorrowFormReq {
	this := &SelectAllBorrowFormReq{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSelectAllBorrowFormResp(r randyDocmanager, easy bool) *SelectAllBorrowFormResp {
	this := &SelectAllBorrowFormResp{}
	this.Code = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Code *= -1
	}
	this.Message = string(randStringDocmanager(r))
	if r.Intn(5) != 0 {
		v12 := r.Intn(5)
		this.BorrowForms = make([]*BorrowForm, v12)
		for i := 0; i < v12; i++ {
			this.BorrowForms[i] = NewPopulatedBorrowForm(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSelectAllUnReturnBorrowFormReq(r randyDocmanager, easy bool) *SelectAllUnReturnBorrowFormReq {
	this := &SelectAllUnReturnBorrowFormReq{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSelectAllUnReturnBorrowFormResp(r randyDocmanager, easy bool) *SelectAllUnReturnBorrowFormResp {
	this := &SelectAllUnReturnBorrowFormResp{}
	this.Code = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Code *= -1
	}
	this.Message = string(randStringDocmanager(r))
	if r.Intn(5) != 0 {
		v13 := r.Intn(5)
		this.BorrowForms = make([]*BorrowForm, v13)
		for i := 0; i < v13; i++ {
			this.BorrowForms[i] = NewPopulatedBorrowForm(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSelectBorrowFormByIDReq(r randyDocmanager, easy bool) *SelectBorrowFormByIDReq {
	this := &SelectBorrowFormByIDReq{}
	this.BorrowFormID = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSelectBorrowFormByIDResp(r randyDocmanager, easy bool) *SelectBorrowFormByIDResp {
	this := &SelectBorrowFormByIDResp{}
	this.Code = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Code *= -1
	}
	this.Message = string(randStringDocmanager(r))
	if r.Intn(5) != 0 {
		this.Borrowform = NewPopulatedBorrowForm(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSaveBorrowFormReq(r randyDocmanager, easy bool) *SaveBorrowFormReq {
	this := &SaveBorrowFormReq{}
	if r.Intn(5) != 0 {
		this.Borrowform = NewPopulatedBorrowForm(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSaveBorrowFormResp(r randyDocmanager, easy bool) *SaveBorrowFormResp {
	this := &SaveBorrowFormResp{}
	this.Code = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Code *= -1
	}
	this.Message = string(randStringDocmanager(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUpdateBorrowFormStatusReq(r randyDocmanager, easy bool) *UpdateBorrowFormStatusReq {
	this := &UpdateBorrowFormStatusReq{}
	this.BorrowFormID = uint64(uint64(r.Uint32()))
	this.Status = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUpdateBorrowFormStatusResp(r randyDocmanager, easy bool) *UpdateBorrowFormStatusResp {
	this := &UpdateBorrowFormStatusResp{}
	this.Code = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Code *= -1
	}
	this.Message = string(randStringDocmanager(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDeleteBorrowFormReq(r randyDocmanager, easy bool) *DeleteBorrowFormReq {
	this := &DeleteBorrowFormReq{}
	this.BorrowFormID = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDeleteBorrowFormResp(r randyDocmanager, easy bool) *DeleteBorrowFormResp {
	this := &DeleteBorrowFormResp{}
	this.Code = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Code *= -1
	}
	this.Message = string(randStringDocmanager(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSelectAllPaymentReq(r randyDocmanager, easy bool) *SelectAllPaymentReq {
	this := &SelectAllPaymentReq{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSelectAllPaymentResp(r randyDocmanager, easy bool) *SelectAllPaymentResp {
	this := &SelectAllPaymentResp{}
	this.Code = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Code *= -1
	}
	this.Message = string(randStringDocmanager(r))
	if r.Intn(5) != 0 {
		v14 := r.Intn(5)
		this.Payments = make([]*Payment, v14)
		for i := 0; i < v14; i++ {
			this.Payments[i] = NewPopulatedPayment(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSelectPaymentByIDReq(r randyDocmanager, easy bool) *SelectPaymentByIDReq {
	this := &SelectPaymentByIDReq{}
	this.PaymentID = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSelectPaymentByIDResp(r randyDocmanager, easy bool) *SelectPaymentByIDResp {
	this := &SelectPaymentByIDResp{}
	this.Code = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Code *= -1
	}
	this.Message = string(randStringDocmanager(r))
	if r.Intn(5) != 0 {
		this.Payment = NewPopulatedPayment(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSelectPaymentByBorrowFormIDReq(r randyDocmanager, easy bool) *SelectPaymentByBorrowFormIDReq {
	this := &SelectPaymentByBorrowFormIDReq{}
	this.BorrowFormID = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSelectPaymentByBorrowFormIDResp(r randyDocmanager, easy bool) *SelectPaymentByBorrowFormIDResp {
	this := &SelectPaymentByBorrowFormIDResp{}
	this.Code = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Code *= -1
	}
	this.Message = string(randStringDocmanager(r))
	if r.Intn(5) != 0 {
		this.Payment = NewPopulatedPayment(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSelectPaymentWithFineReq(r randyDocmanager, easy bool) *SelectPaymentWithFineReq {
	this := &SelectPaymentWithFineReq{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSelectPaymentWithFineResp(r randyDocmanager, easy bool) *SelectPaymentWithFineResp {
	this := &SelectPaymentWithFineResp{}
	this.Code = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Code *= -1
	}
	this.Message = string(randStringDocmanager(r))
	if r.Intn(5) != 0 {
		v15 := r.Intn(5)
		this.Payment = make([]*Payment, v15)
		for i := 0; i < v15; i++ {
			this.Payment[i] = NewPopulatedPayment(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSavePaymentReq(r randyDocmanager, easy bool) *SavePaymentReq {
	this := &SavePaymentReq{}
	if r.Intn(5) != 0 {
		this.Payment = NewPopulatedPayment(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSavePaymentResp(r randyDocmanager, easy bool) *SavePaymentResp {
	this := &SavePaymentResp{}
	this.Code = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Code *= -1
	}
	this.Message = string(randStringDocmanager(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSelectAllSaleBillReq(r randyDocmanager, easy bool) *SelectAllSaleBillReq {
	this := &SelectAllSaleBillReq{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSelectAllSaleBillResp(r randyDocmanager, easy bool) *SelectAllSaleBillResp {
	this := &SelectAllSaleBillResp{}
	this.Code = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Code *= -1
	}
	this.Message = string(randStringDocmanager(r))
	if r.Intn(5) != 0 {
		v16 := r.Intn(5)
		this.SaleBills = make([]*SaleBill, v16)
		for i := 0; i < v16; i++ {
			this.SaleBills[i] = NewPopulatedSaleBill(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSelectSaleBillByIDReq(r randyDocmanager, easy bool) *SelectSaleBillByIDReq {
	this := &SelectSaleBillByIDReq{}
	this.SaleBillID = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSelectSaleBillByIDResp(r randyDocmanager, easy bool) *SelectSaleBillByIDResp {
	this := &SelectSaleBillByIDResp{}
	this.Code = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Code *= -1
	}
	this.Message = string(randStringDocmanager(r))
	if r.Intn(5) != 0 {
		this.SaleBill = NewPopulatedSaleBill(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSaveSaleBillReq(r randyDocmanager, easy bool) *SaveSaleBillReq {
	this := &SaveSaleBillReq{}
	if r.Intn(5) != 0 {
		this.SaleBill = NewPopulatedSaleBill(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSaveSaleBillResp(r randyDocmanager, easy bool) *SaveSaleBillResp {
	this := &SaveSaleBillResp{}
	this.Code = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Code *= -1
	}
	this.Message = string(randStringDocmanager(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDeleteSaleBillReq(r randyDocmanager, easy bool) *DeleteSaleBillReq {
	this := &DeleteSaleBillReq{}
	this.SaleBillID = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDeleteSaleBillResp(r randyDocmanager, easy bool) *DeleteSaleBillResp {
	this := &DeleteSaleBillResp{}
	this.Code = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Code *= -1
	}
	this.Message = string(randStringDocmanager(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyDocmanager interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneDocmanager(r randyDocmanager) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringDocmanager(r randyDocmanager) string {
	v17 := r.Intn(100)
	tmps := make([]rune, v17)
	for i := 0; i < v17; i++ {
		tmps[i] = randUTF8RuneDocmanager(r)
	}
	return string(tmps)
}
func randUnrecognizedDocmanager(r randyDocmanager, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldDocmanager(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldDocmanager(dAtA []byte, r randyDocmanager, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateDocmanager(dAtA, uint64(key))
		v18 := r.Int63()
		if r.Intn(2) == 0 {
			v18 *= -1
		}
		dAtA = encodeVarintPopulateDocmanager(dAtA, uint64(v18))
	case 1:
		dAtA = encodeVarintPopulateDocmanager(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateDocmanager(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateDocmanager(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateDocmanager(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateDocmanager(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Doc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovDocmanager(uint64(m.ID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDocmanager(uint64(l))
	}
	if m.CategoryId != 0 {
		n += 1 + sovDocmanager(uint64(m.CategoryId))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovDocmanager(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = m.UpdatedAt.Size()
		n += 1 + l + sovDocmanager(uint64(l))
	}
	return n
}

func (m *DocVersion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DocVer)
	if l > 0 {
		n += 1 + l + sovDocmanager(uint64(l))
	}
	if m.DocID != 0 {
		n += 1 + sovDocmanager(uint64(m.DocID))
	}
	if m.Version != 0 {
		n += 1 + sovDocmanager(uint64(m.Version))
	}
	if m.Price != 0 {
		n += 1 + sovDocmanager(uint64(m.Price))
	}
	l = len(m.DocDescription)
	if l > 0 {
		n += 1 + l + sovDocmanager(uint64(l))
	}
	l = len(m.Publisher)
	if l > 0 {
		n += 1 + l + sovDocmanager(uint64(l))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovDocmanager(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = m.UpdatedAt.Size()
		n += 1 + l + sovDocmanager(uint64(l))
	}
	return n
}

func (m *Barcode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovDocmanager(uint64(m.ID))
	}
	if m.Status != 0 {
		n += 1 + sovDocmanager(uint64(m.Status))
	}
	if m.SaleBillID != 0 {
		n += 1 + sovDocmanager(uint64(m.SaleBillID))
	}
	if m.DocVerID != 0 {
		n += 1 + sovDocmanager(uint64(m.DocVerID))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovDocmanager(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = m.UpdatedAt.Size()
		n += 1 + l + sovDocmanager(uint64(l))
	}
	return n
}

func (m *Payment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovDocmanager(uint64(m.ID))
	}
	if m.LibrarianID != 0 {
		n += 1 + sovDocmanager(uint64(m.LibrarianID))
	}
	if m.BorrowFormID != 0 {
		n += 1 + sovDocmanager(uint64(m.BorrowFormID))
	}
	if m.Fine != 0 {
		n += 1 + sovDocmanager(uint64(m.Fine))
	}
	if m.ReaderID != 0 {
		n += 1 + sovDocmanager(uint64(m.ReaderID))
	}
	if len(m.BarcodeID) > 0 {
		l = 0
		for _, e := range m.BarcodeID {
			l += sovDocmanager(uint64(e))
		}
		n += 1 + sovDocmanager(uint64(l)) + l
	}
	if len(m.BarcodeStatus) > 0 {
		l = 0
		for _, e := range m.BarcodeStatus {
			l += sovDocmanager(uint64(e))
		}
		n += 1 + sovDocmanager(uint64(l)) + l
	}
	if len(m.Money) > 0 {
		l = 0
		for _, e := range m.Money {
			l += sovDocmanager(uint64(e))
		}
		n += 1 + sovDocmanager(uint64(l)) + l
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovDocmanager(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = m.UpdatedAt.Size()
		n += 1 + l + sovDocmanager(uint64(l))
	}
	return n
}

func (m *BorrowForm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovDocmanager(uint64(m.ID))
	}
	if m.LibrarianID != 0 {
		n += 1 + sovDocmanager(uint64(m.LibrarianID))
	}
	if m.Status != 0 {
		n += 1 + sovDocmanager(uint64(m.Status))
	}
	if m.ReaderID != 0 {
		n += 1 + sovDocmanager(uint64(m.ReaderID))
	}
	if len(m.BarcodeID) > 0 {
		l = 0
		for _, e := range m.BarcodeID {
			l += sovDocmanager(uint64(e))
		}
		n += 1 + sovDocmanager(uint64(l)) + l
	}
	if m.StartTime != nil {
		l = m.StartTime.Size()
		n += 1 + l + sovDocmanager(uint64(l))
	}
	if m.EndTime != nil {
		l = m.EndTime.Size()
		n += 1 + l + sovDocmanager(uint64(l))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovDocmanager(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = m.UpdatedAt.Size()
		n += 1 + l + sovDocmanager(uint64(l))
	}
	return n
}

func (m *SaleBill) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovDocmanager(uint64(m.ID))
	}
	if m.LibrarianID != 0 {
		n += 1 + sovDocmanager(uint64(m.LibrarianID))
	}
	if len(m.BarcodeID) > 0 {
		l = 0
		for _, e := range m.BarcodeID {
			l += sovDocmanager(uint64(e))
		}
		n += 1 + sovDocmanager(uint64(l)) + l
	}
	if len(m.Price) > 0 {
		l = 0
		for _, e := range m.Price {
			l += sovDocmanager(uint64(e))
		}
		n += 1 + sovDocmanager(uint64(l)) + l
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovDocmanager(uint64(l))
	}
	return n
}

func (m *SelectAllBarcodeReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SelectAllBarcodeResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovDocmanager(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovDocmanager(uint64(l))
	}
	if len(m.Barcodes) > 0 {
		for _, e := range m.Barcodes {
			l = e.Size()
			n += 1 + l + sovDocmanager(uint64(l))
		}
	}
	return n
}

func (m *SelectAllAvailableBarcodeReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SelectAllAvailableBarcodeResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovDocmanager(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovDocmanager(uint64(l))
	}
	if len(m.Barcodes) > 0 {
		for _, e := range m.Barcodes {
			l = e.Size()
			n += 1 + l + sovDocmanager(uint64(l))
		}
	}
	return n
}

func (m *SelectAllSellingBarcodeReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SelectAllSellingBarcodeResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovDocmanager(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovDocmanager(uint64(l))
	}
	if len(m.Barcodes) > 0 {
		for _, e := range m.Barcodes {
			l = e.Size()
			n += 1 + l + sovDocmanager(uint64(l))
		}
	}
	return n
}

func (m *SelectAllDamageBarcodeReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SelectAllDamageBarcodeResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovDocmanager(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovDocmanager(uint64(l))
	}
	if len(m.Barcodes) > 0 {
		for _, e := range m.Barcodes {
			l = e.Size()
			n += 1 + l + sovDocmanager(uint64(l))
		}
	}
	return n
}

func (m *SelectAllBarcodeByDocVerIDReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DocVerID != 0 {
		n += 1 + sovDocmanager(uint64(m.DocVerID))
	}
	return n
}

func (m *SelectAllBarcodeByDocVerIDResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovDocmanager(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovDocmanager(uint64(l))
	}
	if len(m.Barcode) > 0 {
		for _, e := range m.Barcode {
			l = e.Size()
			n += 1 + l + sovDocmanager(uint64(l))
		}
	}
	return n
}

func (m *SelectBarcodeByIDReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BarcodeID != 0 {
		n += 1 + sovDocmanager(uint64(m.BarcodeID))
	}
	return n
}

func (m *SelectBarcodeByIDResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovDocmanager(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovDocmanager(uint64(l))
	}
	if m.Barcode != nil {
		l = m.Barcode.Size()
		n += 1 + l + sovDocmanager(uint64(l))
	}
	return n
}

func (m *SaveBarcodeReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Barcode != nil {
		l = m.Barcode.Size()
		n += 1 + l + sovDocmanager(uint64(l))
	}
	return n
}

func (m *SaveBarcodeResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovDocmanager(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovDocmanager(uint64(l))
	}
	return n
}

func (m *UpdateBarcodeReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Barcode != nil {
		l = m.Barcode.Size()
		n += 1 + l + sovDocmanager(uint64(l))
	}
	return n
}

func (m *UpdateBarcodeResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovDocmanager(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovDocmanager(uint64(l))
	}
	return n
}

func (m *DeleteBarcodeReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BarcodeID != 0 {
		n += 1 + sovDocmanager(uint64(m.BarcodeID))
	}
	return n
}

func (m *DeleteBarcodeResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovDocmanager(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovDocmanager(uint64(l))
	}
	return n
}

func (m *SelectAllBorrowFormReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SelectAllBorrowFormResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovDocmanager(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovDocmanager(uint64(l))
	}
	if len(m.BorrowForms) > 0 {
		for _, e := range m.BorrowForms {
			l = e.Size()
			n += 1 + l + sovDocmanager(uint64(l))
		}
	}
	return n
}

func (m *SelectAllUnReturnBorrowFormReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SelectAllUnReturnBorrowFormResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovDocmanager(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovDocmanager(uint64(l))
	}
	if len(m.BorrowForms) > 0 {
		for _, e := range m.BorrowForms {
			l = e.Size()
			n += 1 + l + sovDocmanager(uint64(l))
		}
	}
	return n
}

func (m *SelectBorrowFormByIDReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BorrowFormID != 0 {
		n += 1 + sovDocmanager(uint64(m.BorrowFormID))
	}
	return n
}

func (m *SelectBorrowFormByIDResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovDocmanager(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovDocmanager(uint64(l))
	}
	if m.Borrowform != nil {
		l = m.Borrowform.Size()
		n += 1 + l + sovDocmanager(uint64(l))
	}
	return n
}

func (m *SaveBorrowFormReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Borrowform != nil {
		l = m.Borrowform.Size()
		n += 1 + l + sovDocmanager(uint64(l))
	}
	return n
}

func (m *SaveBorrowFormResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovDocmanager(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovDocmanager(uint64(l))
	}
	return n
}

func (m *UpdateBorrowFormStatusReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BorrowFormID != 0 {
		n += 1 + sovDocmanager(uint64(m.BorrowFormID))
	}
	if m.Status != 0 {
		n += 1 + sovDocmanager(uint64(m.Status))
	}
	return n
}

func (m *UpdateBorrowFormStatusResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovDocmanager(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovDocmanager(uint64(l))
	}
	return n
}

func (m *DeleteBorrowFormReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BorrowFormID != 0 {
		n += 1 + sovDocmanager(uint64(m.BorrowFormID))
	}
	return n
}

func (m *DeleteBorrowFormResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovDocmanager(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovDocmanager(uint64(l))
	}
	return n
}

func (m *SelectAllPaymentReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SelectAllPaymentResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovDocmanager(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovDocmanager(uint64(l))
	}
	if len(m.Payments) > 0 {
		for _, e := range m.Payments {
			l = e.Size()
			n += 1 + l + sovDocmanager(uint64(l))
		}
	}
	return n
}

func (m *SelectPaymentByIDReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PaymentID != 0 {
		n += 1 + sovDocmanager(uint64(m.PaymentID))
	}
	return n
}

func (m *SelectPaymentByIDResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovDocmanager(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovDocmanager(uint64(l))
	}
	if m.Payment != nil {
		l = m.Payment.Size()
		n += 1 + l + sovDocmanager(uint64(l))
	}
	return n
}

func (m *SelectPaymentByBorrowFormIDReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BorrowFormID != 0 {
		n += 1 + sovDocmanager(uint64(m.BorrowFormID))
	}
	return n
}

func (m *SelectPaymentByBorrowFormIDResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovDocmanager(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovDocmanager(uint64(l))
	}
	if m.Payment != nil {
		l = m.Payment.Size()
		n += 1 + l + sovDocmanager(uint64(l))
	}
	return n
}

func (m *SelectPaymentWithFineReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SelectPaymentWithFineResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovDocmanager(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovDocmanager(uint64(l))
	}
	if len(m.Payment) > 0 {
		for _, e := range m.Payment {
			l = e.Size()
			n += 1 + l + sovDocmanager(uint64(l))
		}
	}
	return n
}

func (m *SavePaymentReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Payment != nil {
		l = m.Payment.Size()
		n += 1 + l + sovDocmanager(uint64(l))
	}
	return n
}

func (m *SavePaymentResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovDocmanager(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovDocmanager(uint64(l))
	}
	return n
}

func (m *SelectAllSaleBillReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SelectAllSaleBillResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovDocmanager(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovDocmanager(uint64(l))
	}
	if len(m.SaleBills) > 0 {
		for _, e := range m.SaleBills {
			l = e.Size()
			n += 1 + l + sovDocmanager(uint64(l))
		}
	}
	return n
}

func (m *SelectSaleBillByIDReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SaleBillID != 0 {
		n += 1 + sovDocmanager(uint64(m.SaleBillID))
	}
	return n
}

func (m *SelectSaleBillByIDResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovDocmanager(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovDocmanager(uint64(l))
	}
	if m.SaleBill != nil {
		l = m.SaleBill.Size()
		n += 1 + l + sovDocmanager(uint64(l))
	}
	return n
}

func (m *SaveSaleBillReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SaleBill != nil {
		l = m.SaleBill.Size()
		n += 1 + l + sovDocmanager(uint64(l))
	}
	return n
}

func (m *SaveSaleBillResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovDocmanager(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovDocmanager(uint64(l))
	}
	return n
}

func (m *DeleteSaleBillReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SaleBillID != 0 {
		n += 1 + sovDocmanager(uint64(m.SaleBillID))
	}
	return n
}

func (m *DeleteSaleBillResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovDocmanager(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovDocmanager(uint64(l))
	}
	return n
}

func sovDocmanager(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDocmanager(x uint64) (n int) {
	return sovDocmanager(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Doc) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Doc: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Doc: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDocmanager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CategoryId", wireType)
			}
			m.CategoryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CategoryId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDocmanager
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &model.Time{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDocmanager
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = &model.Time{}
			}
			if err := m.UpdatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DocVersion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DocVersion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DocVersion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DocVer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDocmanager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DocVer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DocID", wireType)
			}
			m.DocID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DocID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DocDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDocmanager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DocDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Publisher", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDocmanager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Publisher = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDocmanager
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &model.Time{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDocmanager
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = &model.Time{}
			}
			if err := m.UpdatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Barcode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Barcode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Barcode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SaleBillID", wireType)
			}
			m.SaleBillID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SaleBillID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DocVerID", wireType)
			}
			m.DocVerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DocVerID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDocmanager
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &model.Time{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDocmanager
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = &model.Time{}
			}
			if err := m.UpdatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Payment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Payment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Payment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LibrarianID", wireType)
			}
			m.LibrarianID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LibrarianID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorrowFormID", wireType)
			}
			m.BorrowFormID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BorrowFormID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fine", wireType)
			}
			m.Fine = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fine |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReaderID", wireType)
			}
			m.ReaderID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReaderID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDocmanager
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BarcodeID = append(m.BarcodeID, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDocmanager
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDocmanager
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthDocmanager
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.BarcodeID) == 0 {
					m.BarcodeID = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDocmanager
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BarcodeID = append(m.BarcodeID, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BarcodeID", wireType)
			}
		case 8:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDocmanager
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BarcodeStatus = append(m.BarcodeStatus, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDocmanager
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDocmanager
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthDocmanager
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.BarcodeStatus) == 0 {
					m.BarcodeStatus = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDocmanager
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BarcodeStatus = append(m.BarcodeStatus, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BarcodeStatus", wireType)
			}
		case 9:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDocmanager
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Money = append(m.Money, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDocmanager
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDocmanager
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthDocmanager
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Money) == 0 {
					m.Money = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDocmanager
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Money = append(m.Money, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Money", wireType)
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDocmanager
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &model.Time{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDocmanager
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = &model.Time{}
			}
			if err := m.UpdatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BorrowForm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BorrowForm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BorrowForm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LibrarianID", wireType)
			}
			m.LibrarianID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LibrarianID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReaderID", wireType)
			}
			m.ReaderID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReaderID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDocmanager
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BarcodeID = append(m.BarcodeID, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDocmanager
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDocmanager
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthDocmanager
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.BarcodeID) == 0 {
					m.BarcodeID = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDocmanager
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BarcodeID = append(m.BarcodeID, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BarcodeID", wireType)
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDocmanager
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartTime == nil {
				m.StartTime = &model.Time{}
			}
			if err := m.StartTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDocmanager
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndTime == nil {
				m.EndTime = &model.Time{}
			}
			if err := m.EndTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDocmanager
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &model.Time{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDocmanager
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = &model.Time{}
			}
			if err := m.UpdatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SaleBill) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SaleBill: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SaleBill: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LibrarianID", wireType)
			}
			m.LibrarianID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LibrarianID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDocmanager
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BarcodeID = append(m.BarcodeID, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDocmanager
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDocmanager
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthDocmanager
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.BarcodeID) == 0 {
					m.BarcodeID = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDocmanager
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BarcodeID = append(m.BarcodeID, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BarcodeID", wireType)
			}
		case 4:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDocmanager
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Price = append(m.Price, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDocmanager
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDocmanager
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthDocmanager
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Price) == 0 {
					m.Price = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDocmanager
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Price = append(m.Price, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDocmanager
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &model.Time{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SelectAllBarcodeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SelectAllBarcodeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SelectAllBarcodeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SelectAllBarcodeResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SelectAllBarcodeResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SelectAllBarcodeResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDocmanager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Barcodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDocmanager
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Barcodes = append(m.Barcodes, &Barcode{})
			if err := m.Barcodes[len(m.Barcodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SelectAllAvailableBarcodeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SelectAllAvailableBarcodeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SelectAllAvailableBarcodeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SelectAllAvailableBarcodeResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SelectAllAvailableBarcodeResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SelectAllAvailableBarcodeResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDocmanager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Barcodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDocmanager
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Barcodes = append(m.Barcodes, &Barcode{})
			if err := m.Barcodes[len(m.Barcodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SelectAllSellingBarcodeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SelectAllSellingBarcodeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SelectAllSellingBarcodeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SelectAllSellingBarcodeResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SelectAllSellingBarcodeResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SelectAllSellingBarcodeResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDocmanager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Barcodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDocmanager
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Barcodes = append(m.Barcodes, &Barcode{})
			if err := m.Barcodes[len(m.Barcodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SelectAllDamageBarcodeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SelectAllDamageBarcodeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SelectAllDamageBarcodeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SelectAllDamageBarcodeResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SelectAllDamageBarcodeResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SelectAllDamageBarcodeResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDocmanager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Barcodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDocmanager
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Barcodes = append(m.Barcodes, &Barcode{})
			if err := m.Barcodes[len(m.Barcodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SelectAllBarcodeByDocVerIDReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SelectAllBarcodeByDocVerIDReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SelectAllBarcodeByDocVerIDReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DocVerID", wireType)
			}
			m.DocVerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DocVerID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SelectAllBarcodeByDocVerIDResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SelectAllBarcodeByDocVerIDResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SelectAllBarcodeByDocVerIDResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDocmanager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Barcode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDocmanager
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Barcode = append(m.Barcode, &Barcode{})
			if err := m.Barcode[len(m.Barcode)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SelectBarcodeByIDReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SelectBarcodeByIDReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SelectBarcodeByIDReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BarcodeID", wireType)
			}
			m.BarcodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BarcodeID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SelectBarcodeByIDResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SelectBarcodeByIDResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SelectBarcodeByIDResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDocmanager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Barcode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDocmanager
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Barcode == nil {
				m.Barcode = &Barcode{}
			}
			if err := m.Barcode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SaveBarcodeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SaveBarcodeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SaveBarcodeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Barcode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDocmanager
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Barcode == nil {
				m.Barcode = &Barcode{}
			}
			if err := m.Barcode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SaveBarcodeResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SaveBarcodeResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SaveBarcodeResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDocmanager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateBarcodeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateBarcodeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateBarcodeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Barcode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDocmanager
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Barcode == nil {
				m.Barcode = &Barcode{}
			}
			if err := m.Barcode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateBarcodeResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateBarcodeResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateBarcodeResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDocmanager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteBarcodeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteBarcodeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteBarcodeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BarcodeID", wireType)
			}
			m.BarcodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BarcodeID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteBarcodeResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteBarcodeResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteBarcodeResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDocmanager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SelectAllBorrowFormReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SelectAllBorrowFormReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SelectAllBorrowFormReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SelectAllBorrowFormResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SelectAllBorrowFormResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SelectAllBorrowFormResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDocmanager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorrowForms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDocmanager
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BorrowForms = append(m.BorrowForms, &BorrowForm{})
			if err := m.BorrowForms[len(m.BorrowForms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SelectAllUnReturnBorrowFormReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SelectAllUnReturnBorrowFormReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SelectAllUnReturnBorrowFormReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SelectAllUnReturnBorrowFormResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SelectAllUnReturnBorrowFormResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SelectAllUnReturnBorrowFormResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDocmanager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorrowForms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDocmanager
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BorrowForms = append(m.BorrowForms, &BorrowForm{})
			if err := m.BorrowForms[len(m.BorrowForms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SelectBorrowFormByIDReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SelectBorrowFormByIDReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SelectBorrowFormByIDReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorrowFormID", wireType)
			}
			m.BorrowFormID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BorrowFormID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SelectBorrowFormByIDResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SelectBorrowFormByIDResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SelectBorrowFormByIDResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDocmanager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Borrowform", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDocmanager
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Borrowform == nil {
				m.Borrowform = &BorrowForm{}
			}
			if err := m.Borrowform.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SaveBorrowFormReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SaveBorrowFormReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SaveBorrowFormReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Borrowform", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDocmanager
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Borrowform == nil {
				m.Borrowform = &BorrowForm{}
			}
			if err := m.Borrowform.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SaveBorrowFormResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SaveBorrowFormResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SaveBorrowFormResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDocmanager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateBorrowFormStatusReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateBorrowFormStatusReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateBorrowFormStatusReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorrowFormID", wireType)
			}
			m.BorrowFormID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BorrowFormID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateBorrowFormStatusResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateBorrowFormStatusResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateBorrowFormStatusResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDocmanager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteBorrowFormReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteBorrowFormReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteBorrowFormReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorrowFormID", wireType)
			}
			m.BorrowFormID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BorrowFormID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteBorrowFormResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteBorrowFormResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteBorrowFormResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDocmanager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SelectAllPaymentReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SelectAllPaymentReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SelectAllPaymentReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SelectAllPaymentResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SelectAllPaymentResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SelectAllPaymentResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDocmanager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDocmanager
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payments = append(m.Payments, &Payment{})
			if err := m.Payments[len(m.Payments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SelectPaymentByIDReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SelectPaymentByIDReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SelectPaymentByIDReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentID", wireType)
			}
			m.PaymentID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PaymentID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SelectPaymentByIDResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SelectPaymentByIDResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SelectPaymentByIDResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDocmanager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDocmanager
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Payment == nil {
				m.Payment = &Payment{}
			}
			if err := m.Payment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SelectPaymentByBorrowFormIDReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SelectPaymentByBorrowFormIDReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SelectPaymentByBorrowFormIDReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorrowFormID", wireType)
			}
			m.BorrowFormID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BorrowFormID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SelectPaymentByBorrowFormIDResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SelectPaymentByBorrowFormIDResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SelectPaymentByBorrowFormIDResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDocmanager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDocmanager
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Payment == nil {
				m.Payment = &Payment{}
			}
			if err := m.Payment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SelectPaymentWithFineReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SelectPaymentWithFineReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SelectPaymentWithFineReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SelectPaymentWithFineResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SelectPaymentWithFineResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SelectPaymentWithFineResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDocmanager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDocmanager
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payment = append(m.Payment, &Payment{})
			if err := m.Payment[len(m.Payment)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SavePaymentReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SavePaymentReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SavePaymentReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDocmanager
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Payment == nil {
				m.Payment = &Payment{}
			}
			if err := m.Payment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SavePaymentResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SavePaymentResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SavePaymentResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDocmanager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SelectAllSaleBillReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SelectAllSaleBillReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SelectAllSaleBillReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SelectAllSaleBillResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SelectAllSaleBillResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SelectAllSaleBillResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDocmanager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SaleBills", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDocmanager
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SaleBills = append(m.SaleBills, &SaleBill{})
			if err := m.SaleBills[len(m.SaleBills)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SelectSaleBillByIDReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SelectSaleBillByIDReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SelectSaleBillByIDReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SaleBillID", wireType)
			}
			m.SaleBillID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SaleBillID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SelectSaleBillByIDResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SelectSaleBillByIDResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SelectSaleBillByIDResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDocmanager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SaleBill", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDocmanager
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SaleBill == nil {
				m.SaleBill = &SaleBill{}
			}
			if err := m.SaleBill.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SaveSaleBillReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SaveSaleBillReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SaveSaleBillReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SaleBill", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDocmanager
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SaleBill == nil {
				m.SaleBill = &SaleBill{}
			}
			if err := m.SaleBill.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SaveSaleBillResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SaveSaleBillResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SaveSaleBillResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDocmanager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteSaleBillReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteSaleBillReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteSaleBillReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SaleBillID", wireType)
			}
			m.SaleBillID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SaleBillID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteSaleBillResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteSaleBillResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteSaleBillResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDocmanager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDocmanager(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDocmanager
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDocmanager
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDocmanager
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDocmanager
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDocmanager        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDocmanager          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDocmanager = fmt.Errorf("proto: unexpected end of group")
)
