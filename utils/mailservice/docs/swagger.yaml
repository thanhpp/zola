definitions:
  dto.CreateMailAccountReq:
    properties:
      account:
        $ref: '#/definitions/entity.MailAccount'
    type: object
  dto.CreateMailAccountResp:
    properties:
      account_id:
        type: integer
      error:
        properties:
          code:
            type: integer
          message:
            type: string
        type: object
    type: object
  dto.CreateNewMailReq:
    properties:
      from_id:
        type: integer
      subject:
        type: string
      template_id:
        type: integer
      to:
        items:
          type: string
        type: array
      variables:
        items:
          $ref: '#/definitions/entity.Variable'
        type: array
    type: object
  dto.CreateNewMailResp:
    properties:
      error:
        properties:
          code:
            type: integer
          message:
            type: string
        type: object
      html:
        type: string
      mail_id:
        type: integer
    type: object
  dto.CreateNewTemplateReq:
    properties:
      template:
        $ref: '#/definitions/entity.Template'
      variables:
        items:
          $ref: '#/definitions/entity.Variable'
        type: array
    type: object
  dto.CreateNewTemplateResp:
    properties:
      error:
        properties:
          code:
            type: integer
          message:
            type: string
        type: object
      template_id:
        type: integer
    type: object
  dto.GetMailAccountResp:
    properties:
      accounts:
        items:
          $ref: '#/definitions/entity.MailAccount'
        type: array
      error:
        properties:
          code:
            type: integer
          message:
            type: string
        type: object
    type: object
  dto.GetMailResp:
    properties:
      error:
        properties:
          code:
            type: integer
          message:
            type: string
        type: object
      mail:
        items:
          $ref: '#/definitions/entity.Mail'
        type: array
    type: object
  dto.GetTemplateResp:
    properties:
      error:
        properties:
          code:
            type: integer
          message:
            type: string
        type: object
      template:
        items:
          $ref: '#/definitions/entity.Template'
        type: array
    type: object
  dto.RespErr:
    properties:
      error:
        properties:
          code:
            type: integer
          message:
            type: string
        type: object
    type: object
  dto.SendEmailReq:
    properties:
      mailID:
        type: integer
    type: object
  dto.SendEmailResp:
    properties:
      error:
        properties:
          code:
            type: integer
          message:
            type: string
        type: object
      html:
        type: string
    type: object
  dto.UpdateMailAccountReq:
    properties:
      account:
        $ref: '#/definitions/entity.MailAccount'
      account_id:
        type: integer
    type: object
  dto.UpdateMailReq:
    properties:
      mail:
        $ref: '#/definitions/entity.Mail'
      mail_id:
        type: integer
      variables:
        items:
          $ref: '#/definitions/entity.Variable'
        type: array
    type: object
  dto.UpdateMailResp:
    properties:
      error:
        properties:
          code:
            type: integer
          message:
            type: string
        type: object
      html:
        type: string
    type: object
  dto.UpdateTemplateReq:
    properties:
      template:
        $ref: '#/definitions/entity.Template'
      templateID:
        type: integer
      variables:
        items:
          $ref: '#/definitions/entity.Variable'
        type: array
    type: object
  entity.Mail:
    properties:
      account_id:
        type: integer
      created_at:
        type: string
      id:
        type: integer
      send_at:
        type: string
      send_to:
        items:
          type: string
        type: array
      status:
        type: string
      subject:
        type: string
      templateID:
        type: integer
      variables:
        items:
          type: integer
        type: array
    type: object
  entity.MailAccount:
    properties:
      created_at:
        type: string
      id:
        type: integer
      password:
        type: string
      smtp_host:
        type: string
      smtp_port:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
  entity.Template:
    properties:
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
    type: object
  entity.Variable:
    properties:
      default:
        type: string
      name:
        type: string
      require:
        type: boolean
      type:
        type: string
      value:
        type: string
    type: object
info:
  contact: {}
paths:
  /account:
    delete:
      description: Delete account by id
      parameters:
      - description: account id
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: delete OK
          schema:
            $ref: '#/definitions/dto.RespErr'
      summary: Delete account by id
      tags:
      - account
    get:
      description: Get account if id is not specified, then get all account with page
        and size
      parameters:
      - description: account id
        in: query
        name: id
        type: integer
      - description: page
        in: query
        name: page
        type: integer
      - description: size
        in: query
        name: size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Get success
          schema:
            $ref: '#/definitions/dto.GetMailAccountResp'
      summary: Get account
      tags:
      - account
    post:
      description: Create new account
      parameters:
      - description: account info
        in: body
        name: createReq
        required: true
        schema:
          $ref: '#/definitions/dto.CreateMailAccountReq'
      produces:
      - application/json
      responses:
        "200":
          description: Create OK
          schema:
            $ref: '#/definitions/dto.CreateMailAccountResp'
      summary: Create new account
      tags:
      - account
    put:
      description: Update account info (Need to specified account ID)
      parameters:
      - description: Update info
        in: body
        name: updateReq
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateMailAccountReq'
      produces:
      - application/json
      responses:
        "200":
          description: Update OK
          schema:
            $ref: '#/definitions/dto.RespErr'
      summary: Update account info
      tags:
      - account
  /delete:
    delete:
      description: Delete mail by id
      parameters:
      - description: mail ID
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: delete OK
          schema:
            $ref: '#/definitions/dto.RespErr'
      summary: Delete mail
      tags:
      - mail
  /mail:
    get:
      description: Get mail, if id is not specified, get all by page and size
      parameters:
      - description: mail id
        in: query
        name: id
        type: integer
      - description: page
        in: query
        name: page
        type: integer
      - description: size
        in: query
        name: size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Get OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.GetMailResp'
            - properties:
                mail:
                  items:
                    allOf:
                    - $ref: '#/definitions/entity.Mail'
                    - properties:
                        send_to:
                          items:
                            type: string
                          type: array
                      type: object
                  type: array
              type: object
      summary: Get mail
      tags:
      - mail
    post:
      description: Create new mail, will generate html to preview
      parameters:
      - description: create req
        in: body
        name: createReq
        required: true
        schema:
          $ref: '#/definitions/dto.CreateNewMailReq'
      produces:
      - application/json
      responses:
        "200":
          description: Create OK
          schema:
            $ref: '#/definitions/dto.CreateNewMailResp'
      summary: Create new mail
      tags:
      - mail
    put:
      description: update email, need to specify id, update variables will update
        entire mail variables
      parameters:
      - description: Update info
        in: body
        name: updateReq
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateMailReq'
      produces:
      - application/json
      responses:
        "200":
          description: Update OK
          schema:
            $ref: '#/definitions/dto.UpdateMailResp'
      summary: update email
      tags:
      - mail
  /mail/send:
    post:
      description: Send email
      parameters:
      - description: mail info
        in: body
        name: SendReq
        required: true
        schema:
          $ref: '#/definitions/dto.SendEmailReq'
      produces:
      - application/json
      responses:
        "200":
          description: Send OK
          schema:
            $ref: '#/definitions/dto.SendEmailResp'
      summary: Send email
      tags:
      - mail
  /template:
    delete:
      description: DeleteTemplate by id
      parameters:
      - description: templateID
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: DeleteOK
          schema:
            $ref: '#/definitions/dto.RespErr'
      summary: DeleteTemplate
      tags:
      - template
    get:
      description: Get template, if id is not specified, then get all template with
        page and size
      parameters:
      - description: template id
        in: query
        name: id
        type: integer
      - description: page
        in: query
        name: page
        type: integer
      - description: size
        in: query
        name: size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Get OK
          schema:
            $ref: '#/definitions/dto.GetTemplateResp'
      summary: Get template
      tags:
      - template
    post:
      description: Create new template
      parameters:
      - description: Create info
        in: body
        name: createReq
        required: true
        schema:
          $ref: '#/definitions/dto.CreateNewTemplateReq'
      produces:
      - application/json
      responses:
        "200":
          description: Create OK
          schema:
            $ref: '#/definitions/dto.CreateNewTemplateResp'
      summary: Create new template
      tags:
      - template
    put:
      description: Update template, need to specified templateID, will not validate
        template
      parameters:
      - description: update req
        in: body
        name: updateReq
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateTemplateReq'
      produces:
      - application/json
      responses:
        "200":
          description: Update OK
          schema:
            $ref: '#/definitions/dto.RespErr'
      summary: Update template
      tags:
      - template
swagger: "2.0"
